{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index This is SheronW's Personal Wiki. Hope you'll find something useful. I find it is better to put coding notes to my gist , so the wiki will only contain theoretical or academic contents : ) Please notice that THIS SITE CONTAINS SOME SIMPLIFIED CHINESE CONTENT , because those notes are originally from my blog. Sorry for the inconvenience(if there's any). I'll put anything interesting on the internet into Excerpt, please advise to remove immediately if any infringement caused. Lastly, if you happen to be able to read in Chinese, please check my personal blog and my telegram channel .","title":"Index"},{"location":"#index","text":"This is SheronW's Personal Wiki. Hope you'll find something useful. I find it is better to put coding notes to my gist , so the wiki will only contain theoretical or academic contents : ) Please notice that THIS SITE CONTAINS SOME SIMPLIFIED CHINESE CONTENT , because those notes are originally from my blog. Sorry for the inconvenience(if there's any). I'll put anything interesting on the internet into Excerpt, please advise to remove immediately if any infringement caused. Lastly, if you happen to be able to read in Chinese, please check my personal blog and my telegram channel .","title":"Index"},{"location":"epidemiology/","text":"Epidemiology Basic Definitions attack rate : the % of people who get sick after exposing to something relative risk : the % who become ill in one group divided by the % who become ill in another group, i.e. the ratio of two attack rates case & control \u5b9e\u9a8c\u7ec4\u4e0e\u5bf9\u7167\u7ec4\uff1f incidence & prevalence : Thinking about a tank of prevalent cases, then the incident cases shoud come in while dealth or recovery should come out. prevalence : number with the disease/population size prevalence depends on incidence rate and duration: P/(1-P) \\approx IR \\times D incidence : number of new cases/population size at risk case-fatality ratio(CFR) : the percent of people with the condition who die in a time period (death/cases) age-adjusted death rate : \\sum_{\\text{age group}} age \\% \\times \\text{CFR by age} life expectation (\\sum_{eachAgeGroup} death \\times midpoint)/total Sometimes there is no midpoint and we will use the upper bound of each age group. disability-adjusted life year(DALY): the day you could live times your life quality (from 0 to 1) When there will be multi-possible outcomes, use: \\sum \\text{the day you could live} \\times quality \\times possibility potential years of life lost(PYLL): \\sum_{eachAgeGroup} \\times CFR \\times lifeExpectation \\times confirmedCase\\% Modeling R0 - the number of people that one person could spread to We could reduce R0 by: vaccinating and reduce the number of people who are susceptible quaranting, to reduce transmission (or culling animals) SIR Model susceptible infected Recovered or removed S + I + R = 1 Given transmission rate \\beta and recovery rate \\gamma : \\delta S(t)/\\delta t = -\\beta S(t)I(t) \\delta R/ \\delta t = \\gamma I \\delta I / \\delta t = \\beta SI - \\gamma I R_0 = \\beta / \\gamma SEIR Model susceptible exposed infected recovered Or, you have to add births, deaths, migration or carriers of a disease. After adding death parameter \\mu =birth parameter \\nu , where \\rho is the death possibility of the disease: \\delta S(t)/\\delta t = \\nu -\\beta S(t)I(t) - \\mu S \\delta R/ \\delta t = (1-r)\\gamma I - \\mu R \\delta I / \\delta t = \\beta SI - (\\gamma+\\mu)/(1-r) I R_0 = \\beta(1- \\rho)\\nu/(\\mu + \\gamma)\\mu To stop an epidemic, we need R0<1. S< \\gamma \\beta make S small by vaccinating make \\beta small by washing hands or social distancing make \\gamma large by quarantine(shorten 1/\\gamma ) Vaccination herd immunity : we only need to vaccinate a portion of people to eradicate an infection, the portion is: p_c = 1-1/R_0 periods incubation period : the time between infection and onset of clinical disease/symptoms latent period : time between infection and becoming infectious","title":"Epidemiology"},{"location":"epidemiology/#epidemiology","text":"","title":"Epidemiology"},{"location":"epidemiology/#basic-definitions","text":"attack rate : the % of people who get sick after exposing to something relative risk : the % who become ill in one group divided by the % who become ill in another group, i.e. the ratio of two attack rates case & control \u5b9e\u9a8c\u7ec4\u4e0e\u5bf9\u7167\u7ec4\uff1f incidence & prevalence : Thinking about a tank of prevalent cases, then the incident cases shoud come in while dealth or recovery should come out. prevalence : number with the disease/population size prevalence depends on incidence rate and duration: P/(1-P) \\approx IR \\times D incidence : number of new cases/population size at risk case-fatality ratio(CFR) : the percent of people with the condition who die in a time period (death/cases) age-adjusted death rate : \\sum_{\\text{age group}} age \\% \\times \\text{CFR by age}","title":"Basic Definitions"},{"location":"epidemiology/#life-expectation","text":"(\\sum_{eachAgeGroup} death \\times midpoint)/total Sometimes there is no midpoint and we will use the upper bound of each age group. disability-adjusted life year(DALY): the day you could live times your life quality (from 0 to 1) When there will be multi-possible outcomes, use: \\sum \\text{the day you could live} \\times quality \\times possibility potential years of life lost(PYLL): \\sum_{eachAgeGroup} \\times CFR \\times lifeExpectation \\times confirmedCase\\%","title":"life expectation"},{"location":"epidemiology/#modeling","text":"R0 - the number of people that one person could spread to We could reduce R0 by: vaccinating and reduce the number of people who are susceptible quaranting, to reduce transmission (or culling animals)","title":"Modeling"},{"location":"epidemiology/#sir-model","text":"susceptible infected Recovered or removed S + I + R = 1 Given transmission rate \\beta and recovery rate \\gamma : \\delta S(t)/\\delta t = -\\beta S(t)I(t) \\delta R/ \\delta t = \\gamma I \\delta I / \\delta t = \\beta SI - \\gamma I R_0 = \\beta / \\gamma","title":"SIR  Model"},{"location":"epidemiology/#seir-model","text":"susceptible exposed infected recovered Or, you have to add births, deaths, migration or carriers of a disease. After adding death parameter \\mu =birth parameter \\nu , where \\rho is the death possibility of the disease: \\delta S(t)/\\delta t = \\nu -\\beta S(t)I(t) - \\mu S \\delta R/ \\delta t = (1-r)\\gamma I - \\mu R \\delta I / \\delta t = \\beta SI - (\\gamma+\\mu)/(1-r) I R_0 = \\beta(1- \\rho)\\nu/(\\mu + \\gamma)\\mu To stop an epidemic, we need R0<1. S< \\gamma \\beta make S small by vaccinating make \\beta small by washing hands or social distancing make \\gamma large by quarantine(shorten 1/\\gamma )","title":"SEIR Model"},{"location":"epidemiology/#vaccination","text":"herd immunity : we only need to vaccinate a portion of people to eradicate an infection, the portion is: p_c = 1-1/R_0","title":"Vaccination"},{"location":"epidemiology/#periods","text":"incubation period : the time between infection and onset of clinical disease/symptoms latent period : time between infection and becoming infectious","title":"periods"},{"location":"Linux/basic_vps/","text":"new VPS setup log \u65b0\u5efa\u7528\u6237 useradd -m \u7528\u6237\u540d passwd \u7528\u6237\u540d \u5c06\u8be5\u7528\u6237\u8d4b\u4e88root\u6743\u9650(\u5229\u7528sudo\u547d\u4ee4\uff0c\u9700\u8981\u8f93\u5165\u5bc6\u7801) \u8d4b\u4e88\u6587\u4ef6\u8bfb\u5199\u6743\u9650\uff1a chmod u+w /etc/sudoers \u6253\u5f00\u6587\u4ef6\u627e\u5230 root ALL = (ALL:ALL) ALL \u4e0b\u9762\u6dfb\u52a0 \u7528\u6237\u540d ALL = (ALL:ALL) ALL \u53d6\u6d88\u8bfb\u5199\u6743\u9650\uff1a chmod u-w /etc/sudoers ssh configuration create rsa key ssh-keygen -t rsa import public key cd .ssh cat id_rsa.pub >> authorized_keys chmod 600 authorized_keys chmod 700 ~/.ssh sudo chmod u+w /etc/ssh/sshd_config sudo vim /etc/ssh/sshd_config find these lines and change to: PermitRootLogin no RSAAuthentication yes PubkeyAuthentication yes sudo chomod u-w /etc/ssh/sshd_config use WINSCP to get id_rsa , open PuTTYGen, load file, add necessary information, then save private key open PuTTY, Connection -> SSH -> Auth , find Private key file for authentication and load it you could go back to /etc/ssh/sshd_config and add this line to deny password authentication, if you like: PasswordAuthentication no","title":"new VPS setup log"},{"location":"Linux/basic_vps/#new-vps-setup-log","text":"","title":"new VPS setup log"},{"location":"Linux/basic_vps/#_1","text":"useradd -m \u7528\u6237\u540d passwd \u7528\u6237\u540d","title":"\u65b0\u5efa\u7528\u6237"},{"location":"Linux/basic_vps/#rootsudo","text":"\u8d4b\u4e88\u6587\u4ef6\u8bfb\u5199\u6743\u9650\uff1a chmod u+w /etc/sudoers \u6253\u5f00\u6587\u4ef6\u627e\u5230 root ALL = (ALL:ALL) ALL \u4e0b\u9762\u6dfb\u52a0 \u7528\u6237\u540d ALL = (ALL:ALL) ALL \u53d6\u6d88\u8bfb\u5199\u6743\u9650\uff1a chmod u-w /etc/sudoers","title":"\u5c06\u8be5\u7528\u6237\u8d4b\u4e88root\u6743\u9650(\u5229\u7528sudo\u547d\u4ee4\uff0c\u9700\u8981\u8f93\u5165\u5bc6\u7801)"},{"location":"Linux/basic_vps/#ssh-configuration","text":"create rsa key ssh-keygen -t rsa import public key cd .ssh cat id_rsa.pub >> authorized_keys chmod 600 authorized_keys chmod 700 ~/.ssh sudo chmod u+w /etc/ssh/sshd_config sudo vim /etc/ssh/sshd_config find these lines and change to: PermitRootLogin no RSAAuthentication yes PubkeyAuthentication yes sudo chomod u-w /etc/ssh/sshd_config use WINSCP to get id_rsa , open PuTTYGen, load file, add necessary information, then save private key open PuTTY, Connection -> SSH -> Auth , find Private key file for authentication and load it you could go back to /etc/ssh/sshd_config and add this line to deny password authentication, if you like: PasswordAuthentication no","title":"ssh configuration"},{"location":"Linux/efbscreen/","text":"EH Forwarder Bot 2.0\u4fdd\u6301\u540e\u53f0\u8fd0\u884c\uff08Screen\uff09 \u5fae\u4fe1\u5347\u7ea7\u52307\u4e4b\u540e\u5c31\u7ecf\u5e38\u6536\u4e0d\u5230\u540e\u53f0\u63a8\u9001\uff08\u4e0d\u77e5\u9053\u95ee\u9898\u662f\u51fa\u5728\u7f8e\u56fd\u7684\u7f51\u7edc\u8fd8\u662f\u6211\u7684pixel\uff09\uff0c\u4f46\u7f51\u9875\u7248\u7684\u63a8\u9001\u663e\u7136\u662f\u6b63\u5e38\u7684\uff0c\u4e8e\u662f\u51b3\u5b9a\u65f6\u9694\u4e00\u5e74\u518d\u6b21\u5378\u8f7d\u5fae\u4fe1\uff0c\u4f7f\u7528efb\u3002 \u8981\u662f\u6709\u7a7a\u987a\u4fbf\u628aFacebook Messenger\u4e5f\u90e8\u7f72\u4e86\u5427 \u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u4e2adocumentation \u7528\u7684\u662fVultr\u7684VPS\uff0c5\u5200\u4e00\u4e2a\u6708\u7684\u90a3\u4e2a\uff08\u4e4b\u524d\u7528\u7684\u662fdigitalocean\uff0cgithub student package\u91cc\u9762\u6709\u4f18\u60e0\uff09\uff0c\u6709\u70b9\u8089\u75bc\u2026\u2026 \u5b89\u88c5\u65b9\u6cd5\u548c\u5f53\u521d\u88c51.0\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u53ea\u4e0d\u8fc7\u540e\u53f0\u8fd0\u884c\u7684\u65b9\u6cd5\u548c\u4e4b\u524d\u4e0d\u592a\u4e00\u6837\uff0c\u6240\u4ee5\u4ece \u8fd9\u91cc \u627e\u5230\u4e86\u89e3\u51b3\u65b9\u6848\uff0c\u8bb0\u5728\u4e0b\u9762\uff1a \u9996\u5148\u8981\u7528screen\u4fdd\u6301\u540e\u53f0\u8fd0\u884c \u5c06\u5176\u540e\u53f0\u5316\u9700\u8981Ctrl+a\u3001Ctrl+d \u518d\u6b21\u6253\u5f00\u7684\u8bdd\u9700\u8981\u6267\u884cscreen -ls\u547d\u4ee4\uff0c\u7136\u540e\u518dscreen -r XXXXX \u5c06\u5176\u505c\u6389\u9700\u8981Ctrl+c\u3001Ctrl+d # \u65b0\u5efa\u4e00\u4e2a\u6709\u540d\u5b57\u7684session screen -S name # \u518d\u5207\u56de\u53bb screen -r name","title":"EH Forwarder Bot 2.0\u4fdd\u6301\u540e\u53f0\u8fd0\u884c\uff08Screen\uff09"},{"location":"Linux/efbscreen/#eh-forwarder-bot-20screen","text":"\u5fae\u4fe1\u5347\u7ea7\u52307\u4e4b\u540e\u5c31\u7ecf\u5e38\u6536\u4e0d\u5230\u540e\u53f0\u63a8\u9001\uff08\u4e0d\u77e5\u9053\u95ee\u9898\u662f\u51fa\u5728\u7f8e\u56fd\u7684\u7f51\u7edc\u8fd8\u662f\u6211\u7684pixel\uff09\uff0c\u4f46\u7f51\u9875\u7248\u7684\u63a8\u9001\u663e\u7136\u662f\u6b63\u5e38\u7684\uff0c\u4e8e\u662f\u51b3\u5b9a\u65f6\u9694\u4e00\u5e74\u518d\u6b21\u5378\u8f7d\u5fae\u4fe1\uff0c\u4f7f\u7528efb\u3002 \u8981\u662f\u6709\u7a7a\u987a\u4fbf\u628aFacebook Messenger\u4e5f\u90e8\u7f72\u4e86\u5427 \u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u4e2adocumentation \u7528\u7684\u662fVultr\u7684VPS\uff0c5\u5200\u4e00\u4e2a\u6708\u7684\u90a3\u4e2a\uff08\u4e4b\u524d\u7528\u7684\u662fdigitalocean\uff0cgithub student package\u91cc\u9762\u6709\u4f18\u60e0\uff09\uff0c\u6709\u70b9\u8089\u75bc\u2026\u2026 \u5b89\u88c5\u65b9\u6cd5\u548c\u5f53\u521d\u88c51.0\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u53ea\u4e0d\u8fc7\u540e\u53f0\u8fd0\u884c\u7684\u65b9\u6cd5\u548c\u4e4b\u524d\u4e0d\u592a\u4e00\u6837\uff0c\u6240\u4ee5\u4ece \u8fd9\u91cc \u627e\u5230\u4e86\u89e3\u51b3\u65b9\u6848\uff0c\u8bb0\u5728\u4e0b\u9762\uff1a \u9996\u5148\u8981\u7528screen\u4fdd\u6301\u540e\u53f0\u8fd0\u884c \u5c06\u5176\u540e\u53f0\u5316\u9700\u8981Ctrl+a\u3001Ctrl+d \u518d\u6b21\u6253\u5f00\u7684\u8bdd\u9700\u8981\u6267\u884cscreen -ls\u547d\u4ee4\uff0c\u7136\u540e\u518dscreen -r XXXXX \u5c06\u5176\u505c\u6389\u9700\u8981Ctrl+c\u3001Ctrl+d # \u65b0\u5efa\u4e00\u4e2a\u6709\u540d\u5b57\u7684session screen -S name # \u518d\u5207\u56de\u53bb screen -r name","title":"EH Forwarder Bot 2.0\u4fdd\u6301\u540e\u53f0\u8fd0\u884c\uff08Screen\uff09"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/","text":"decimal,binary,hex,Two\u2019s Complement Notation \u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236 \u5f88\u7b80\u5355\uff0c\u4ece\u53f3\u5f80\u5de6\u52a0\uff0c\u7b2c\u4e00\u4f4d\u4e58\u4ee52\u7684\u96f6\u6b21\u65b9\uff0c\u7b2c\u4e8c\u4f4d\u4e58\u4ee52\u7684\u4e00\u6b21\u65b9\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\u2026\u2026 10101 10 =1*2^4+0*2^3+1*2^2+0*2^1+1*2^0=21 \u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662fHorner\u2019s Rule\uff0c\u4ece\u5de6\u5f80\u53f3\u7b97\uff0c\u6bcf\u6b21\u628a\u4e0b\u4e00\u4f4d\u52a0\u5728\u8fd9\u4e2a\u7ed3\u679c\u4e2d\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u3002 10101 10 =(((1*2+0)*2+1)*2+0)*2+1=21 \u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 \u4e0d\u65ad\u5730\u9664\u4ee5\u4e8c\uff0c\u76f4\u5230\u9664\u4e0d\u52a8\u4e86\u4e3a\u6b62\uff0c\u6bcf\u4e00\u6b65\u5f97\u5230\u7684\u4f59\u6570\u5012\u8fc7\u6765\u5c31\u662f\u6240\u6c42\u7684\u4e8c\u8fdb\u5236\u3002 - 10 /2=5 ...0 - 5/2=2 ... 1 - 2/2=1 ... 0 - 1/2=0 ... 1 \u6240\u4ee510\u7684\u4e8c\u8fdb\u5236\u4e3a1010 \u5f53\u7136\uff0c\u5982\u679c\u4e0d\u60f3\u6700\u540e\u518d\u98a0\u5012\u4e00\u904d\u7684\u8bdd\uff0c\u53ef\u4ee5\u7b97\u7684\u65f6\u5019\u4ece\u4e0b\u5f80\u4e0a\u5199XD \u5341\u516d\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 \u5341\u516d\u8fdb\u5236\u7684\u6bcf\u4e00\u4f4d\u90fd\u80fd\u8f6c\u6362\u6210\u4e00\u4e2a\u56db\u4f4d\u7684\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u628a\u5b83\u4eec\u62fc\u8d77\u6765\u5c31\u597d\uff0c\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2a\u8f6c\u6362\u8868\uff0c\u4f46\u7b97\u8d77\u6765\u4e5f\u4e0d\u9ebb\u70e6\uff0c\u6211\u89c9\u5f97\u4e0d\u80cc\u4e5f\u884c\u3002 \u4e8c\u8fdb\u5236\u8f6c\u5341\u516d\u8fdb\u5236 \u548c\u4e0a\u9762\u4e00\u4e2a\u9053\u7406\uff0c\u6bcf\u56db\u4f4d\u4e8c\u8fdb\u5236\u90fd\u80fd\u8f6c\u6362\u6210\u4e00\u4f4d\u5341\u516d\u8fdb\u5236\uff0c\u5982\u679c\u6700\u540e\u4e00\u7ec4\u4e0d\u8db3\u56db\u4f4d\u586b\u4e0a\u51e0\u4e2a\u96f6\u5c31\u597d\u3002 \u5341\u516d\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236 \u548c\u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236\u4e00\u4e2a\u9053\u7406\uff0c\u53ea\u4e0d\u8fc7\u628a2\u6362\u621016\u4e86\u800c\u5df2\u3002 \u5341\u8fdb\u5236\u8f6c\u5341\u516d\u8fdb\u5236 \u540c\u4e0a\uff0c\u548c\u4e8c\u8fdb\u5236\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u65ad\u9664\u4ee516\u3002 Two\u2019s Complement \u8fd9\u662f\u4e00\u79cd\u7528\u4e8c\u8fdb\u5236\u8868\u8fbe\u6574\u6570\uff08\u5305\u62ec\u6b63\u8d1f\uff09\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u9996\u5148\uff0c\u4ece\u6700\u5de6\u8fb9\u7684\u90a3\u4e00\u4f4d\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u6570\u5b57\u7684\u6b63\u8d1f\u2014\u20140\u4e3a\u6b63\uff0c1\u4e3a\u8d1f\u3002 \u5982\u679c\u662f\u6b63\u6570\u7684\u8bdd\uff0c\u548c\u4e4b\u524d\u8bb2\u5230\u7684\u4f20\u7edf\u4e8c\u8fdb\u5236\u8868\u8fbe\u662f\u76f8\u540c\u7684\u3002 \u5982\u679c\u662f\u8d1f\u6570\u7684\u8bdd\uff0c\u60f3\u8981\u77e5\u9053\u5b83\u7684\u5177\u4f53\u503c\uff0c\u6211\u4eec\u9700\u8981\u5c06Two\u2019s Complement\u8f6c\u6362\u6210\u5b83\u7684\u76f8\u53cd\u6570\uff08\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u6570\u5b57\u7684\u6574\u6570\u7248\u672c\uff09\u3002 \u8f6c\u6362\u6210\u76f8\u53cd\u6570\u7684\u7b97\u6cd5\u5982\u4e0b\uff08\u540c\u65f6\u9002\u7528\u4e0e\u6b63\u6570\u548c\u8d1f\u6570\uff09\uff1a - \u5c06\u6bcf\u4e00\u4f4d\u7684\u6570\u5b57\u98a0\u5012\uff08\u98a0\u5012\u6307\u7684\u662f\uff0c1\u6362\u62100\uff0c0\u6362\u62101\uff09 - \u5728\u98a0\u5012\u4e4b\u540e\u7684\u57fa\u7840\u4e0a\u518d+1 \u6bd4\u5982\u8fd9\u91cc\u6709\u4e2a\u6211\u778e\u7f16\u768432bits\u7684\u6570\u5b57\uff1a 1010 0100 0100 1111 1010 1100 0101 0000 \u7b2c\u4e00\u4f4d\u662f1\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u662f\u5c0f\u4e8e\u96f6\u7684 \u9996\u5148\u6211\u4eec\u8981\u628a\u5b83\u53d8\u6210\u8fd9\u6837\u7684\uff1a 0101 1011 1011 0000 0101 0011 1010 1111 \u7136\u540e\u518d+1\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a 0101 1011 1011 0000 0101 0011 1011 0000 \u8fd9\u4e2a\u6570\u5c31\u662f\u6700\u524d\u9762\u778e\u7f16\u7684\u90a3\u4e2a\u6570\u7684\u76f8\u53cd\u6570 \u54e6\u5bf9\u4e86\uff0c\u56e0\u4e3a32bits\u7684\u4e8c\u8fdb\u5236\u5199\u8d77\u6765\u592a\u957f\u4e86\uff0c\u6240\u4ee5\u7ecf\u5e38\u4f1a\u7528\u5341\u516d\u8fdb\u5236\u6765\u8868\u793a\u3002","title":"decimal,binary,hex,Two\u2019s Complement Notation"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#decimalbinaryhextwos-complement-notation","text":"","title":"decimal,binary,hex,Two\u2019s Complement Notation"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#_1","text":"\u5f88\u7b80\u5355\uff0c\u4ece\u53f3\u5f80\u5de6\u52a0\uff0c\u7b2c\u4e00\u4f4d\u4e58\u4ee52\u7684\u96f6\u6b21\u65b9\uff0c\u7b2c\u4e8c\u4f4d\u4e58\u4ee52\u7684\u4e00\u6b21\u65b9\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\u2026\u2026 10101 10 =1*2^4+0*2^3+1*2^2+0*2^1+1*2^0=21 \u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662fHorner\u2019s Rule\uff0c\u4ece\u5de6\u5f80\u53f3\u7b97\uff0c\u6bcf\u6b21\u628a\u4e0b\u4e00\u4f4d\u52a0\u5728\u8fd9\u4e2a\u7ed3\u679c\u4e2d\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u3002 10101 10 =(((1*2+0)*2+1)*2+0)*2+1=21","title":"\u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#_2","text":"\u4e0d\u65ad\u5730\u9664\u4ee5\u4e8c\uff0c\u76f4\u5230\u9664\u4e0d\u52a8\u4e86\u4e3a\u6b62\uff0c\u6bcf\u4e00\u6b65\u5f97\u5230\u7684\u4f59\u6570\u5012\u8fc7\u6765\u5c31\u662f\u6240\u6c42\u7684\u4e8c\u8fdb\u5236\u3002 - 10 /2=5 ...0 - 5/2=2 ... 1 - 2/2=1 ... 0 - 1/2=0 ... 1 \u6240\u4ee510\u7684\u4e8c\u8fdb\u5236\u4e3a1010 \u5f53\u7136\uff0c\u5982\u679c\u4e0d\u60f3\u6700\u540e\u518d\u98a0\u5012\u4e00\u904d\u7684\u8bdd\uff0c\u53ef\u4ee5\u7b97\u7684\u65f6\u5019\u4ece\u4e0b\u5f80\u4e0a\u5199XD","title":"\u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#_3","text":"\u5341\u516d\u8fdb\u5236\u7684\u6bcf\u4e00\u4f4d\u90fd\u80fd\u8f6c\u6362\u6210\u4e00\u4e2a\u56db\u4f4d\u7684\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u628a\u5b83\u4eec\u62fc\u8d77\u6765\u5c31\u597d\uff0c\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2a\u8f6c\u6362\u8868\uff0c\u4f46\u7b97\u8d77\u6765\u4e5f\u4e0d\u9ebb\u70e6\uff0c\u6211\u89c9\u5f97\u4e0d\u80cc\u4e5f\u884c\u3002","title":"\u5341\u516d\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#_4","text":"\u548c\u4e0a\u9762\u4e00\u4e2a\u9053\u7406\uff0c\u6bcf\u56db\u4f4d\u4e8c\u8fdb\u5236\u90fd\u80fd\u8f6c\u6362\u6210\u4e00\u4f4d\u5341\u516d\u8fdb\u5236\uff0c\u5982\u679c\u6700\u540e\u4e00\u7ec4\u4e0d\u8db3\u56db\u4f4d\u586b\u4e0a\u51e0\u4e2a\u96f6\u5c31\u597d\u3002","title":"\u4e8c\u8fdb\u5236\u8f6c\u5341\u516d\u8fdb\u5236"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#_5","text":"\u548c\u4e8c\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236\u4e00\u4e2a\u9053\u7406\uff0c\u53ea\u4e0d\u8fc7\u628a2\u6362\u621016\u4e86\u800c\u5df2\u3002","title":"\u5341\u516d\u8fdb\u5236\u8f6c\u5341\u8fdb\u5236"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#_6","text":"\u540c\u4e0a\uff0c\u548c\u4e8c\u8fdb\u5236\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u65ad\u9664\u4ee516\u3002","title":"\u5341\u8fdb\u5236\u8f6c\u5341\u516d\u8fdb\u5236"},{"location":"computer%20science/10%2C2%2C16%26Two%27s%20Complement%20Notation/#twos-complement","text":"\u8fd9\u662f\u4e00\u79cd\u7528\u4e8c\u8fdb\u5236\u8868\u8fbe\u6574\u6570\uff08\u5305\u62ec\u6b63\u8d1f\uff09\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u9996\u5148\uff0c\u4ece\u6700\u5de6\u8fb9\u7684\u90a3\u4e00\u4f4d\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u6570\u5b57\u7684\u6b63\u8d1f\u2014\u20140\u4e3a\u6b63\uff0c1\u4e3a\u8d1f\u3002 \u5982\u679c\u662f\u6b63\u6570\u7684\u8bdd\uff0c\u548c\u4e4b\u524d\u8bb2\u5230\u7684\u4f20\u7edf\u4e8c\u8fdb\u5236\u8868\u8fbe\u662f\u76f8\u540c\u7684\u3002 \u5982\u679c\u662f\u8d1f\u6570\u7684\u8bdd\uff0c\u60f3\u8981\u77e5\u9053\u5b83\u7684\u5177\u4f53\u503c\uff0c\u6211\u4eec\u9700\u8981\u5c06Two\u2019s Complement\u8f6c\u6362\u6210\u5b83\u7684\u76f8\u53cd\u6570\uff08\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u6570\u5b57\u7684\u6574\u6570\u7248\u672c\uff09\u3002 \u8f6c\u6362\u6210\u76f8\u53cd\u6570\u7684\u7b97\u6cd5\u5982\u4e0b\uff08\u540c\u65f6\u9002\u7528\u4e0e\u6b63\u6570\u548c\u8d1f\u6570\uff09\uff1a - \u5c06\u6bcf\u4e00\u4f4d\u7684\u6570\u5b57\u98a0\u5012\uff08\u98a0\u5012\u6307\u7684\u662f\uff0c1\u6362\u62100\uff0c0\u6362\u62101\uff09 - \u5728\u98a0\u5012\u4e4b\u540e\u7684\u57fa\u7840\u4e0a\u518d+1 \u6bd4\u5982\u8fd9\u91cc\u6709\u4e2a\u6211\u778e\u7f16\u768432bits\u7684\u6570\u5b57\uff1a 1010 0100 0100 1111 1010 1100 0101 0000 \u7b2c\u4e00\u4f4d\u662f1\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u662f\u5c0f\u4e8e\u96f6\u7684 \u9996\u5148\u6211\u4eec\u8981\u628a\u5b83\u53d8\u6210\u8fd9\u6837\u7684\uff1a 0101 1011 1011 0000 0101 0011 1010 1111 \u7136\u540e\u518d+1\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a 0101 1011 1011 0000 0101 0011 1011 0000 \u8fd9\u4e2a\u6570\u5c31\u662f\u6700\u524d\u9762\u778e\u7f16\u7684\u90a3\u4e2a\u6570\u7684\u76f8\u53cd\u6570 \u54e6\u5bf9\u4e86\uff0c\u56e0\u4e3a32bits\u7684\u4e8c\u8fdb\u5236\u5199\u8d77\u6765\u592a\u957f\u4e86\uff0c\u6240\u4ee5\u7ecf\u5e38\u4f1a\u7528\u5341\u516d\u8fdb\u5236\u6765\u8868\u793a\u3002","title":"Two\u2019s Complement"},{"location":"computer%20science/bit_level_operators/","text":"\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u64cd\u4f5c\u7b26 Java << left shift >> signed right shift (filled with sign bits) >>> unsigned right shift (filled with 0s) & bitwise and | bitwise or ^ bitwise exclusive or C \u5927\u81f4\u4e0eJava\u76f8\u540c\uff0c\u53ea\u662f\u6ca1\u6709unsigned right shift\uff0c\u5177\u4f53\u4f1a\u600e\u4e48shift\u53d6\u51b3\u4e8e\u6570\u636e\u578b\u672c\u8eab\u3002 \u4e00\u4e9b\u7528\u6cd5 set bits to 0 x&0=0 x&1=x set bits to 1 x|0=x x|1=1 invert bits x^0=x x^1=!x \u5e94\u7528\u2026\u2026\uff1f \u521a\u521a\u770b\u5230\u4e86 \u8fd9\u4e48\u4e00\u9053\u9898 \uff0c\u53d1\u73b0\u548c\u5f53\u521d\u5b66\u79bb\u6563\u6570\u5b66\u7684\u65f6\u5019\u9047\u5230\u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u5206\u997c\u5e72\u7684\u9898\u578b\u6709\u70b9\u50cf\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u7684\u5e94\u7528\uff0c\u5c31\u5f53\u662f\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e2a\u5b9e\u4f8b\u653e\u5728\u8fd9\u91cc\u4e86\u3002 when x & 1 ==0, the last bit in x is 0","title":"\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u64cd\u4f5c\u7b26"},{"location":"computer%20science/bit_level_operators/#_1","text":"","title":"\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u64cd\u4f5c\u7b26"},{"location":"computer%20science/bit_level_operators/#java","text":"<< left shift >> signed right shift (filled with sign bits) >>> unsigned right shift (filled with 0s) & bitwise and | bitwise or ^ bitwise exclusive or","title":"Java"},{"location":"computer%20science/bit_level_operators/#c","text":"\u5927\u81f4\u4e0eJava\u76f8\u540c\uff0c\u53ea\u662f\u6ca1\u6709unsigned right shift\uff0c\u5177\u4f53\u4f1a\u600e\u4e48shift\u53d6\u51b3\u4e8e\u6570\u636e\u578b\u672c\u8eab\u3002","title":"C"},{"location":"computer%20science/bit_level_operators/#_2","text":"","title":"\u4e00\u4e9b\u7528\u6cd5"},{"location":"computer%20science/bit_level_operators/#set-bits-to-0","text":"x&0=0 x&1=x","title":"set bits to 0"},{"location":"computer%20science/bit_level_operators/#set-bits-to-1","text":"x|0=x x|1=1","title":"set bits to 1"},{"location":"computer%20science/bit_level_operators/#invert-bits","text":"x^0=x x^1=!x","title":"invert bits"},{"location":"computer%20science/bit_level_operators/#_3","text":"\u521a\u521a\u770b\u5230\u4e86 \u8fd9\u4e48\u4e00\u9053\u9898 \uff0c\u53d1\u73b0\u548c\u5f53\u521d\u5b66\u79bb\u6563\u6570\u5b66\u7684\u65f6\u5019\u9047\u5230\u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u5206\u997c\u5e72\u7684\u9898\u578b\u6709\u70b9\u50cf\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u7684\u5e94\u7528\uff0c\u5c31\u5f53\u662f\u4f4d\u8fd0\u7b97\u7684\u4e00\u4e2a\u5b9e\u4f8b\u653e\u5728\u8fd9\u91cc\u4e86\u3002 when x & 1 ==0, the last bit in x is 0","title":"\u5e94\u7528\u2026\u2026\uff1f"},{"location":"computer%20science/chessAI/","text":"Chess AI This note is for those kinds of zero-sum games of perfect information, i.e.: we could know that 1 gamer must win and the other must lose, or in a tie; and could predict all variables(i.e. all movements in chess game). If the environment is really complicated, it could be called economies instead of games. Max & Min S_0 : initial state player(s): which player has the move action(s): a set of legal moves result(s,a): transition model, result of a move terminal test(s): T when game is over utility(s,p): the score at the end of the game(e.g. 0 for lose,1 for win,0.5 for tie) Game tree: node: state edge: move Max first, then min, until the terminal state(has utility) Optimal Decisions in Games ply Half move, which means one player move one piece on the board minimax value(n) the utility for MAX of being in the corresponding state, assuming that both players play optimally from there to the end of the game MAX tends to choice states with bigger value while MIN is the opposite MINIMAX(s) = utility(s), if terminal test(s) max_{a \\in Actions(s)} MINIMAX(result(s,a)), if players(s)=MAX min_{a \\in Actions(s)} MINIMAX(result(s,a)), if players(s)=MIN It is clear that it will be really slow to use recursion to do the calculation. Alpha-Beta Pruning consider a node n in tree such that player has a choice of moving to that node, if player has a better choice m either at parent node or further up, then n will never be reached Alpha = the value of the best(i.e. highest) choice we found so far at any point along the path for MAX Beta = the value of the best(i.e. lowest) choice we found so far at any point along the path for MIN Move Ordering If the first move to be examined is optimal, then the other moves can be eliminated to save time. For example, search for one layer down, record the best move, then use this order to search one more layer down. Imperfect Real-Time Decisions It is possible to search the whole tree, so we introduced evaluation function: H-Minimax(s,d) = Eval(s), if cutoff-test(s,d) max_{a \\in Actions(s)} H-MINIMAX(result(s,a),d+1), if players(s)=MAX min_{a \\in Actions(s)} H-MINIMAX(result(s,a),d+1), if players(s)=MIN When cutoof-test(s,d), we could use evaluation function directly. Evaluation Function We could design the evaluation function according to the experience of all human being in the history of chess. We could count the number of pieces, types of pieces or some certain piece in some certain position, etc. We could also use machine learning to calculate the coeffecient of the function. Cutting off Search If the depth is greater than a certain value, or reached the terminal state, cutoff-test(state, depth) should be T. The depth should depends on your speed of the AI. Or: iterative deepening Forward Pruning Proburt algs(use probability to eliminate choices) Look up use existed chess data","title":"Chess AI"},{"location":"computer%20science/chessAI/#chess-ai","text":"This note is for those kinds of zero-sum games of perfect information, i.e.: we could know that 1 gamer must win and the other must lose, or in a tie; and could predict all variables(i.e. all movements in chess game). If the environment is really complicated, it could be called economies instead of games.","title":"Chess AI"},{"location":"computer%20science/chessAI/#max-min","text":"S_0 : initial state player(s): which player has the move action(s): a set of legal moves result(s,a): transition model, result of a move terminal test(s): T when game is over utility(s,p): the score at the end of the game(e.g. 0 for lose,1 for win,0.5 for tie) Game tree: node: state edge: move Max first, then min, until the terminal state(has utility)","title":"Max &amp; Min"},{"location":"computer%20science/chessAI/#optimal-decisions-in-games","text":"","title":"Optimal Decisions in Games"},{"location":"computer%20science/chessAI/#ply","text":"Half move, which means one player move one piece on the board","title":"ply"},{"location":"computer%20science/chessAI/#minimax-valuen","text":"the utility for MAX of being in the corresponding state, assuming that both players play optimally from there to the end of the game MAX tends to choice states with bigger value while MIN is the opposite MINIMAX(s) = utility(s), if terminal test(s) max_{a \\in Actions(s)} MINIMAX(result(s,a)), if players(s)=MAX min_{a \\in Actions(s)} MINIMAX(result(s,a)), if players(s)=MIN It is clear that it will be really slow to use recursion to do the calculation.","title":"minimax value(n)"},{"location":"computer%20science/chessAI/#alpha-beta-pruning","text":"consider a node n in tree such that player has a choice of moving to that node, if player has a better choice m either at parent node or further up, then n will never be reached Alpha = the value of the best(i.e. highest) choice we found so far at any point along the path for MAX Beta = the value of the best(i.e. lowest) choice we found so far at any point along the path for MIN","title":"Alpha-Beta Pruning"},{"location":"computer%20science/chessAI/#move-ordering","text":"If the first move to be examined is optimal, then the other moves can be eliminated to save time. For example, search for one layer down, record the best move, then use this order to search one more layer down.","title":"Move Ordering"},{"location":"computer%20science/chessAI/#imperfect-real-time-decisions","text":"It is possible to search the whole tree, so we introduced evaluation function: H-Minimax(s,d) = Eval(s), if cutoff-test(s,d) max_{a \\in Actions(s)} H-MINIMAX(result(s,a),d+1), if players(s)=MAX min_{a \\in Actions(s)} H-MINIMAX(result(s,a),d+1), if players(s)=MIN When cutoof-test(s,d), we could use evaluation function directly.","title":"Imperfect Real-Time Decisions"},{"location":"computer%20science/chessAI/#evaluation-function","text":"We could design the evaluation function according to the experience of all human being in the history of chess. We could count the number of pieces, types of pieces or some certain piece in some certain position, etc. We could also use machine learning to calculate the coeffecient of the function.","title":"Evaluation Function"},{"location":"computer%20science/chessAI/#cutting-off-search","text":"If the depth is greater than a certain value, or reached the terminal state, cutoff-test(state, depth) should be T. The depth should depends on your speed of the AI. Or: iterative deepening","title":"Cutting off Search"},{"location":"computer%20science/chessAI/#forward-pruning","text":"Proburt algs(use probability to eliminate choices)","title":"Forward Pruning"},{"location":"computer%20science/chessAI/#look-up","text":"use existed chess data","title":"Look up"},{"location":"computer%20science/float/","text":"How to save floating point Numbers? \u6d6e\u70b9\u6570\u7684\u8868\u793a\u6cd5 \u6bcf\u4e00\u4e2a\u6d6e\u70b9\u6570\u90fd\u8981\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u7248\u672c\u7684\u79d1\u5b66\u8ba1\u6570\u6cd5\u518d\u50a8\u5b58\u8d77\u6765\uff08\u4e5f\u5c31\u662fx*2 y \uff09\uff0c\u56e0\u6b64\u9700\u8981\u5b58\u50a8\u5982\u4e0b\u6570\u636e\uff1a\u6b63\u8d1f\u53f7\uff080\u6b631\u8d1f\uff09\uff0c\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u5e42\uff082\u7684\u6b21\u65b9\u6570\uff09\uff0c\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u5c0f\u6570\u90e8\u5206\uff08\u7528-2\u8fdb\u5236\u6765\u8868\u793a\uff09\u3002 \u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236 \u628a\u8fd9\u4e2a\u6570\u5206\u6210\u5c0f\u6570\u548c\u6574\u6570\u4e24\u79cd\u5f62\u5f0f\u3002 \u6574\u6570\u76f4\u63a5\u8f6c\u4e8c\u8fdb\u5236\u7136\u540e\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002 \u5206\u6570\u90e8\u5206\uff0c\u6bcf\u6b21\u4e582\uff0c\u53d6\u8be5\u6570\u7684\u6574\u6570\u90e8\u5206\uff08\u8981\u4e48\u53d6\u4e0d\u5230\u6574\u6570\uff0c\u8981\u4e48\u53d6\u8d701\uff09\uff0c\u76f4\u5230\u5565\u90fd\u4e0d\u5269\u4e3a\u6b62\u3002\u53d6\u5230\u7684\u6570\u4ece\u5de6\u5f80\u53f3\u5199\uff0c\u6700\u524d\u9762\u52a00.\u3002 IEEE Floating Point Standard 754\u6807\u51c6 32bits\uff08float\uff09\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u4e3a\uff1a - 31: \u6b63\u8d1f\u53f7 - 30-23: 8 bits\u7684\u5e42\u6570 - 22-0: 23 bits\u7684\u5c0f\u6570\u90e8\u5206\uff08\u56e0\u4e3a\u79d1\u5b66\u8bb0\u6570\u6cd5\uff0c\u6240\u4ee5\u7b2c\u4e00\u4f4d\uff08\u5c0f\u6570\u70b9\u5de6\u4fa7\uff09\u5fc5\u7136\u662f1\uff0c\u5c31\u4e0d\u8ba1\u7b97\u5728\u5185\u4e86\uff09 64bits\uff08double\uff09\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u4e3a\uff1a - 63\uff1a\u6b63\u8d1f\u53f7 - 62-52\uff1a11 bits\u7684\u5e42\u6570 - 51-0\uff1a52 bits\u7684\u5c0f\u6570\u90e8\u5206 exponent bias method \u4e3a\u4e86\u8868\u793a\u8d1f\u6570\u6b21\u5e42\uff0c\u8f6c\u6362\u65f6\u5728\u539f\u672c\u7684\u5e42\u6570\u4e2d\u52a0\u4e00\u4e9b\u6570\u5b57\u3002 32\u4f4d+127\uff0c64\u4f4d+1023 \u8fd9\u683732\u4f4d\u5e42\u7684\u8868\u793a\u8303\u56f4\u4e3a-126~127\uff0c64\u4e3a-1022~1023 \u5728\u8fd9\u91cc\u6211\u4eec\u6ca1\u6709\u7528two\u2019s complement\uff0c\u539f\u56e0\u662f\u8fd9\u79cd\u65b9\u6cd5\u66f4\u5bb9\u6613\u6bd4\u8f83\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\u3002 \u6d6e\u70b9\u6570\u7684\u52a0\u6cd5 \u9996\u5148\u8981\u628a\u4ed6\u4eec\u5bf9\u9f50\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u4e24\u4e2a\u6570\u5b57\u7684\u5e42\u8f6c\u6362\u6210\u4e00\u6837\u7684\u3002\u7136\u540e\u548c\u5341\u8fdb\u5236\u4e00\u6837\u76f8\u52a0\u51cf\uff0c\u6700\u540e\u518d\u628a\u5f97\u5230\u7684\u7ed3\u679c\u8f6c\u6362\u6210\u79d1\u5b66\u8bb0\u6570\u6cd5\u3002 \u6d6e\u70b9\u6570\u7684\u4e58\u6cd5 \u548c\u52a0\u6cd5\u540c\u7406\u3002 \u4e0d\u8fc7\u53ef\u4ee5\u5728\u4e58\u4e4b\u524d\u5148\u5224\u65ad\u4e00\u4e0b\u7ed3\u679c\u7684\u7b26\u53f7\uff0c\u540c\u53f7\u4e3a\u6b63\u5f02\u53f7\u4e3a\u8d1f\u3002 \u7136\u540e\u76f8\u4e58\uff08\u5c0f\u6570\u90e8\u5206\u76f8\u4e58\uff0c\u5e42\u6570\u76f8\u52a0\uff09\uff0c\u6700\u540e\u8f6c\u56de\u79d1\u5b66\u8bb0\u6570\u6cd5\u3002 \u4e0d\u8fc7\u5728\u5b9e\u73b0\u8fd0\u7b97\u7684\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\uff0c\u50a8\u5b58\u5e42\u6570\u7684\u65f6\u5019\u7528\u7684\u662fbias method\uff0c\u800c\u4e14\u5c0f\u6570\u90e8\u5206\u4e2d\u5c0f\u6570\u70b9\u5de6\u8fb9\u7684\u90e8\u5206\u5e76\u6ca1\u6709\u5b9e\u9645\u5b58\u50a8\u5728\u6d6e\u70b9\u6570\u4e2d\u3002\uff08\u8840\u4e00\u6837\u7684\u6559\u8bad\uff09","title":"How to save floating point Numbers?"},{"location":"computer%20science/float/#how-to-save-floating-point-numbers","text":"","title":"How to save floating point Numbers?"},{"location":"computer%20science/float/#_1","text":"\u6bcf\u4e00\u4e2a\u6d6e\u70b9\u6570\u90fd\u8981\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u7248\u672c\u7684\u79d1\u5b66\u8ba1\u6570\u6cd5\u518d\u50a8\u5b58\u8d77\u6765\uff08\u4e5f\u5c31\u662fx*2 y \uff09\uff0c\u56e0\u6b64\u9700\u8981\u5b58\u50a8\u5982\u4e0b\u6570\u636e\uff1a\u6b63\u8d1f\u53f7\uff080\u6b631\u8d1f\uff09\uff0c\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u5e42\uff082\u7684\u6b21\u65b9\u6570\uff09\uff0c\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u5c0f\u6570\u90e8\u5206\uff08\u7528-2\u8fdb\u5236\u6765\u8868\u793a\uff09\u3002","title":"\u6d6e\u70b9\u6570\u7684\u8868\u793a\u6cd5"},{"location":"computer%20science/float/#_2","text":"\u628a\u8fd9\u4e2a\u6570\u5206\u6210\u5c0f\u6570\u548c\u6574\u6570\u4e24\u79cd\u5f62\u5f0f\u3002 \u6574\u6570\u76f4\u63a5\u8f6c\u4e8c\u8fdb\u5236\u7136\u540e\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002 \u5206\u6570\u90e8\u5206\uff0c\u6bcf\u6b21\u4e582\uff0c\u53d6\u8be5\u6570\u7684\u6574\u6570\u90e8\u5206\uff08\u8981\u4e48\u53d6\u4e0d\u5230\u6574\u6570\uff0c\u8981\u4e48\u53d6\u8d701\uff09\uff0c\u76f4\u5230\u5565\u90fd\u4e0d\u5269\u4e3a\u6b62\u3002\u53d6\u5230\u7684\u6570\u4ece\u5de6\u5f80\u53f3\u5199\uff0c\u6700\u524d\u9762\u52a00.\u3002","title":"\u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236"},{"location":"computer%20science/float/#ieee-floating-point-standard-754","text":"32bits\uff08float\uff09\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u4e3a\uff1a - 31: \u6b63\u8d1f\u53f7 - 30-23: 8 bits\u7684\u5e42\u6570 - 22-0: 23 bits\u7684\u5c0f\u6570\u90e8\u5206\uff08\u56e0\u4e3a\u79d1\u5b66\u8bb0\u6570\u6cd5\uff0c\u6240\u4ee5\u7b2c\u4e00\u4f4d\uff08\u5c0f\u6570\u70b9\u5de6\u4fa7\uff09\u5fc5\u7136\u662f1\uff0c\u5c31\u4e0d\u8ba1\u7b97\u5728\u5185\u4e86\uff09 64bits\uff08double\uff09\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u4e3a\uff1a - 63\uff1a\u6b63\u8d1f\u53f7 - 62-52\uff1a11 bits\u7684\u5e42\u6570 - 51-0\uff1a52 bits\u7684\u5c0f\u6570\u90e8\u5206","title":"IEEE Floating Point Standard 754\u6807\u51c6"},{"location":"computer%20science/float/#exponent-bias-method","text":"\u4e3a\u4e86\u8868\u793a\u8d1f\u6570\u6b21\u5e42\uff0c\u8f6c\u6362\u65f6\u5728\u539f\u672c\u7684\u5e42\u6570\u4e2d\u52a0\u4e00\u4e9b\u6570\u5b57\u3002 32\u4f4d+127\uff0c64\u4f4d+1023 \u8fd9\u683732\u4f4d\u5e42\u7684\u8868\u793a\u8303\u56f4\u4e3a-126~127\uff0c64\u4e3a-1022~1023 \u5728\u8fd9\u91cc\u6211\u4eec\u6ca1\u6709\u7528two\u2019s complement\uff0c\u539f\u56e0\u662f\u8fd9\u79cd\u65b9\u6cd5\u66f4\u5bb9\u6613\u6bd4\u8f83\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\u3002","title":"exponent bias method"},{"location":"computer%20science/float/#_3","text":"\u9996\u5148\u8981\u628a\u4ed6\u4eec\u5bf9\u9f50\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a\u4e24\u4e2a\u6570\u5b57\u7684\u5e42\u8f6c\u6362\u6210\u4e00\u6837\u7684\u3002\u7136\u540e\u548c\u5341\u8fdb\u5236\u4e00\u6837\u76f8\u52a0\u51cf\uff0c\u6700\u540e\u518d\u628a\u5f97\u5230\u7684\u7ed3\u679c\u8f6c\u6362\u6210\u79d1\u5b66\u8bb0\u6570\u6cd5\u3002","title":"\u6d6e\u70b9\u6570\u7684\u52a0\u6cd5"},{"location":"computer%20science/float/#_4","text":"\u548c\u52a0\u6cd5\u540c\u7406\u3002 \u4e0d\u8fc7\u53ef\u4ee5\u5728\u4e58\u4e4b\u524d\u5148\u5224\u65ad\u4e00\u4e0b\u7ed3\u679c\u7684\u7b26\u53f7\uff0c\u540c\u53f7\u4e3a\u6b63\u5f02\u53f7\u4e3a\u8d1f\u3002 \u7136\u540e\u76f8\u4e58\uff08\u5c0f\u6570\u90e8\u5206\u76f8\u4e58\uff0c\u5e42\u6570\u76f8\u52a0\uff09\uff0c\u6700\u540e\u8f6c\u56de\u79d1\u5b66\u8bb0\u6570\u6cd5\u3002 \u4e0d\u8fc7\u5728\u5b9e\u73b0\u8fd0\u7b97\u7684\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\uff0c\u50a8\u5b58\u5e42\u6570\u7684\u65f6\u5019\u7528\u7684\u662fbias method\uff0c\u800c\u4e14\u5c0f\u6570\u90e8\u5206\u4e2d\u5c0f\u6570\u70b9\u5de6\u8fb9\u7684\u90e8\u5206\u5e76\u6ca1\u6709\u5b9e\u9645\u5b58\u50a8\u5728\u6d6e\u70b9\u6570\u4e2d\u3002\uff08\u8840\u4e00\u6837\u7684\u6559\u8bad\uff09","title":"\u6d6e\u70b9\u6570\u7684\u4e58\u6cd5"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/","text":"Formatted I/O, Line Input, Scanf - C read a file from stdin and put it to both stdout & stderr int main (int argc, char *argv[]){ char *fname = NULL; if (argc>1){ frame=argv[1]; } else{ return 1; } FILE *file = fopen(fname, \"r\"); int input; while((input=fgetc(file))!= EOF){ fputc(input,stdout); fputc(input,stderr); } } end of file ^D end program ^C stderr line buffer stdout file buffer(???) re-reading void rewind(FILE *stream); changing location of a file to the beginning fseek: move to some location getting location long ftell(FILE * stream); off_t ftello(FILE *stream); if is larger than a long in size, then: int fgetpos(FILE *restrict stream, fpos_t *restrict pos); int fsetpos(FILE *stream, const fpos_t *pos); need to check man page for different systems df: space of hard drive file: blocks of pointers point to a chunk of data blocks of actual disk Format Printing printing to a string int sprintf(char *str, const char *format, /* args */ ); return number of bytes that would have been written writes at most size-1 bytes (leave space for null byte) line based input char *fgets(char *str, int size, FILE *stream); stores in str stops at -n, EOF do not use gets scanf scanf(\"%d\",&x); scanf(\"%s\",str); read line using fgets(), parses data using sscanf() from line character ranges(check textbook) realloc void * realloc(void *ptr, size_t size); change previous allocated block ptr be changed to size size(larger or smaller & copy old data as needed) app: connect strings getline ssize_t getline(char ** linep, size_t *linecapp, FILE * stream); free(linep); dynamically allocated, but must free later not part of c standard","title":"Formatted I/O, Line Input, Scanf - C"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#formatted-io-line-input-scanf-c","text":"","title":"Formatted I/O, Line Input, Scanf - C"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#read-a-file-from-stdin-and-put-it-to-both-stdout-stderr","text":"int main (int argc, char *argv[]){ char *fname = NULL; if (argc>1){ frame=argv[1]; } else{ return 1; } FILE *file = fopen(fname, \"r\"); int input; while((input=fgetc(file))!= EOF){ fputc(input,stdout); fputc(input,stderr); } } end of file ^D end program ^C stderr line buffer stdout file buffer(???)","title":"read a file from stdin and put it to both stdout &amp; stderr"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#re-reading","text":"void rewind(FILE *stream); changing location of a file to the beginning fseek: move to some location","title":"re-reading"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#getting-location","text":"long ftell(FILE * stream); off_t ftello(FILE *stream); if is larger than a long in size, then: int fgetpos(FILE *restrict stream, fpos_t *restrict pos); int fsetpos(FILE *stream, const fpos_t *pos); need to check man page for different systems df: space of hard drive file: blocks of pointers point to a chunk of data blocks of actual disk","title":"getting location"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#format-printing","text":"","title":"Format Printing"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#printing-to-a-string","text":"int sprintf(char *str, const char *format, /* args */ ); return number of bytes that would have been written writes at most size-1 bytes (leave space for null byte)","title":"printing to a string"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#line-based-input","text":"char *fgets(char *str, int size, FILE *stream); stores in str stops at -n, EOF do not use gets","title":"line based input"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#scanf","text":"scanf(\"%d\",&x); scanf(\"%s\",str); read line using fgets(), parses data using sscanf() from line character ranges(check textbook)","title":"scanf"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#realloc","text":"void * realloc(void *ptr, size_t size); change previous allocated block ptr be changed to size size(larger or smaller & copy old data as needed) app: connect strings","title":"realloc"},{"location":"computer%20science/C/Formatted-I-O-Line-Input-Scanf-C/#getline","text":"ssize_t getline(char ** linep, size_t *linecapp, FILE * stream); free(linep); dynamically allocated, but must free later not part of c standard","title":"getline"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/","text":"1 Introduction & Relational Model Data Models Hierarchical Model one-to-many relationships tree Network Model many numbers of many-to-many relationships introduced pointers acyclic directed graph records (vertices) and sets (edges) several items with the same kind of records will use linked lists Relational Model many-to-many relationships decomposing many-to-many relationship into two one-to-many relationships using intersection record Relational Model General Terminology tuple: a row in a table (usually considered to be unordered and non-identical) relation: a two-dimensional table of data attribute: a column in a table (usually considered as unordered) domain: the set of permissible values for a given attribute schema: R(A_1, A_2, \\cdots, A_n) consisting of the name of the relation followed by its attributes component: an atomic single value of an attribute (structure NG) instance of a schema: the current contents of a relation Keys in Relational Model primary key : one key that uniquely identify tuples in the relation secondary key: any key which is not primary superkey: any set of attributes which satisfies uniqueness condition key: a minimal superkey, no proper subset of the key is a superkey Relational Algebra ordinary set operations set-level R \\cap S R \\cup S R-S S-R projection \\Pi_{A_1,A_2,\\cdots,A_k}(R) the relation obtained by selecting attributes from the relation and remove others selection \\sigma_C(R) the set of tuples in R which satisfy the condition C join Let R(A_1, A_2, \\cdots, A_m, B_1, B_2, \\cdots, B_n) and S(A_1, A_2, \\cdots, A_m, C_1, C_2, \\cdots, C_k) be two relations that has some attributes in common. Then the natural join of R and S R \\Join S is: \\{(A_1, A_2, \\cdots,A_m, B_1, B_2, \\cdots, B_n, C_1, C_2, \\cdots, C_k)\\text{ | }\\\\(A_1, A_2, \\cdots, A_m, B_1, B_2, \\cdots, B_n)\\text{ is a number of R and }\\\\(A_1, A_2, \\cdots, A_m, C_1, C_2, \\cdots, C_k)\\text{ is a number of S}\\} The theta join of R and S on condition C R \\Join_C S is: the set of elements of the cartesian product which satisfy the join condition C. renaming \\rho_{S(A_1,A_2,\\cdots,A_n)}(R) rename R to S, with attributes rename to A_1, A_2, \\cdots, A_n . bags A bag is similar to a set, but allows multiple occurrences of an element. duplicate elimination If R is a relation then \\delta (R) denotes duplicate elimination. aggregation operators: COUNT, SUM, MAX, MIN, AVG Example: MAX(width)(Artworks) grouping If R is a relation, then an expression using grouping is: \\gamma_{\\text{grouping attributes, aggregation applied to groups} \\rightarrow \\text{name for created attribute}}(R) Example: \\gamma_{\\text{studentSSN, COUNT(CRN)} \\rightarrow NumberOfCoursesTaken}(Enroll) extended projection If R is a relation, then an expression using extended projection is: \\pi_{\\text{grouping attributes, operation applied to groups} \\rightarrow \\text{name for created attribute}}(R) Example: \\pi_{\\text{studentSSN, Score1+Score2} \\rightarrow TotalScore}(Scores) sorting \\tau_{PrimarySortKey, SecondarySortKey}(R) Ordered by primary sort key then secondary sort key and so on. outerjoin Sometimes there is no matching tuple for some tuples and they got disappeared in the joined relation. So outerjoin would keep them leave the unmatched part a null value \\perp . For R and S: in left outerjoin, only dangling tuples from R are added in right outerjoin, only dangling tuples from S are added You could also define a outer theta-join using the same way as before.","title":"1 Introduction & Relational Model"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#1-introduction-relational-model","text":"","title":"1 Introduction &amp; Relational Model"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#data-models","text":"","title":"Data Models"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#hierarchical-model","text":"one-to-many relationships tree","title":"Hierarchical Model"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#network-model","text":"many numbers of many-to-many relationships introduced pointers acyclic directed graph records (vertices) and sets (edges) several items with the same kind of records will use linked lists","title":"Network Model"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#relational-model","text":"many-to-many relationships decomposing many-to-many relationship into two one-to-many relationships using intersection record","title":"Relational Model"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#relational-model_1","text":"","title":"Relational Model"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#general-terminology","text":"tuple: a row in a table (usually considered to be unordered and non-identical) relation: a two-dimensional table of data attribute: a column in a table (usually considered as unordered) domain: the set of permissible values for a given attribute schema: R(A_1, A_2, \\cdots, A_n) consisting of the name of the relation followed by its attributes component: an atomic single value of an attribute (structure NG) instance of a schema: the current contents of a relation","title":"General Terminology"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#keys-in-relational-model","text":"primary key : one key that uniquely identify tuples in the relation secondary key: any key which is not primary superkey: any set of attributes which satisfies uniqueness condition key: a minimal superkey, no proper subset of the key is a superkey","title":"Keys in Relational Model"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#relational-algebra","text":"","title":"Relational Algebra"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#ordinary-set-operations","text":"","title":"ordinary set operations"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#set-level","text":"R \\cap S R \\cup S R-S S-R","title":"set-level"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#projection","text":"\\Pi_{A_1,A_2,\\cdots,A_k}(R) the relation obtained by selecting attributes from the relation and remove others","title":"projection"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#selection","text":"\\sigma_C(R) the set of tuples in R which satisfy the condition C","title":"selection"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#join","text":"Let R(A_1, A_2, \\cdots, A_m, B_1, B_2, \\cdots, B_n) and S(A_1, A_2, \\cdots, A_m, C_1, C_2, \\cdots, C_k) be two relations that has some attributes in common. Then the natural join of R and S R \\Join S is: \\{(A_1, A_2, \\cdots,A_m, B_1, B_2, \\cdots, B_n, C_1, C_2, \\cdots, C_k)\\text{ | }\\\\(A_1, A_2, \\cdots, A_m, B_1, B_2, \\cdots, B_n)\\text{ is a number of R and }\\\\(A_1, A_2, \\cdots, A_m, C_1, C_2, \\cdots, C_k)\\text{ is a number of S}\\} The theta join of R and S on condition C R \\Join_C S is: the set of elements of the cartesian product which satisfy the join condition C.","title":"join"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#renaming","text":"\\rho_{S(A_1,A_2,\\cdots,A_n)}(R) rename R to S, with attributes rename to A_1, A_2, \\cdots, A_n .","title":"renaming"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#bags","text":"A bag is similar to a set, but allows multiple occurrences of an element.","title":"bags"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#duplicate-elimination","text":"If R is a relation then \\delta (R) denotes duplicate elimination.","title":"duplicate elimination"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#aggregation","text":"operators: COUNT, SUM, MAX, MIN, AVG Example: MAX(width)(Artworks)","title":"aggregation"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#grouping","text":"If R is a relation, then an expression using grouping is: \\gamma_{\\text{grouping attributes, aggregation applied to groups} \\rightarrow \\text{name for created attribute}}(R) Example: \\gamma_{\\text{studentSSN, COUNT(CRN)} \\rightarrow NumberOfCoursesTaken}(Enroll)","title":"grouping"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#extended-projection","text":"If R is a relation, then an expression using extended projection is: \\pi_{\\text{grouping attributes, operation applied to groups} \\rightarrow \\text{name for created attribute}}(R) Example: \\pi_{\\text{studentSSN, Score1+Score2} \\rightarrow TotalScore}(Scores)","title":"extended projection"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#sorting","text":"\\tau_{PrimarySortKey, SecondarySortKey}(R) Ordered by primary sort key then secondary sort key and so on.","title":"sorting"},{"location":"computer%20science/database%20systems/1%20Introduction%20%26%20Relational%20Models/#outerjoin","text":"Sometimes there is no matching tuple for some tuples and they got disappeared in the joined relation. So outerjoin would keep them leave the unmatched part a null value \\perp . For R and S: in left outerjoin, only dangling tuples from R are added in right outerjoin, only dangling tuples from S are added You could also define a outer theta-join using the same way as before.","title":"outerjoin"},{"location":"computer%20science/database%20systems/2%20Database%20Design/","text":"2 Database Design Functional Dependencies definition Let A_1, A_2, \\cdots, A_k and B be attributes of a relation R . B is functionally dependent on \\{A_1, A_2, \\cdots, A_k\\} if and only if whenever two tuples t and u agree on A_1, A_2, \\cdots, A_k , they must also agree on B. Any attribute in R is functionally dependent on its superkey. For example, in relation Course( DeptCode , CourseNumber , Title, Description): Both Title and Description is functionally dependent on {DeptCode, CourseNumber}. properties Reflexivity. An attribute is always functionally dependent on itself. Augmentation. That is, if B is functionally dependent on A, B is functionally dependent on any superset of A. Transitivity. If B is functionally dependent on A and C is functionally dependent on B, then C is functionally dependent on A. Splitting rule. If a set of attributes A is functionally dependent on another set of attributes B. Then every element in A is functionally dependent on B. Combining rule. The opposite of Splitting rule. closure Suppose A=A_1, A_2, \\cdots, A_m is aset of attributes in a relation. S is a set of functional dependencies. The closure of A, A+ or \\{A_1, A_2, \\cdots, A_m\\}+ as the smallest superset of A, which includes all attributes which are functionally determined by the ones in A. Normalization Functional dependencies in a relation are removed by decomposing it into several smaller relations. why we need normalization relation anomalies because of different forms of redundancy in relations redundancy, update anomaly, deletion anomaly first normal form (1NF) 1NF has no multivalued attributes, that is, it is a flat file. All relations as we have defined them are in 1NF. second normal form (2NF) 2NF possesses key completeness , that is, every non-prime attribute(an attribute which is not part of a candidate key) depends on the entire primary key(not on a proper subset of it). third normal form (3NF) For each nontrivial(Y is not a subset of X) functional dependency X \\Rightarrow Y , either X is a superkey or Y contains no non-prime attributes. Boyce Codd normal form (BCNF) For each nontrivial functional dependency X \\Rightarrow Y , X is a superkey. Every BCNF is also 2NF and 3NF. normalization procedure let R(A) be a relation and A be its set of attributes Suppose R has a functional dependency X \\Rightarrow Y , where X is not super key. Decompose R into two relationships: R_1(X+) and R_2(X \\cup (A-X+)) . Then apply this recursively to both R_1 and R_2 . chase test (example in lecture 11) general procedure for determining whether or not a given decomposition is lossless If we can reduce a row in the tableau to the original tuple, then the join is lossless. forth normal form (4NF) multivalued dependency : occurs when a relation has more than one independent, multivalued attribute (A determines B and C, but B and C are independent) A 4NF relation means it is in BCNF and no multivalued dependencies. You could normalize a BCNF form R(A) with a multivalued dependency X \\Rightarrow Y by decomposing R into R_1(R-Y) and R_2(X\\cap Y) . E-R Diagram to functional dependencies relationships binary(many to many, one to many, one to one) or n-ary many-to-many attributes of the relationship and primary keys of the two related entity sets,with primary key combines the primary keys of the related entity sets for a recursive many-to-many relationships: rename the primary keys borrowed from the related entity sets, e.x. prereqDept, prereqNumber, seqDept, seqDept for the prerequisite relation. one-to-many combine two primary keys, or add the primary key to another entity set one-to-one when the two entity are mismatched and cannot join together, add primary key to the other entity or merge two into one relationship n-ary create a new relation: include primary key of each participating entity set, and attributes of the relationship become attributes of the relation multivalued attributes multiple tuples of primary key and owning entity or you could also create a new relationship weak entity sets copy all the needed key attributes from related entities (not only the entities within this relationship) subclasses method 1 use one relation for superclass, one for subclasses superclass has usual key and attributes subclass has own non-inherited attributes and the key of superclass problem: you have to search both tables to get full information method 2 use one relation for superclass, one for subclasses if one is the subclass then there is no keys and attributes in superclass problem: you have to find through several relations if you only have a primary key problem: it is troublesome to list all subclass-only attributes method 3 use only one big relation for all the attributes of superclasses and subclasses if there is no certain attribute for one, then just set it to empty or null problem: you have to deal with these null values","title":"2 Database Design"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#2-database-design","text":"","title":"2 Database Design"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#functional-dependencies","text":"","title":"Functional Dependencies"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#definition","text":"Let A_1, A_2, \\cdots, A_k and B be attributes of a relation R . B is functionally dependent on \\{A_1, A_2, \\cdots, A_k\\} if and only if whenever two tuples t and u agree on A_1, A_2, \\cdots, A_k , they must also agree on B. Any attribute in R is functionally dependent on its superkey. For example, in relation Course( DeptCode , CourseNumber , Title, Description): Both Title and Description is functionally dependent on {DeptCode, CourseNumber}.","title":"definition"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#properties","text":"Reflexivity. An attribute is always functionally dependent on itself. Augmentation. That is, if B is functionally dependent on A, B is functionally dependent on any superset of A. Transitivity. If B is functionally dependent on A and C is functionally dependent on B, then C is functionally dependent on A. Splitting rule. If a set of attributes A is functionally dependent on another set of attributes B. Then every element in A is functionally dependent on B. Combining rule. The opposite of Splitting rule.","title":"properties"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#closure","text":"Suppose A=A_1, A_2, \\cdots, A_m is aset of attributes in a relation. S is a set of functional dependencies. The closure of A, A+ or \\{A_1, A_2, \\cdots, A_m\\}+ as the smallest superset of A, which includes all attributes which are functionally determined by the ones in A.","title":"closure"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#normalization","text":"Functional dependencies in a relation are removed by decomposing it into several smaller relations.","title":"Normalization"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#why-we-need-normalization","text":"relation anomalies because of different forms of redundancy in relations redundancy, update anomaly, deletion anomaly","title":"why we need normalization"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#first-normal-form-1nf","text":"1NF has no multivalued attributes, that is, it is a flat file. All relations as we have defined them are in 1NF.","title":"first normal form (1NF)"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#second-normal-form-2nf","text":"2NF possesses key completeness , that is, every non-prime attribute(an attribute which is not part of a candidate key) depends on the entire primary key(not on a proper subset of it).","title":"second normal form (2NF)"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#third-normal-form-3nf","text":"For each nontrivial(Y is not a subset of X) functional dependency X \\Rightarrow Y , either X is a superkey or Y contains no non-prime attributes.","title":"third normal form (3NF)"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#boyce-codd-normal-form-bcnf","text":"For each nontrivial functional dependency X \\Rightarrow Y , X is a superkey. Every BCNF is also 2NF and 3NF.","title":"Boyce Codd normal form (BCNF)"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#normalization-procedure","text":"let R(A) be a relation and A be its set of attributes Suppose R has a functional dependency X \\Rightarrow Y , where X is not super key. Decompose R into two relationships: R_1(X+) and R_2(X \\cup (A-X+)) . Then apply this recursively to both R_1 and R_2 .","title":"normalization procedure"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#chase-test","text":"(example in lecture 11) general procedure for determining whether or not a given decomposition is lossless If we can reduce a row in the tableau to the original tuple, then the join is lossless.","title":"chase test"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#forth-normal-form-4nf","text":"multivalued dependency : occurs when a relation has more than one independent, multivalued attribute (A determines B and C, but B and C are independent) A 4NF relation means it is in BCNF and no multivalued dependencies. You could normalize a BCNF form R(A) with a multivalued dependency X \\Rightarrow Y by decomposing R into R_1(R-Y) and R_2(X\\cap Y) .","title":"forth normal form (4NF)"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#e-r-diagram-to-functional-dependencies","text":"","title":"E-R Diagram to functional dependencies"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#relationships","text":"binary(many to many, one to many, one to one) or n-ary","title":"relationships"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#many-to-many","text":"attributes of the relationship and primary keys of the two related entity sets,with primary key combines the primary keys of the related entity sets for a recursive many-to-many relationships: rename the primary keys borrowed from the related entity sets, e.x. prereqDept, prereqNumber, seqDept, seqDept for the prerequisite relation.","title":"many-to-many"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#one-to-many","text":"combine two primary keys, or add the primary key to another entity set","title":"one-to-many"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#one-to-one","text":"when the two entity are mismatched and cannot join together, add primary key to the other entity or merge two into one relationship","title":"one-to-one"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#n-ary","text":"create a new relation: include primary key of each participating entity set, and attributes of the relationship become attributes of the relation","title":"n-ary"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#multivalued-attributes","text":"multiple tuples of primary key and owning entity or you could also create a new relationship","title":"multivalued attributes"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#weak-entity-sets","text":"copy all the needed key attributes from related entities (not only the entities within this relationship)","title":"weak entity sets"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#subclasses","text":"","title":"subclasses"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#method-1","text":"use one relation for superclass, one for subclasses superclass has usual key and attributes subclass has own non-inherited attributes and the key of superclass problem: you have to search both tables to get full information","title":"method 1"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#method-2","text":"use one relation for superclass, one for subclasses if one is the subclass then there is no keys and attributes in superclass problem: you have to find through several relations if you only have a primary key problem: it is troublesome to list all subclass-only attributes","title":"method 2"},{"location":"computer%20science/database%20systems/2%20Database%20Design/#method-3","text":"use only one big relation for all the attributes of superclasses and subclasses if there is no certain attribute for one, then just set it to empty or null problem: you have to deal with these null values","title":"method 3"},{"location":"computer%20science/database%20systems/3%20Transactions/","text":"3 Transactions Fundamental Properties of Transcactions Atomicity A transcation is the smallest dividable part in the operation. It cannot be performed partially. begin transaction; if(failure) rollback transaction; // aborts commit transaction; // success Consistency Transaction can only read or write an element that: got granted a lock on the element has not yet released the lock All elements got locked must be later unlocked. Isolation Concurrently happened transactions have to run in isolation. They are always serializable. Durability Values written or modified by committed transactions will remain committed, even in the face of system crashes or power outages. Level of Isolation in SQL read uncommitted (totally happens at the same time) read committed (will read anything that commited instead of treate current transaction atomically) repeatable read (could treat single values but cannot treat large data such as a table) serialization (default) Transaction the default mode in SQL Starts with start transaction statement Ends with commit or rollback statement When user exits, transaction got committed. set autocommit on; lets every operation treated as separate transaction and committed when completed set [global | session] transaction isolation level level start transaction read only;","title":"3 Transactions"},{"location":"computer%20science/database%20systems/3%20Transactions/#3-transactions","text":"","title":"3 Transactions"},{"location":"computer%20science/database%20systems/3%20Transactions/#fundamental-properties-of-transcactions","text":"","title":"Fundamental Properties of Transcactions"},{"location":"computer%20science/database%20systems/3%20Transactions/#atomicity","text":"A transcation is the smallest dividable part in the operation. It cannot be performed partially. begin transaction; if(failure) rollback transaction; // aborts commit transaction; // success","title":"Atomicity"},{"location":"computer%20science/database%20systems/3%20Transactions/#consistency","text":"Transaction can only read or write an element that: got granted a lock on the element has not yet released the lock All elements got locked must be later unlocked.","title":"Consistency"},{"location":"computer%20science/database%20systems/3%20Transactions/#isolation","text":"Concurrently happened transactions have to run in isolation. They are always serializable.","title":"Isolation"},{"location":"computer%20science/database%20systems/3%20Transactions/#durability","text":"Values written or modified by committed transactions will remain committed, even in the face of system crashes or power outages.","title":"Durability"},{"location":"computer%20science/database%20systems/3%20Transactions/#level-of-isolation-in-sql","text":"read uncommitted (totally happens at the same time) read committed (will read anything that commited instead of treate current transaction atomically) repeatable read (could treat single values but cannot treat large data such as a table) serialization (default)","title":"Level of Isolation in SQL"},{"location":"computer%20science/database%20systems/3%20Transactions/#transaction","text":"the default mode in SQL Starts with start transaction statement Ends with commit or rollback statement When user exits, transaction got committed. set autocommit on; lets every operation treated as separate transaction and committed when completed set [global | session] transaction isolation level level start transaction read only;","title":"Transaction"},{"location":"computer%20science/database%20systems/4%20Query%20Processing%20and%20Optimization/","text":"4 Query Processing and Optimization storage management","title":"4 Query Processing and Optimization"},{"location":"computer%20science/database%20systems/4%20Query%20Processing%20and%20Optimization/#4-query-processing-and-optimization","text":"","title":"4 Query Processing and Optimization"},{"location":"computer%20science/database%20systems/4%20Query%20Processing%20and%20Optimization/#storage-management","text":"","title":"storage management"},{"location":"computer%20science/design%20patterns/01%20oop/","text":"Object-Oriented Programming Features Encapsulation Abstract Inheritance Polymorphism Procedure Oriented or Object Orented? Procedure Oriented? Early languages such as C. Linear. Which is not suitable for large-scale non-linear develpment. You could still use oop thoughts in procedure oriented languages. Why OOP better? Good for handling non-linear complicated tasks. It is easier for human-being to abstract the really demand or world to classes, instead of linear tasks in computers. So it is easier to implement certain features. Also, high maintainability, readability, extensibility, flexibility, simplicity, reusability, testability, etc. Fake OOP too many getter, setter(encapsulation NG) unsuitable global variables or methods big classes such as Constants or Utils(no abstraction) separate data and method in class(one exception is, anaemic model is widely used in web develpment) Abstraction or Interface? Abstraction(is-a) could only be created by interitance(keyword: extends) including both abstract method and real method all abstract methods have to be implemented by children Interface(has-a/behaves like) could only have abstract methods(no implementation or vars) all methods have to be implemented by children keyword: implements Why we need abstraction? Reusabiilty In general, we could implement the abstraction class function using ordinary class, however, there are some problems about that, for example: Children may forgot to implement some certain method we could initiate a empty ancestor class an empty method will affect the readability of the code Why we need interface? decoupling \u89e3\u8026 extensability Program to an interface, not an implementation Separate implementation and interface, only give out stable interface and leave the implementations that might change(decoupling). (Interface Design first) never give of details in the name of the method encapsulate the implementation of the details define interface for classes Notice: if a system is designed to be stablized and no need to maintain, then we don't really need to waste time ensuring the extensability. Composition VS Inheritance? Problem of Inheritance Sometimes a parent class cannot handle everything. If we want to divided those children into catagories, one for each feature, then there will be so many subclasses which is not good for the maintainability and readability. Why use composition We could use composition, interface or delegation to solve the problem above. First of all, we could try to create interfaces for every features, and let the certain class implement these features. The problems is that all methods in interfaces are abstract methods and we still need to implement all the methods one by one in each class. How to solve this problem? We could use composition and delegation. We could create implementation classes for all those interfaces and composite those implementation classes into each child class, for example, as a private variable. Composition or Inheritance? As the example above, using composition instead of inheritance requires more granular codes. Then it is not good for maintainability and readability. So if the system is stable and the inheritance relationship is shallow, then we could still use inheritance. And some certain design patterns requires the usage of inheritance. MVC VS DDD Model, View, Controller The def is not strict, for example, in back end we have repository(data), service(logic), controller(expose interface). Anemic Domain Model process oriented separate data and logic e.x. use userservice class to control data in userBo class Domain Driven Design Still in three parts: model, view, controller, but in service part, there is one service class and there is one domain class, and we put both data and logic into domain class. Rich Domain Model put data and logic in the same class, i.e. OOP Why use anemic? history, easy, simple(logics are mainly included into SQL queries) But for complex systems is better to use DDD.","title":"Object-Oriented Programming"},{"location":"computer%20science/design%20patterns/01%20oop/#object-oriented-programming","text":"","title":"Object-Oriented Programming"},{"location":"computer%20science/design%20patterns/01%20oop/#features","text":"Encapsulation Abstract Inheritance Polymorphism","title":"Features"},{"location":"computer%20science/design%20patterns/01%20oop/#procedure-oriented-or-object-orented","text":"","title":"Procedure Oriented or Object Orented?"},{"location":"computer%20science/design%20patterns/01%20oop/#procedure-oriented","text":"Early languages such as C. Linear. Which is not suitable for large-scale non-linear develpment. You could still use oop thoughts in procedure oriented languages.","title":"Procedure Oriented?"},{"location":"computer%20science/design%20patterns/01%20oop/#why-oop-better","text":"Good for handling non-linear complicated tasks. It is easier for human-being to abstract the really demand or world to classes, instead of linear tasks in computers. So it is easier to implement certain features. Also, high maintainability, readability, extensibility, flexibility, simplicity, reusability, testability, etc.","title":"Why OOP better?"},{"location":"computer%20science/design%20patterns/01%20oop/#fake-oop","text":"too many getter, setter(encapsulation NG) unsuitable global variables or methods big classes such as Constants or Utils(no abstraction) separate data and method in class(one exception is, anaemic model is widely used in web develpment)","title":"Fake OOP"},{"location":"computer%20science/design%20patterns/01%20oop/#abstraction-or-interface","text":"","title":"Abstraction or Interface?"},{"location":"computer%20science/design%20patterns/01%20oop/#abstractionis-a","text":"could only be created by interitance(keyword: extends) including both abstract method and real method all abstract methods have to be implemented by children","title":"Abstraction(is-a)"},{"location":"computer%20science/design%20patterns/01%20oop/#interfacehas-abehaves-like","text":"could only have abstract methods(no implementation or vars) all methods have to be implemented by children keyword: implements","title":"Interface(has-a/behaves like)"},{"location":"computer%20science/design%20patterns/01%20oop/#why-we-need-abstraction","text":"Reusabiilty In general, we could implement the abstraction class function using ordinary class, however, there are some problems about that, for example: Children may forgot to implement some certain method we could initiate a empty ancestor class an empty method will affect the readability of the code","title":"Why we need abstraction?"},{"location":"computer%20science/design%20patterns/01%20oop/#why-we-need-interface","text":"decoupling \u89e3\u8026 extensability","title":"Why we need interface?"},{"location":"computer%20science/design%20patterns/01%20oop/#program-to-an-interface-not-an-implementation","text":"Separate implementation and interface, only give out stable interface and leave the implementations that might change(decoupling). (Interface Design first) never give of details in the name of the method encapsulate the implementation of the details define interface for classes Notice: if a system is designed to be stablized and no need to maintain, then we don't really need to waste time ensuring the extensability.","title":"Program to an interface, not an implementation"},{"location":"computer%20science/design%20patterns/01%20oop/#composition-vs-inheritance","text":"","title":"Composition VS Inheritance?"},{"location":"computer%20science/design%20patterns/01%20oop/#problem-of-inheritance","text":"Sometimes a parent class cannot handle everything. If we want to divided those children into catagories, one for each feature, then there will be so many subclasses which is not good for the maintainability and readability.","title":"Problem of Inheritance"},{"location":"computer%20science/design%20patterns/01%20oop/#why-use-composition","text":"We could use composition, interface or delegation to solve the problem above. First of all, we could try to create interfaces for every features, and let the certain class implement these features. The problems is that all methods in interfaces are abstract methods and we still need to implement all the methods one by one in each class. How to solve this problem? We could use composition and delegation. We could create implementation classes for all those interfaces and composite those implementation classes into each child class, for example, as a private variable.","title":"Why use composition"},{"location":"computer%20science/design%20patterns/01%20oop/#composition-or-inheritance","text":"As the example above, using composition instead of inheritance requires more granular codes. Then it is not good for maintainability and readability. So if the system is stable and the inheritance relationship is shallow, then we could still use inheritance. And some certain design patterns requires the usage of inheritance.","title":"Composition or Inheritance?"},{"location":"computer%20science/design%20patterns/01%20oop/#mvc-vs-ddd","text":"","title":"MVC VS DDD"},{"location":"computer%20science/design%20patterns/01%20oop/#model-view-controller","text":"The def is not strict, for example, in back end we have repository(data), service(logic), controller(expose interface).","title":"Model, View, Controller"},{"location":"computer%20science/design%20patterns/01%20oop/#anemic-domain-model","text":"process oriented separate data and logic e.x. use userservice class to control data in userBo class","title":"Anemic Domain Model"},{"location":"computer%20science/design%20patterns/01%20oop/#domain-driven-design","text":"Still in three parts: model, view, controller, but in service part, there is one service class and there is one domain class, and we put both data and logic into domain class.","title":"Domain Driven Design"},{"location":"computer%20science/design%20patterns/01%20oop/#rich-domain-model","text":"put data and logic in the same class, i.e. OOP","title":"Rich Domain Model"},{"location":"computer%20science/design%20patterns/01%20oop/#why-use-anemic","text":"history, easy, simple(logics are mainly included into SQL queries) But for complex systems is better to use DDD.","title":"Why use anemic?"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/","text":"1.1 finite automata finite automata = finite state machine computational model: idealized computer e.x. \u81ea\u52a8\u95e8 \u9700\u89811bit\u6765\u5b58\u50a8state - state: \u5f00\u542f/\u5173\u95ed - condition: \u524d\u9762\u6709\u4eba\u540e\u9762\u6ca1\u4eba\u3001\u524d\u9762\u6ca1\u4eba\u540e\u9762\u6ca1\u4eba\u2026\u2026 e.x. Markov chains patterns of data Formal Def of a Finite Automation A finite automation is a 5-tuple( Q, \\Sigma , \\delta , q_0 ,F ),where: Q is a finite set called the states \\Sigma is a finite set called the alphabet \\delta : Q \\times \\Sigma \\rightarrow Q is the transition function q_0 \\in Q is the start state F \\subseteq Q is the set of accept states language of machine M: L(M)=A If A=\\{w|M accepts w\\} , then M recognizes A Formal Def of Computation Let M=( Q, \\Sigma , \\delta , q_0 , F ) be a finite automation and w=w_1 w_2 \\cdots w_n be a string over alphabet \\Sigma . Then M accepts w if a sequence of states r_0 r_1 \\cdots r_n exists in Q with the following three conditions: r_0 = q_0 \\delta (r_i , w_{i+1}) = r_{i+1} , for i = 0, \\cdots , n-1 r_n \\in F A language is called a regular language if some finite automation recognizes it. Designing Finite Automata \u6536\u96c6\u4f5c\u51fa\u51b3\u7b56\uff08\u6bcf\u8bfb\u5165\u4e00\u4e2a\u5b57\u6bcd\u65f6\uff09\u6240\u5fc5\u8981\u7684\u6700\u7cbe\u7b80\u4fe1\u606f\uff0c\u7136\u540e\u51b3\u5b9a\u7528\u51e0\u4e2a\u72b6\u6001\u6765\u50a8\u5b58\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u5bfb\u627e\u4ed6\u4eec\u4e4b\u95f4\u7684\u903b\u8f91\uff0c\u6700\u540e\u786e\u5b9astart state\u548cset of accept states\u3002 \u53e6\u5916\u8fd8\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\u6bcf\u4e00\u4e2ainput The Regular Operations i.e. the properties of finite automata & regular languages Let A and B be languages. Define regular operations as follows: Union: A \\cup B = \\{x | x \\in A \\text{ or } x \\in B\\} Concatenation: A \\circ B = \\{xy | x \\in A \\text{ and } y \\in B \\} Star: A^* = \\{ x_1 x_2 \\cdots x_k | k \\geq 0 \\text{ and each } x_i \\in A\\} The class of regular languages is closed under these operation. (It will be easier for us to prove after learning nondeterminism.)","title":"1.1 finite automata"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#11-finite-automata","text":"","title":"1.1 finite automata"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#finite-automata-finite-state-machine","text":"computational model: idealized computer","title":"finite automata = finite state machine"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#ex","text":"\u9700\u89811bit\u6765\u5b58\u50a8state - state: \u5f00\u542f/\u5173\u95ed - condition: \u524d\u9762\u6709\u4eba\u540e\u9762\u6ca1\u4eba\u3001\u524d\u9762\u6ca1\u4eba\u540e\u9762\u6ca1\u4eba\u2026\u2026","title":"e.x. \u81ea\u52a8\u95e8"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#ex-markov-chains","text":"patterns of data","title":"e.x. Markov chains"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#formal-def-of-a-finite-automation","text":"A finite automation is a 5-tuple( Q, \\Sigma , \\delta , q_0 ,F ),where: Q is a finite set called the states \\Sigma is a finite set called the alphabet \\delta : Q \\times \\Sigma \\rightarrow Q is the transition function q_0 \\in Q is the start state F \\subseteq Q is the set of accept states language of machine M: L(M)=A If A=\\{w|M accepts w\\} , then M recognizes A","title":"Formal Def of a Finite Automation"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#formal-def-of-computation","text":"Let M=( Q, \\Sigma , \\delta , q_0 , F ) be a finite automation and w=w_1 w_2 \\cdots w_n be a string over alphabet \\Sigma . Then M accepts w if a sequence of states r_0 r_1 \\cdots r_n exists in Q with the following three conditions: r_0 = q_0 \\delta (r_i , w_{i+1}) = r_{i+1} , for i = 0, \\cdots , n-1 r_n \\in F A language is called a regular language if some finite automation recognizes it.","title":"Formal Def of Computation"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#designing-finite-automata","text":"\u6536\u96c6\u4f5c\u51fa\u51b3\u7b56\uff08\u6bcf\u8bfb\u5165\u4e00\u4e2a\u5b57\u6bcd\u65f6\uff09\u6240\u5fc5\u8981\u7684\u6700\u7cbe\u7b80\u4fe1\u606f\uff0c\u7136\u540e\u51b3\u5b9a\u7528\u51e0\u4e2a\u72b6\u6001\u6765\u50a8\u5b58\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u5bfb\u627e\u4ed6\u4eec\u4e4b\u95f4\u7684\u903b\u8f91\uff0c\u6700\u540e\u786e\u5b9astart state\u548cset of accept states\u3002 \u53e6\u5916\u8fd8\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\u6bcf\u4e00\u4e2ainput","title":"Designing Finite Automata"},{"location":"computer%20science/theory%20of%20computation/1-1%20finite%20automata/#the-regular-operations","text":"i.e. the properties of finite automata & regular languages Let A and B be languages. Define regular operations as follows: Union: A \\cup B = \\{x | x \\in A \\text{ or } x \\in B\\} Concatenation: A \\circ B = \\{xy | x \\in A \\text{ and } y \\in B \\} Star: A^* = \\{ x_1 x_2 \\cdots x_k | k \\geq 0 \\text{ and each } x_i \\in A\\} The class of regular languages is closed under these operation. (It will be easier for us to prove after learning nondeterminism.)","title":"The Regular Operations"},{"location":"computer%20science/theory%20of%20computation/1-2%20nondeterminism/","text":"1.2 nondeterminism Determinism(DFA) is a subset of nondeterminism(NFA). For each letter in DFA, it could only be on only one arrow. NFA may have \\varepsilon on the arrow\uff0cmeans one or many arrows may exit from this state(zero). If a string in a branch is accepted, then NFA accepts the input string. Formal Def of NFA A nondeterministic finite automation is a 5-tuple( Q, \\Sigma, \\delta, q_0, F ), where: Q is a Finite set of states \\Sigma is a finite alphabet \\delta : Q \\times \\Sigma_{\\varepsilon} \\rightarrow P(Q) is the transition function q_0 \\in Q is the start state F \\subseteq Q is the set of accept states Formal Def of computation for an NFA: Let N=( Q, \\Sigma, \\delta, q_0, F ) be an NFA and w a string over the alphabet \\Sigma . Then we say that N asscepts w if we can write w as w=y_1 y_2 \\cdots y_m , where each y_i is a member of \\Sigma_{\\varepsilon} and a sequence of states r_0, r_1, \\cdots, r_m exists in Q with the following three conditions: r_0 = q_0 r_{i+1} \\in \\delta (r_i, y_{i+1}) \\text{ , for } i=0, \\cdots, m-1 r_m \\in F Equivalence of NFAs & DFAs Two machines are equivalent if they recognize the same language. Every nondeterministic finite automation has an equivalent deterministic finite automation. Convert NFA to DFA From start state. For each state and each alphabet a , create a new state(the combination of all possible state using this character), and make a transition from this state to the new state. For the combination state, if any of the state inside of it has the certain transition, then it counts for the transition. \\varepsilon-NFA Convert \\varepsilon-NFA to DFA First find the \\varepsilon closure of start state. For each state, find the next state using the same method as NFA to DFA. But this state should be the combination of all states' \\varepsilon closure.","title":"1.2 nondeterminism"},{"location":"computer%20science/theory%20of%20computation/1-2%20nondeterminism/#12-nondeterminism","text":"Determinism(DFA) is a subset of nondeterminism(NFA). For each letter in DFA, it could only be on only one arrow. NFA may have \\varepsilon on the arrow\uff0cmeans one or many arrows may exit from this state(zero). If a string in a branch is accepted, then NFA accepts the input string.","title":"1.2 nondeterminism"},{"location":"computer%20science/theory%20of%20computation/1-2%20nondeterminism/#formal-def-of-nfa","text":"A nondeterministic finite automation is a 5-tuple( Q, \\Sigma, \\delta, q_0, F ), where: Q is a Finite set of states \\Sigma is a finite alphabet \\delta : Q \\times \\Sigma_{\\varepsilon} \\rightarrow P(Q) is the transition function q_0 \\in Q is the start state F \\subseteq Q is the set of accept states Formal Def of computation for an NFA: Let N=( Q, \\Sigma, \\delta, q_0, F ) be an NFA and w a string over the alphabet \\Sigma . Then we say that N asscepts w if we can write w as w=y_1 y_2 \\cdots y_m , where each y_i is a member of \\Sigma_{\\varepsilon} and a sequence of states r_0, r_1, \\cdots, r_m exists in Q with the following three conditions: r_0 = q_0 r_{i+1} \\in \\delta (r_i, y_{i+1}) \\text{ , for } i=0, \\cdots, m-1 r_m \\in F","title":"Formal Def of NFA"},{"location":"computer%20science/theory%20of%20computation/1-2%20nondeterminism/#equivalence-of-nfas-dfas","text":"Two machines are equivalent if they recognize the same language. Every nondeterministic finite automation has an equivalent deterministic finite automation.","title":"Equivalence of NFAs &amp; DFAs"},{"location":"computer%20science/theory%20of%20computation/1-2%20nondeterminism/#convert-nfa-to-dfa","text":"From start state. For each state and each alphabet a , create a new state(the combination of all possible state using this character), and make a transition from this state to the new state. For the combination state, if any of the state inside of it has the certain transition, then it counts for the transition.","title":"Convert NFA to DFA"},{"location":"computer%20science/theory%20of%20computation/1-2%20nondeterminism/#varepsilon-nfa","text":"","title":"\\varepsilon-NFA"},{"location":"computer%20science/theory%20of%20computation/1-2%20nondeterminism/#convert-varepsilon-nfa-to-dfa","text":"First find the \\varepsilon closure of start state. For each state, find the next state using the same method as NFA to DFA. But this state should be the combination of all states' \\varepsilon closure.","title":"Convert \\varepsilon-NFA to DFA"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/","text":"1.3 regular expressions Properties of Regular Language Unions, intersections, differences and complements of regular languages are regular. Formal Def of a Regular Expression Say that R is a regular expression if R is: - a for some a in the alphabet \\Sigma - \\varepsilon - \\emptyset - ( R_1 \\cup R_2 ) - ( R_1 \\circ R_2 ) - ( R_1^* ) ( R_1 R_2 ) are regualr expressions(inductive def) some conclusions L(R): the language of R concatenating the empty set to any set yields the empty set, so 1 * \\emptyset = \\emptyset \\emptyset * = \\{\\varepsilon\\} R \\cup \\emptyset = R R \\circ \\varepsilon = R Equivalence with Finite Automata hint: regular language is one that is recognized by some finite automation a language is regular iff some regular expression describes it prove see textbook p67 p70 GNFA : generalized nondeterministic finite automation, its transition arrows may have any regular expression as labels DFA to regular expression R^k_{ij}=R^{k-1}_{ik}(R^{k-1}_{kk})^*R^{k-1}_{kj} Write a table out. Colum: k=0,1,...n-1 Row: all combination of two states Base Case: when k=0, if there is a transition(including this state and itself, in this case is \\varepsilon ), then is the combination(or+transitions if more than one); if there is not, then it is empty. Then fill the table using formula. The result should be R^n_{start+accept} Pumping Lemma Suppose it is regular. Let p be its pumping constant. Consider the string w=xxx, which is a string in this language with length greater than p. There must be a pumping decomposition of w: w=xyz, where |xy| \\leq p and |y|>0 . Prove this compositions variants is not in the language. Then this violates the pumping lemma. So it is not regular.","title":"1.3 regular expressions"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/#13-regular-expressions","text":"","title":"1.3 regular expressions"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/#properties-of-regular-language","text":"Unions, intersections, differences and complements of regular languages are regular.","title":"Properties of Regular Language"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/#formal-def-of-a-regular-expression","text":"Say that R is a regular expression if R is: - a for some a in the alphabet \\Sigma - \\varepsilon - \\emptyset - ( R_1 \\cup R_2 ) - ( R_1 \\circ R_2 ) - ( R_1^* ) ( R_1 R_2 ) are regualr expressions(inductive def)","title":"Formal Def of a Regular Expression"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/#some-conclusions","text":"L(R): the language of R concatenating the empty set to any set yields the empty set, so 1 * \\emptyset = \\emptyset \\emptyset * = \\{\\varepsilon\\} R \\cup \\emptyset = R R \\circ \\varepsilon = R","title":"some conclusions"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/#equivalence-with-finite-automata","text":"hint: regular language is one that is recognized by some finite automation a language is regular iff some regular expression describes it prove see textbook p67 p70 GNFA : generalized nondeterministic finite automation, its transition arrows may have any regular expression as labels","title":"Equivalence with Finite Automata"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/#dfa-to-regular-expression","text":"R^k_{ij}=R^{k-1}_{ik}(R^{k-1}_{kk})^*R^{k-1}_{kj} Write a table out. Colum: k=0,1,...n-1 Row: all combination of two states Base Case: when k=0, if there is a transition(including this state and itself, in this case is \\varepsilon ), then is the combination(or+transitions if more than one); if there is not, then it is empty. Then fill the table using formula. The result should be R^n_{start+accept}","title":"DFA to regular expression"},{"location":"computer%20science/theory%20of%20computation/1-3%20regular%20expressions/#pumping-lemma","text":"Suppose it is regular. Let p be its pumping constant. Consider the string w=xxx, which is a string in this language with length greater than p. There must be a pumping decomposition of w: w=xyz, where |xy| \\leq p and |y|>0 . Prove this compositions variants is not in the language. Then this violates the pumping lemma. So it is not regular.","title":"Pumping Lemma"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/","text":"2.1 Context-Free & PDA The Chomsky Hierarchy Grammar Rules Machine Regular A -> a or A -> aB DFA Context-free A -> alpha PDA Context-sensitive alpha -> beta Turing Machine with bounded memory Arbitrary / Turing Machine alpha & beta means combinations of both terminal and non-terminal symbols Ambiguity A grammar is called ambiguous if it produces two different parse trees for the same string. We can use such hierarchies to disambiguate grammars. The problem of determining whether a given grammar is ambiguous is undecidable. PDA \\varepsilon - NFA +stack Transition Notation Notation Means a,b|cb on input a with b on top of the stack, push c (on top of b) a,b|c on input a with b on top of the stack, pop the stack and push c a,b| \\varepsilon on input a with b on top of the stack, pop the stack ID Analysis: (State, remained input, stuffs on the stack) from top of the stack to the bottom: from left to right PDA <=> Context-Free Grammar Context-Free Grammar => PDA construct a PDA that has only one state Q accepted by empty stack begin: \\varepsilon, \\varepsilon | S for A = A_1 \\cdots A_k : \\varepsilon, A | A_1 \\cdots A_k for terminal symbol a: a,a | \\varepsilon this PDA just use epsilon to push the rule to the stack, cancel out corresponding chars and do it over and over again until both the stack and the string are empty PDA => Context-Free Grammar Chomsky is a f**king genius. construct a huge grammar between any possible states Handout","title":"2.1 Context-Free & PDA"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#21-context-free-pda","text":"","title":"2.1 Context-Free &amp; PDA"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#the-chomsky-hierarchy","text":"Grammar Rules Machine Regular A -> a or A -> aB DFA Context-free A -> alpha PDA Context-sensitive alpha -> beta Turing Machine with bounded memory Arbitrary / Turing Machine alpha & beta means combinations of both terminal and non-terminal symbols","title":"The Chomsky Hierarchy"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#ambiguity","text":"A grammar is called ambiguous if it produces two different parse trees for the same string. We can use such hierarchies to disambiguate grammars. The problem of determining whether a given grammar is ambiguous is undecidable.","title":"Ambiguity"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#pda","text":"\\varepsilon - NFA +stack","title":"PDA"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#transition-notation","text":"Notation Means a,b|cb on input a with b on top of the stack, push c (on top of b) a,b|c on input a with b on top of the stack, pop the stack and push c a,b| \\varepsilon on input a with b on top of the stack, pop the stack ID Analysis: (State, remained input, stuffs on the stack) from top of the stack to the bottom: from left to right","title":"Transition Notation"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#pda-context-free-grammar","text":"","title":"PDA &lt;=&gt; Context-Free Grammar"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#context-free-grammar-pda","text":"construct a PDA that has only one state Q accepted by empty stack begin: \\varepsilon, \\varepsilon | S for A = A_1 \\cdots A_k : \\varepsilon, A | A_1 \\cdots A_k for terminal symbol a: a,a | \\varepsilon this PDA just use epsilon to push the rule to the stack, cancel out corresponding chars and do it over and over again until both the stack and the string are empty","title":"Context-Free Grammar =&gt; PDA"},{"location":"computer%20science/theory%20of%20computation/2-1%20grammar/#pda-context-free-grammar_1","text":"Chomsky is a f**king genius. construct a huge grammar between any possible states Handout","title":"PDA =&gt; Context-Free Grammar"},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/","text":"2.2 Normal Forms for CFG A grammar is said to be in Chomsky Normal Form (CNF) if all of its grammar rules follow one of the two patterns: X => YZ (exactly 2 non-terminals on the right side) X => a (exactly 1 terminal on the right side) So the parse tree is a binary tree! CFG to CNF Step 1: Deal with nullable symbols. First we have to find nullable symbols. Simple. Using a stack, go from all of \\varepsilon , for each symbols X goes by, if there is a rule such that all of the symbols on the right hand side are nullable, then this symbol X is nullable. To Deal with nullable symbols in the grammar: remove all nullable symbols if there is a rule that has only 1 nullable symbol on the right, then change this rule into original rule | rule without this symbol (X => aYb, if Y is nullable then change it to X=> aYb | ab) similarly, if there is a rule that has m nullable symbols, replace this rule into conbination of 2^m possible rules(exist or not exist) Step 2: Eliminate unit rules. (A, C) is a unit pair if A=>B, B=>C. This kind of forms is not allowed in CNF. To find any unit pairs, first we mark all nonterminal Symbol(A,A). If (A, B) is marked and A=>C, then we mark(C,B). Continue this procedure until no more pair could be marked. To deal with unit rules in the grammar G: create a new empty grammar G' for each unit pair (A, B), if B=>a in G, then add A=>a to G' Step 3: Eliminate all symbols that aren't generating. Using a stack, go from terminal symbols only to S, mark any symbol meets, then delete unmarked symbols. Step 4: Eliminate all symbols that aren't reachable. Similarly, using a stack, go from S to terminal symbols, mark any symbol meets, then delete unmarked symbols. The sequence of 3 and 4 matters, if we remove unreachable then ungenerating, we will have some rules that has some symbol X on the left hand side that start state cannot go to(two states that has no connections). Because we could go to this X before we move all ungenerating rules, so it is left. Step 5: Substitute terminal symbols. For any grammar A = X_1\\cdots X_i\\cdots X_n where n>1 , if X_i is a terminal symbol, then we substitue X_i using A_i and add a new rule A_i \\Rightarrow X_i . Step 6: Split long rules. For any grammar A = X_1\\cdots X_n where n>2, make a new set of rules: A \\Rightarrow X_1B_1 B_1 \\Rightarrow X_2B_2 \\cdots B_{n-3} \\Rightarrow X_{n-2}B_{n-2} B_{n-2}\\Rightarrow X_{n-1}X_n Where B_i are new nonterminal symbols. So every context-free language has a CNF grammar that derives all of the language except { \\varepsilon }.","title":"2.2 Normal Forms for CFG"},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#22-normal-forms-for-cfg","text":"A grammar is said to be in Chomsky Normal Form (CNF) if all of its grammar rules follow one of the two patterns: X => YZ (exactly 2 non-terminals on the right side) X => a (exactly 1 terminal on the right side) So the parse tree is a binary tree!","title":"2.2 Normal Forms for CFG"},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#cfg-to-cnf","text":"","title":"CFG to CNF"},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#step-1-deal-with-nullable-symbols","text":"First we have to find nullable symbols. Simple. Using a stack, go from all of \\varepsilon , for each symbols X goes by, if there is a rule such that all of the symbols on the right hand side are nullable, then this symbol X is nullable. To Deal with nullable symbols in the grammar: remove all nullable symbols if there is a rule that has only 1 nullable symbol on the right, then change this rule into original rule | rule without this symbol (X => aYb, if Y is nullable then change it to X=> aYb | ab) similarly, if there is a rule that has m nullable symbols, replace this rule into conbination of 2^m possible rules(exist or not exist)","title":"Step 1: Deal with nullable symbols."},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#step-2-eliminate-unit-rules","text":"(A, C) is a unit pair if A=>B, B=>C. This kind of forms is not allowed in CNF. To find any unit pairs, first we mark all nonterminal Symbol(A,A). If (A, B) is marked and A=>C, then we mark(C,B). Continue this procedure until no more pair could be marked. To deal with unit rules in the grammar G: create a new empty grammar G' for each unit pair (A, B), if B=>a in G, then add A=>a to G'","title":"Step 2: Eliminate unit rules."},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#step-3-eliminate-all-symbols-that-arent-generating","text":"Using a stack, go from terminal symbols only to S, mark any symbol meets, then delete unmarked symbols.","title":"Step 3: Eliminate all symbols that aren't generating."},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#step-4-eliminate-all-symbols-that-arent-reachable","text":"Similarly, using a stack, go from S to terminal symbols, mark any symbol meets, then delete unmarked symbols. The sequence of 3 and 4 matters, if we remove unreachable then ungenerating, we will have some rules that has some symbol X on the left hand side that start state cannot go to(two states that has no connections). Because we could go to this X before we move all ungenerating rules, so it is left.","title":"Step 4: Eliminate all symbols that aren't reachable."},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#step-5-substitute-terminal-symbols","text":"For any grammar A = X_1\\cdots X_i\\cdots X_n where n>1 , if X_i is a terminal symbol, then we substitue X_i using A_i and add a new rule A_i \\Rightarrow X_i .","title":"Step 5: Substitute terminal symbols."},{"location":"computer%20science/theory%20of%20computation/2-2%20CFG%20Normal%20Forms/#step-6-split-long-rules","text":"For any grammar A = X_1\\cdots X_n where n>2, make a new set of rules: A \\Rightarrow X_1B_1 B_1 \\Rightarrow X_2B_2 \\cdots B_{n-3} \\Rightarrow X_{n-2}B_{n-2} B_{n-2}\\Rightarrow X_{n-1}X_n Where B_i are new nonterminal symbols. So every context-free language has a CNF grammar that derives all of the language except { \\varepsilon }.","title":"Step 6: Split long rules."},{"location":"computer%20science/theory%20of%20computation/2-3%20Pumping%20Lemma/","text":"2.3 Pumping Lemma for CFL Definition of Pumping Lemma Let L be a context-free language. Then there is a constant p so that if z \\in L and |z| \\geq p then z can be decomposed into 5 parts: z = uvwxy . so that: |vwx| \\leq p vx \\not = \\varepsilon \\forall i, uv^i wx^i y \\in L An non-CFL to prove that cannot be pumped L = \\{0^n 1^n 2^n | n \\geq 0\\} Suppose it is context free. Let p be its pumping constant. Let z = 0^p 1^p 2^p be a string longer than p and in the language. Suppose we have a decomposition uvwxy , where |vwx| \\leq p , so uwx cannot include all three letters because it is too short. then we pumped the string to uv^2 wx^2 y , which cannot be in the language. Because the letter that cannot be covered in uwx cannot get repeated then there is less numbers of it in the new string. So uv^2 wx^2 y is not in the language, which contradicted to the pumping lemma. An non-CFL that can be pumped L = \\{a^i b^j c^k d^l| \\text{if i=1 then j=k=l,} i, j, k, l \\geq 0\\} L is not CFL Suppose L is context free. We know that ab*c*d* is a regular language R. Then the intersection L \\cap R should also be context-free. However, L \\cap R = \\{ab^j c^j d^j | j \\geq 0\\} , which is not context-free. Contradiction. L can be pumped L = L_1 \\cup L_2 \\cup L_3 L_1 = \\{b^j c^k d^l | i, j, k \\geq 0\\} L_2 = \\{ab^i c^i d^i | i \\geq 0\\} L_3 = \\{a^i b^j c^k d^l | i, j, k, l \\geq 0\\} First of all, L_1 and L_3 are regular languages, so all strings in them can be pumped. Let p be the pumping constant of L_2 , z = a b^p c^p d^p , no matter what the value of vwx is, the pumped string uv^2 w x^w y can belong to L_3 , which is still in L. So L is pumpable.","title":"2.3 Pumping Lemma for CFL"},{"location":"computer%20science/theory%20of%20computation/2-3%20Pumping%20Lemma/#23-pumping-lemma-for-cfl","text":"","title":"2.3 Pumping Lemma for CFL"},{"location":"computer%20science/theory%20of%20computation/2-3%20Pumping%20Lemma/#definition-of-pumping-lemma","text":"Let L be a context-free language. Then there is a constant p so that if z \\in L and |z| \\geq p then z can be decomposed into 5 parts: z = uvwxy . so that: |vwx| \\leq p vx \\not = \\varepsilon \\forall i, uv^i wx^i y \\in L","title":"Definition of Pumping Lemma"},{"location":"computer%20science/theory%20of%20computation/2-3%20Pumping%20Lemma/#an-non-cfl-to-prove-that-cannot-be-pumped","text":"L = \\{0^n 1^n 2^n | n \\geq 0\\} Suppose it is context free. Let p be its pumping constant. Let z = 0^p 1^p 2^p be a string longer than p and in the language. Suppose we have a decomposition uvwxy , where |vwx| \\leq p , so uwx cannot include all three letters because it is too short. then we pumped the string to uv^2 wx^2 y , which cannot be in the language. Because the letter that cannot be covered in uwx cannot get repeated then there is less numbers of it in the new string. So uv^2 wx^2 y is not in the language, which contradicted to the pumping lemma.","title":"An non-CFL to prove that cannot be pumped"},{"location":"computer%20science/theory%20of%20computation/2-3%20Pumping%20Lemma/#an-non-cfl-that-can-be-pumped","text":"L = \\{a^i b^j c^k d^l| \\text{if i=1 then j=k=l,} i, j, k, l \\geq 0\\}","title":"An non-CFL that can be pumped"},{"location":"computer%20science/theory%20of%20computation/2-3%20Pumping%20Lemma/#l-is-not-cfl","text":"Suppose L is context free. We know that ab*c*d* is a regular language R. Then the intersection L \\cap R should also be context-free. However, L \\cap R = \\{ab^j c^j d^j | j \\geq 0\\} , which is not context-free. Contradiction.","title":"L is not CFL"},{"location":"computer%20science/theory%20of%20computation/2-3%20Pumping%20Lemma/#l-can-be-pumped","text":"L = L_1 \\cup L_2 \\cup L_3 L_1 = \\{b^j c^k d^l | i, j, k \\geq 0\\} L_2 = \\{ab^i c^i d^i | i \\geq 0\\} L_3 = \\{a^i b^j c^k d^l | i, j, k, l \\geq 0\\} First of all, L_1 and L_3 are regular languages, so all strings in them can be pumped. Let p be the pumping constant of L_2 , z = a b^p c^p d^p , no matter what the value of vwx is, the pumped string uv^2 w x^w y can belong to L_3 , which is still in L. So L is pumpable.","title":"L can be pumped"},{"location":"computer%20science/theory%20of%20computation/2-4%20CFL%20properties/","text":"2.4 CFL Properties If L_1 and L_2 are context-free languages, then so are: L_1 \\cup L_2 L_1 L_2 (L_1)^* You could genertate new Grammars to prove them easily. But the intersection of two CFL are not necessary Context-free. Because a stack cannot record the actions of pop and push from two CF languages at the same time. Example: L_1 = \\{0^n 1^n 2^j | n \\geq 0, j \\geq 0\\} L_2 = \\{0^j 1^n 2^n | j \\geq 0, n \\geq 0\\} L_1 \\cap L_2 = \\{0^n 1^n 2^n | n \\geq 0\\} , which is not CF If L is CF, R is regular. Then L \\cap R is CF, L \\backslash R is CF. Why? L \\backslash R = L \\cap R^c If L is Context-free, then L^{rev} is also context free. You could just convert L into CNF, then switch the sequence.","title":"2.4 CFL Properties"},{"location":"computer%20science/theory%20of%20computation/2-4%20CFL%20properties/#24-cfl-properties","text":"If L_1 and L_2 are context-free languages, then so are: L_1 \\cup L_2 L_1 L_2 (L_1)^* You could genertate new Grammars to prove them easily. But the intersection of two CFL are not necessary Context-free. Because a stack cannot record the actions of pop and push from two CF languages at the same time. Example: L_1 = \\{0^n 1^n 2^j | n \\geq 0, j \\geq 0\\} L_2 = \\{0^j 1^n 2^n | j \\geq 0, n \\geq 0\\} L_1 \\cap L_2 = \\{0^n 1^n 2^n | n \\geq 0\\} , which is not CF If L is CF, R is regular. Then L \\cap R is CF, L \\backslash R is CF. Why? L \\backslash R = L \\cap R^c If L is Context-free, then L^{rev} is also context free. You could just convert L into CNF, then switch the sequence.","title":"2.4 CFL Properties"},{"location":"computer%20science/theory%20of%20computation/2-5%20Decision%20Algorithms/","text":"2.5 Decision Algorithms Given CFL L and string w, check if w in L convert L to CNF. We know binary tree of height n has at least n+1 leaves. Find all parse tree with height |w|, then we will find all strings in L such that with length less or equal to |w|. Go through all these strings and check if w belongs to them. Decide if a given CFL is empty or infinite Mark all nullable symbols, if S is marked then CFL is empty. Convert L to CNF. If CFL is finite, there should not be any repeated symbols along a path of any parse tree of any string. So just check find all parse tree with height from l to 2l where l is the number of non-terminal symbols in grammar. If we could find at least one, then this CFL is infinite. Problems that are not decidable two CFL is the same intersection of 2 CFL is empty a CFL \\Sigma ^* a given grammar unbiguous a given language inheritantly unbiguous(all possible parse tree unbigous)","title":"2.5 Decision Algorithms"},{"location":"computer%20science/theory%20of%20computation/2-5%20Decision%20Algorithms/#25-decision-algorithms","text":"","title":"2.5 Decision Algorithms"},{"location":"computer%20science/theory%20of%20computation/2-5%20Decision%20Algorithms/#given-cfl-l-and-string-w-check-if-w-in-l","text":"convert L to CNF. We know binary tree of height n has at least n+1 leaves. Find all parse tree with height |w|, then we will find all strings in L such that with length less or equal to |w|. Go through all these strings and check if w belongs to them.","title":"Given CFL L and string w, check if w in L"},{"location":"computer%20science/theory%20of%20computation/2-5%20Decision%20Algorithms/#decide-if-a-given-cfl-is-empty-or-infinite","text":"Mark all nullable symbols, if S is marked then CFL is empty. Convert L to CNF. If CFL is finite, there should not be any repeated symbols along a path of any parse tree of any string. So just check find all parse tree with height from l to 2l where l is the number of non-terminal symbols in grammar. If we could find at least one, then this CFL is infinite.","title":"Decide if a given CFL is empty or infinite"},{"location":"computer%20science/theory%20of%20computation/2-5%20Decision%20Algorithms/#problems-that-are-not-decidable","text":"two CFL is the same intersection of 2 CFL is empty a CFL \\Sigma ^* a given grammar unbiguous a given language inheritantly unbiguous(all possible parse tree unbigous)","title":"Problems that are not decidable"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/","text":"3.1 Begin Turing Machines Definition Verbal Def A Turing Machine has a finite state controller and a tape that is infinite in both directions. The tape is initially blank except for the input. The controller starts at the beginning of the input and reads one tape symbol at a time. A move consists of: read the current tape symbol change the state of the controller write a new symbol over the one we read move left or right one symbol on the tape A Turing Machine accepts input if it ever moves into a final state. (Don't need to go over all input characters.) Formal Def a Turing Machine is (Q,\\Sigma,\\Gamma,\\delta,s,B,F)\u200b , where: Q is the set of states \\Sigma is the alphabet of input symbols \\Gamma is the tape alphabet \\Sigma<\\Gamma \\delta is the transition function \\sigma(q,a)=(r, b,R) :if you are in state q and a is the current take symbol, then switch to state r and change the symbol to b and move right. s is the start state B is the blank symbol in the tape (which is blank on the tape) F is the set of final states Example L = \\{0^n 1^n | n>0\\} q_0 : if see 0, overwrite it with X and move R, go into q_1 . If see Y, go into q_3 . q_1 : if wee Y or 0, moving R until we find 1 (overwrite with Y and move L, go into q_2 . If we see anything other than that, we fail. q_2 : Move L over 0s and Ys. When we get to X move R to q_0 q_3 : move R over Ys, if we get to a B then accept. Features Configuration (write all current symbols on the stack and put the state symbol before the position of current head) We say that a L accepted by a TM is recursively enumerable (know result only when halts), halts in a input is recursive (yes/no decider). Variances We can think of a TM with k synchonized tracks by using ordered tuples (symbol of first track, symbol of second track, etc.). Usually the first track contains the input and the others initially blank. We could also have multiple independent tapes. To achieve that, we have to use one taple and one head to simulate all those independent tapes. Also, any deterministic TM could simulate non-deterministic TMs. We can use TM to simulate multi-stack PDA, and we can use 2-stack PDA to simulate TM.","title":"3.1 Begin Turing Machines"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/#31-begin-turing-machines","text":"","title":"3.1 Begin Turing Machines"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/#definition","text":"","title":"Definition"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/#verbal-def","text":"A Turing Machine has a finite state controller and a tape that is infinite in both directions. The tape is initially blank except for the input. The controller starts at the beginning of the input and reads one tape symbol at a time. A move consists of: read the current tape symbol change the state of the controller write a new symbol over the one we read move left or right one symbol on the tape A Turing Machine accepts input if it ever moves into a final state. (Don't need to go over all input characters.)","title":"Verbal Def"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/#formal-def","text":"a Turing Machine is (Q,\\Sigma,\\Gamma,\\delta,s,B,F)\u200b , where: Q is the set of states \\Sigma is the alphabet of input symbols \\Gamma is the tape alphabet \\Sigma<\\Gamma \\delta is the transition function \\sigma(q,a)=(r, b,R) :if you are in state q and a is the current take symbol, then switch to state r and change the symbol to b and move right. s is the start state B is the blank symbol in the tape (which is blank on the tape) F is the set of final states","title":"Formal Def"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/#example","text":"L = \\{0^n 1^n | n>0\\} q_0 : if see 0, overwrite it with X and move R, go into q_1 . If see Y, go into q_3 . q_1 : if wee Y or 0, moving R until we find 1 (overwrite with Y and move L, go into q_2 . If we see anything other than that, we fail. q_2 : Move L over 0s and Ys. When we get to X move R to q_0 q_3 : move R over Ys, if we get to a B then accept.","title":"Example"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/#features","text":"Configuration (write all current symbols on the stack and put the state symbol before the position of current head) We say that a L accepted by a TM is recursively enumerable (know result only when halts), halts in a input is recursive (yes/no decider).","title":"Features"},{"location":"computer%20science/theory%20of%20computation/3-1%20Begin%20Turing%20Machines/#variances","text":"We can think of a TM with k synchonized tracks by using ordered tuples (symbol of first track, symbol of second track, etc.). Usually the first track contains the input and the others initially blank. We could also have multiple independent tapes. To achieve that, we have to use one taple and one head to simulate all those independent tapes. Also, any deterministic TM could simulate non-deterministic TMs. We can use TM to simulate multi-stack PDA, and we can use 2-stack PDA to simulate TM.","title":"Variances"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/","text":"4.1 Undecidability Divide TM into two catagories: TMs that halts whether or not it accepts its input TMs that may run forever on inputs they don't accept So we have to show some problems to be undecidable. i.e. Does this TM accept this input? Recursive & Recursively Enumerable A language L is recursive if L=L(M) for some Turing machine M such that: If w is in L, then M accepts and halts. If w is not in L, then M eventually halts, although it never enters an accepting state. If the language is recursive then it is accepted by a TM that always halts.( Decider ) A language L is recursively enumerable if L=L(M) for some TM M , but necessary halts for all input. ( Recognizer ) Not RE > RE > R If a language is recursive, then its complement is also recursive. If a language and its complement are both recursively enumerable, then the langauge is recursive. A language that's not recursively enumerable present TM as a binary string Represent state q_i with 0^i Number the tape symbols X_1 \\cdots X_n and represent X_i with 0^i Encode the directions L as 01 and R as 02 Encode the transition \\delta(q_i,X_j)=(q_k,X_l,D_m) as 0^i10^j10^k10^l10^m Encode the complete transition function as t_111t_211 \\cdots 11t_n where the t_i are the encodings of the individual transitions Encode the TM with final state t_n as T1110^n where T is the encoding of the transition function diagonalization language The language L_d , the diagonalization language, is the set of strings w_i such that w_i is not in L(M_i) . Because we could write every TM as binary string and binary string is countable, so we could list all TMs as M_1 \\cdots M_i \\cdots whose code is w_1 \\cdots w_i \\cdots . Not all binary string could represent valid TM, of course. So we could consider them as TMs that accept no string including empty string. Then we could construct a table that could represented the characteristic vectors of each languages. Each row means a language and each column is a string, if accept then this cell is 1 and 0 otherwise. In order to construct L_d , we are using the same trick in discrete math. We could find the diagonal value of this table and flip them. For example, if in the table M_i accepts w_i then w_i is not in L_d . L_d is not recursively enumerable No TM could accepts L_d . Still the same trick in discrete math. Suppose L_d = L(M) for some TM M . Then M should be some M_i . If w_i \\in L_d , then M_i should accepts w_i , but according to the def of L_d , w_i is not in L_d . Contradiction. If w_i \\notin L_d , then M_i should not accepts w_i , but according to the def of L_d , w_i is in L_d . Contradiction. So M not exists. L_d is not recursively enumerable. A language that's RE but not Recursive The universal language L_u is {m1111w | m is the encoding of a TM M and w is an input string and M accepts w}. Universal Language is RE We need to build a TM for it. This TM has 3 tapes. 1st tape: the string content m1111w 2nd tape: one track for the current string w, the other track is the pointer of the current tape symbol(this tape is to simulate the TM m) 3rd tape: to record the current state of TM m For the given string m1111w, first put it to 1st tape, then copy w to the 2nd tape and put the pointer to the start of the string. Then go back to 1st tape and read the start state then write to 3rd tape. Then, we check the current state on 3rd tape and check the next symbol on 2nd tape, then go back to 1st tape part m to see what should do next. We could go to a final state and halt if m accepts w. Universal Language is not Recursive We will prove it by proving that the complement of universal language is not recursive enumerable. Suppose the complement of universal language is recursive enumerable, then we could build a Turing Machine T for it. We then make a new TM T'(w) = T(w1111w) such that T' accepts w when T cannot accept w1111w. Then T' should accept w when w is in diagonal language. But diagonal language is not RE, so there should be no T' or T. Rice's Theorem: Nothing Decidable Version 1 Let Q be any non-trivial property of recursively enumerable languages. Then Q is undecidable. We identify a property of a language with the set of TMs that accept the languages with this property. A non-trivial property is one that applies to some but not all languages. Version 2 Let a be any set of TM. Let \\textbf{a*} = \\{M |\\text{ M is a TM that accepts the same languages as some TM in a }\\} Then if a^* is neither empty nor the set of all TM, then a^* must be undecidable. Proof Let Grumpy be the TM that doesn't accept any string. First assume a^* doesn't include Grumpy. It is clear that a^* isn't empty. Let M^* be any particular TM in a^* . We will use the decider of a^* to build a decider for L_u , as follows: Given any pair (M, w), build a new TM M', such that: M'(x) = \\begin{cases} M^*(x) &\\text{if M accepts w}\\\\ M(x) &\\text{if M doesn't accept w} \\end{cases} If M cannot accept w, then M'(w) = M(w) , both M and M' cannot recognize and accept w. M' cannot accept any string that cannot accepted by M, so M' is equivalent to Grumpy and not in a^* . However, we assumed that a^* doesn't include Grumpy. Contradiction. If M does accept w, then M'(w) = M^*(w) , that is, M' could accept the same string as some M^* in a^* . So M' is in a^* . Then, a decider for a^* M' could only be M*(x) , which will decide if M accepts w. So it will decide universal language. So the decider of a^* is not exist and a^* is undecidable.","title":"4.1 Undecidability"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#41-undecidability","text":"Divide TM into two catagories: TMs that halts whether or not it accepts its input TMs that may run forever on inputs they don't accept So we have to show some problems to be undecidable. i.e. Does this TM accept this input?","title":"4.1 Undecidability"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#recursive-recursively-enumerable","text":"A language L is recursive if L=L(M) for some Turing machine M such that: If w is in L, then M accepts and halts. If w is not in L, then M eventually halts, although it never enters an accepting state. If the language is recursive then it is accepted by a TM that always halts.( Decider ) A language L is recursively enumerable if L=L(M) for some TM M , but necessary halts for all input. ( Recognizer ) Not RE > RE > R If a language is recursive, then its complement is also recursive. If a language and its complement are both recursively enumerable, then the langauge is recursive.","title":"Recursive &amp; Recursively Enumerable"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#a-language-thats-not-recursively-enumerable","text":"","title":"A language that's not recursively enumerable"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#present-tm-as-a-binary-string","text":"Represent state q_i with 0^i Number the tape symbols X_1 \\cdots X_n and represent X_i with 0^i Encode the directions L as 01 and R as 02 Encode the transition \\delta(q_i,X_j)=(q_k,X_l,D_m) as 0^i10^j10^k10^l10^m Encode the complete transition function as t_111t_211 \\cdots 11t_n where the t_i are the encodings of the individual transitions Encode the TM with final state t_n as T1110^n where T is the encoding of the transition function","title":"present TM as a binary string"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#diagonalization-language","text":"The language L_d , the diagonalization language, is the set of strings w_i such that w_i is not in L(M_i) . Because we could write every TM as binary string and binary string is countable, so we could list all TMs as M_1 \\cdots M_i \\cdots whose code is w_1 \\cdots w_i \\cdots . Not all binary string could represent valid TM, of course. So we could consider them as TMs that accept no string including empty string. Then we could construct a table that could represented the characteristic vectors of each languages. Each row means a language and each column is a string, if accept then this cell is 1 and 0 otherwise. In order to construct L_d , we are using the same trick in discrete math. We could find the diagonal value of this table and flip them. For example, if in the table M_i accepts w_i then w_i is not in L_d .","title":"diagonalization language"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#l_d-is-not-recursively-enumerable","text":"No TM could accepts L_d . Still the same trick in discrete math. Suppose L_d = L(M) for some TM M . Then M should be some M_i . If w_i \\in L_d , then M_i should accepts w_i , but according to the def of L_d , w_i is not in L_d . Contradiction. If w_i \\notin L_d , then M_i should not accepts w_i , but according to the def of L_d , w_i is in L_d . Contradiction. So M not exists. L_d is not recursively enumerable.","title":"L_d is not recursively enumerable"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#a-language-thats-re-but-not-recursive","text":"The universal language L_u is {m1111w | m is the encoding of a TM M and w is an input string and M accepts w}.","title":"A language that's RE but not Recursive"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#universal-language-is-re","text":"We need to build a TM for it. This TM has 3 tapes. 1st tape: the string content m1111w 2nd tape: one track for the current string w, the other track is the pointer of the current tape symbol(this tape is to simulate the TM m) 3rd tape: to record the current state of TM m For the given string m1111w, first put it to 1st tape, then copy w to the 2nd tape and put the pointer to the start of the string. Then go back to 1st tape and read the start state then write to 3rd tape. Then, we check the current state on 3rd tape and check the next symbol on 2nd tape, then go back to 1st tape part m to see what should do next. We could go to a final state and halt if m accepts w.","title":"Universal Language is RE"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#universal-language-is-not-recursive","text":"We will prove it by proving that the complement of universal language is not recursive enumerable. Suppose the complement of universal language is recursive enumerable, then we could build a Turing Machine T for it. We then make a new TM T'(w) = T(w1111w) such that T' accepts w when T cannot accept w1111w. Then T' should accept w when w is in diagonal language. But diagonal language is not RE, so there should be no T' or T.","title":"Universal Language is not Recursive"},{"location":"computer%20science/theory%20of%20computation/4-1%20Undecidability/#rices-theorem-nothing-decidable","text":"Version 1 Let Q be any non-trivial property of recursively enumerable languages. Then Q is undecidable. We identify a property of a language with the set of TMs that accept the languages with this property. A non-trivial property is one that applies to some but not all languages. Version 2 Let a be any set of TM. Let \\textbf{a*} = \\{M |\\text{ M is a TM that accepts the same languages as some TM in a }\\} Then if a^* is neither empty nor the set of all TM, then a^* must be undecidable. Proof Let Grumpy be the TM that doesn't accept any string. First assume a^* doesn't include Grumpy. It is clear that a^* isn't empty. Let M^* be any particular TM in a^* . We will use the decider of a^* to build a decider for L_u , as follows: Given any pair (M, w), build a new TM M', such that: M'(x) = \\begin{cases} M^*(x) &\\text{if M accepts w}\\\\ M(x) &\\text{if M doesn't accept w} \\end{cases} If M cannot accept w, then M'(w) = M(w) , both M and M' cannot recognize and accept w. M' cannot accept any string that cannot accepted by M, so M' is equivalent to Grumpy and not in a^* . However, we assumed that a^* doesn't include Grumpy. Contradiction. If M does accept w, then M'(w) = M^*(w) , that is, M' could accept the same string as some M^* in a^* . So M' is in a^* . Then, a decider for a^* M' could only be M*(x) , which will decide if M accepts w. So it will decide universal language. So the decider of a^* is not exist and a^* is undecidable.","title":"Rice's Theorem: Nothing Decidable"},{"location":"computer%20science/theory%20of%20computation/4-2%20More%20Undecidability%20Problems/","text":"4.2 More Undecidability Problems How to? Similar to NP-Complete and NP-Hard problems. First of all we need to find a problems P_1 that is not RE or Recursive. Then, we reduce P_1 to another problem P_2 , such that the decider or recognizer of P_2 could decide or recognize P_1 . (P_2) should also be non-RE or non-Recursive. Some Additional Languages L_e = \\{w |\\text{ w is the encoding of a TM that accepts no strings }\\} L_{ne} = \\{w |\\text{ w is the encoding of a TM that accepts at least one string }\\} L_{ne} is recursively enumerable but not recursive. L_e is not even recursively enumerable.","title":"4.2 More Undecidability Problems"},{"location":"computer%20science/theory%20of%20computation/4-2%20More%20Undecidability%20Problems/#42-more-undecidability-problems","text":"","title":"4.2 More Undecidability Problems"},{"location":"computer%20science/theory%20of%20computation/4-2%20More%20Undecidability%20Problems/#how-to","text":"Similar to NP-Complete and NP-Hard problems. First of all we need to find a problems P_1 that is not RE or Recursive. Then, we reduce P_1 to another problem P_2 , such that the decider or recognizer of P_2 could decide or recognize P_1 . (P_2) should also be non-RE or non-Recursive.","title":"How to?"},{"location":"computer%20science/theory%20of%20computation/4-2%20More%20Undecidability%20Problems/#some-additional-languages","text":"L_e = \\{w |\\text{ w is the encoding of a TM that accepts no strings }\\} L_{ne} = \\{w |\\text{ w is the encoding of a TM that accepts at least one string }\\} L_{ne} is recursively enumerable but not recursive. L_e is not even recursively enumerable.","title":"Some Additional Languages"},{"location":"computer%20science/theory%20of%20computation/5-1%20Cook-Levin%20Theorem/","text":"5.1 Cook-Levin Theorem P and NP A deterministic TM has time constraints T(n) if for every input w with |w| \\leq n , the TM halts (whether or not it accepts w) in no more than T(n) steps. \\text{The class }P = \\{L |\\text{ L is a language accepted by some TM with polynomial time complexity}\\} We say nondeterministic TM has time complexity T(n) if for every input w with |w| \\leq n , the TM can halt on w in an accept state, if TM accepts w in no more than T(n) steps. \\text{The class }NP = \\{L |\\text{ L is a language accepted by some non-deterministic TM with polynomial time complexity}\\} Let L be a language in NP. We say L is NP-Complete if for every language A in NP there is a polynomial time reduction of A to L in the sense that we can convert any string w in polynomial time to a string w' so that w is in A if and only if w' is in L. A polynomial-time decider for L then gives us a polynomial-time decider for every language in NP. If L is NP-Complete and in P, then every problem that can be verified in polynomial-time could be solved in polynomial time. Also, L is NP-Hard if every language A in NP could reduces to L in polynomial time. So a NP-complete language must be both in NP and NP-Hard. Cook's Theorem SAT is the language of satisfiable Boolean expressions. (Satisfiable means some set of variable values could let this Boolean function be true.) SAT is NP-Complete. (Every NP languages reduces in polynomial time to SAT.)","title":"5.1 Cook-Levin Theorem"},{"location":"computer%20science/theory%20of%20computation/5-1%20Cook-Levin%20Theorem/#51-cook-levin-theorem","text":"","title":"5.1 Cook-Levin Theorem"},{"location":"computer%20science/theory%20of%20computation/5-1%20Cook-Levin%20Theorem/#p-and-np","text":"A deterministic TM has time constraints T(n) if for every input w with |w| \\leq n , the TM halts (whether or not it accepts w) in no more than T(n) steps. \\text{The class }P = \\{L |\\text{ L is a language accepted by some TM with polynomial time complexity}\\} We say nondeterministic TM has time complexity T(n) if for every input w with |w| \\leq n , the TM can halt on w in an accept state, if TM accepts w in no more than T(n) steps. \\text{The class }NP = \\{L |\\text{ L is a language accepted by some non-deterministic TM with polynomial time complexity}\\} Let L be a language in NP. We say L is NP-Complete if for every language A in NP there is a polynomial time reduction of A to L in the sense that we can convert any string w in polynomial time to a string w' so that w is in A if and only if w' is in L. A polynomial-time decider for L then gives us a polynomial-time decider for every language in NP. If L is NP-Complete and in P, then every problem that can be verified in polynomial-time could be solved in polynomial time. Also, L is NP-Hard if every language A in NP could reduces to L in polynomial time. So a NP-complete language must be both in NP and NP-Hard.","title":"P and NP"},{"location":"computer%20science/theory%20of%20computation/5-1%20Cook-Levin%20Theorem/#cooks-theorem","text":"SAT is the language of satisfiable Boolean expressions. (Satisfiable means some set of variable values could let this Boolean function be true.) SAT is NP-Complete. (Every NP languages reduces in polynomial time to SAT.)","title":"Cook's Theorem"},{"location":"excerpt/akayaakashiyaayakashino/","text":"\u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u76f4\u63a5\u4ece\u867e\u7c73\u590d\u5236\u7c98\u8d34\u8fc7\u6765\u7684 \u611f\u89c9\u8fd9\u9996\u65e5\u6587\u6b4c\u5e94\u8be5\u4f1a\u5f88\u597d\u5531 \u4f46\u6211\u771f\u7684\u4e94\u97f3\u4e0d\u5168\u53ea\u4f1a\u5531\u9ed1\u732b\u8b66\u957f \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c \u3042\u304b\u306d\u306e\u97f3\u8272\uff08\u306d\u3044\u308d\uff09\u306e\u305d\u306e\u5411\uff08\u3080\uff09\u3053\u3046 \u6731\u7d05\u97f3\u8272\u4e4b\u5f7c\u65b9 \u3042\u304b\u306d\u306e\u9ce5\u5c45\uff08\u3068\u308a\u3044\uff09\u306e\u305d\u306e\u5411\uff08\u3080\uff09\u3053\u3046 \u6731\u7d05\u9ce5\u5c45\u4e4b\u5f7c\u65b9 \u305f\u305d\u304c\u308c\u8def\uff08\u307f\u3061\uff09\u306e\u5f71\u6cd5\u5e2b\uff08\u304b\u3052\u307c\u3046\u3057\uff09 \u9ec3\u660f\u8def\u4e0a\u5f71\u6416\u66f3 \u72d0\u706b\u82b1\uff08\u304d\u3064\u306d\u3073\u3070\u306a\uff09\u306e\u7159\uff08\u3051\u3080\uff09\u308b\u91ce\uff08\u306e\uff09\u306b \u78f7\u706b\u7159\u9727\u7c60\u539f\u91ce \u5bb5\uff08\u3088\u3044\uff09\u306e\u304a\u5bae\uff08\u307f\u3084\uff09\u306e\u97f3\uff08\u306d\uff09\u306e\u304d\u3056\u3057 \u5165\u591c\u79a6\u5bae\u4ed9\u97f3\u5146 \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c \u6200\uff08\u3053\u3044\uff09\u3057\u3084\u304b\u306e\u8072\uff08\u3053\u3048\uff09\u304b\u306e\u540d\u524d\uff08\u306a\u307e\u3048\uff09 \u543e\u6200\u4e4b\u8072\u5f7c\u4e4b\u540d \u6c5d\uff08\u306a\uff09\u306e\u540d\uff08\u306a\uff09\u3092\u547c\uff08\u3088\uff09\u3076\u306e\u306f\u305f\u305d\u304b\u308c\u306e \u6c5d\u4e4b\u6240\u559a\u70ba\u8ab0\u540d \u304b\u305d\u3051\u304d\u6c34\u9762\uff08\u307f\u306a\u3082\uff09\u306e\u308f\u3089\u3079\u3046\u305f \u5e7d\u5e7d\u6c34\u9762\u63a0\u6b4c\u8b20 \u541b\uff08\u304d\u307f\uff09\u3092\u4e5e\uff08\u3053\uff09\u3046\u306e\u306f\u304b\u306f\u305f\u308c\u306e \u5f7c\u4e4b\u4f55\u4eba\u4e5e\u65bc\u541b\u3000 \u4e16\u754c\uff08\u305b\u304b\u3044\uff09\u306e\u3042\u308f\u3044\u308b\u3086\u3081\u3046\u3064\u3064 \u4f3c\u5922\u975e\u5922\u6b64\u4e16\u9593 \u307e\u3057\u308d\u304d\u96ea\u8def\uff08\u3086\u304d\u3058\uff09\u306e\u3042\u3057\u3042\u3068\u3092 \u769a\u769a\u96ea\u4e2d\u5c0b\u541b\u8de1 \u3042\u308f\u3086\u304d\u88f3\u88fe\uff08\u3082\u3059\u305d\uff09\u306e\u4e39\uff08\u306b\uff09\u306e\u5f71\uff08\u304b\u3052\uff09\u3092 \u843d\u96ea\u7d05\u88f3\u5b64\u5f71\u9059 \u8ffd\uff08\u304a\uff09\u3044\u3066\u307e\u308d\u3073\u3066\u8fbf\uff08\u305f\u3069\uff09\u308a\u8457\uff08\u3064\uff09\u304f \u5fd8\u5ff5\u9010\u4e4b\u7d42\u5c07\u81f3 \u3060\u308c\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u4eba\uff08\u3072\u3068\uff09\u306e\u8072\uff08\u3053\u3048\uff09 \u65b9\u805e\u7686\u662f\u964c\u4eba\u8072 \u3044\u3064\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u5f71\uff08\u304b\u3052\uff09\u306e\u8857\uff08\u307e\u3061\uff09 \u65e5\u591c\u96e3\u5206\u5f71\u4e4b\u8857 \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c \u767d\uff08\u3057\u308d\uff09\u3084\u771f\u767d\uff08\u307e\u3057\u308d\uff09\u306e\u9053\uff08\u307f\u3061\uff09\u884c\uff08\u3086\uff09\u304d\u306f \u96ea\u67d3\u8def\u9059\u4e4b\u6240\u5411 \u5bb5\uff08\u3088\u3044\uff09\u306e\u304a\u5bae\uff08\u307f\u3084\uff09\u306e\u97f3\uff08\u306d\uff09\u306e\u306a\u3054\u308a \u5165\u591c\u79a6\u5bae\u4e4b\u6b98\u97ff \u4e16\u754c\uff08\u305b\u304b\u3044\uff09\u306e\u3042\u308f\u3044\u306e\u3086\u3081\u3046\u3064\u3064 \u4f3c\u5922\u975e\u5922\u6b64\u4e16\u9593 \u307e\u3057\u308d\u304d\u96ea\u8def\uff08\u3086\u304d\u3058\uff09\u306e\u3042\u3057\u3042\u3068\u3092 \u769a\u769a\u96ea\u4e2d\u5c0b\u541b\u8de1 \u3042\u308f\u3086\u304d\u88f3\u88fe\uff08\u3082\u3059\u305d\uff09\u306e\u4e39\uff08\u306b\uff09\u306e\u5f71\uff08\u304b\u3052\uff09\u3092 \u843d\u96ea\u7d05\u88f3\u5b64\u5f71\u9059 \u8ffd\uff08\u304a\uff09\u3044\u3066\u307e\u308d\u3073\u3066\u8fbf\uff08\u305f\u3069\uff09\u308a\u8457\uff08\u3064\uff09\u304f \u5fd8\u5ff5\u9010\u4e4b\u7d42\u5c07\u81f3 \u3060\u308c\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u4eba\uff08\u3072\u3068\uff09\u306e\u8072\uff08\u3053\u3048\uff09 \u65b9\u805e\u7686\u662f\u964c\u4eba\u8072 \u3044\u3064\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u5f71\uff08\u304b\u3052\uff09\u306e\u8857\uff08\u307e\u3061\uff09 \u65e5\u591c\u96e3\u5206\u5f71\u4e4b\u8857 \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c","title":"\u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e"},{"location":"excerpt/akayaakashiyaayakashino/#_1","text":"\u76f4\u63a5\u4ece\u867e\u7c73\u590d\u5236\u7c98\u8d34\u8fc7\u6765\u7684 \u611f\u89c9\u8fd9\u9996\u65e5\u6587\u6b4c\u5e94\u8be5\u4f1a\u5f88\u597d\u5531 \u4f46\u6211\u771f\u7684\u4e94\u97f3\u4e0d\u5168\u53ea\u4f1a\u5531\u9ed1\u732b\u8b66\u957f \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c \u3042\u304b\u306d\u306e\u97f3\u8272\uff08\u306d\u3044\u308d\uff09\u306e\u305d\u306e\u5411\uff08\u3080\uff09\u3053\u3046 \u6731\u7d05\u97f3\u8272\u4e4b\u5f7c\u65b9 \u3042\u304b\u306d\u306e\u9ce5\u5c45\uff08\u3068\u308a\u3044\uff09\u306e\u305d\u306e\u5411\uff08\u3080\uff09\u3053\u3046 \u6731\u7d05\u9ce5\u5c45\u4e4b\u5f7c\u65b9 \u305f\u305d\u304c\u308c\u8def\uff08\u307f\u3061\uff09\u306e\u5f71\u6cd5\u5e2b\uff08\u304b\u3052\u307c\u3046\u3057\uff09 \u9ec3\u660f\u8def\u4e0a\u5f71\u6416\u66f3 \u72d0\u706b\u82b1\uff08\u304d\u3064\u306d\u3073\u3070\u306a\uff09\u306e\u7159\uff08\u3051\u3080\uff09\u308b\u91ce\uff08\u306e\uff09\u306b \u78f7\u706b\u7159\u9727\u7c60\u539f\u91ce \u5bb5\uff08\u3088\u3044\uff09\u306e\u304a\u5bae\uff08\u307f\u3084\uff09\u306e\u97f3\uff08\u306d\uff09\u306e\u304d\u3056\u3057 \u5165\u591c\u79a6\u5bae\u4ed9\u97f3\u5146 \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c \u6200\uff08\u3053\u3044\uff09\u3057\u3084\u304b\u306e\u8072\uff08\u3053\u3048\uff09\u304b\u306e\u540d\u524d\uff08\u306a\u307e\u3048\uff09 \u543e\u6200\u4e4b\u8072\u5f7c\u4e4b\u540d \u6c5d\uff08\u306a\uff09\u306e\u540d\uff08\u306a\uff09\u3092\u547c\uff08\u3088\uff09\u3076\u306e\u306f\u305f\u305d\u304b\u308c\u306e \u6c5d\u4e4b\u6240\u559a\u70ba\u8ab0\u540d \u304b\u305d\u3051\u304d\u6c34\u9762\uff08\u307f\u306a\u3082\uff09\u306e\u308f\u3089\u3079\u3046\u305f \u5e7d\u5e7d\u6c34\u9762\u63a0\u6b4c\u8b20 \u541b\uff08\u304d\u307f\uff09\u3092\u4e5e\uff08\u3053\uff09\u3046\u306e\u306f\u304b\u306f\u305f\u308c\u306e \u5f7c\u4e4b\u4f55\u4eba\u4e5e\u65bc\u541b\u3000 \u4e16\u754c\uff08\u305b\u304b\u3044\uff09\u306e\u3042\u308f\u3044\u308b\u3086\u3081\u3046\u3064\u3064 \u4f3c\u5922\u975e\u5922\u6b64\u4e16\u9593 \u307e\u3057\u308d\u304d\u96ea\u8def\uff08\u3086\u304d\u3058\uff09\u306e\u3042\u3057\u3042\u3068\u3092 \u769a\u769a\u96ea\u4e2d\u5c0b\u541b\u8de1 \u3042\u308f\u3086\u304d\u88f3\u88fe\uff08\u3082\u3059\u305d\uff09\u306e\u4e39\uff08\u306b\uff09\u306e\u5f71\uff08\u304b\u3052\uff09\u3092 \u843d\u96ea\u7d05\u88f3\u5b64\u5f71\u9059 \u8ffd\uff08\u304a\uff09\u3044\u3066\u307e\u308d\u3073\u3066\u8fbf\uff08\u305f\u3069\uff09\u308a\u8457\uff08\u3064\uff09\u304f \u5fd8\u5ff5\u9010\u4e4b\u7d42\u5c07\u81f3 \u3060\u308c\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u4eba\uff08\u3072\u3068\uff09\u306e\u8072\uff08\u3053\u3048\uff09 \u65b9\u805e\u7686\u662f\u964c\u4eba\u8072 \u3044\u3064\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u5f71\uff08\u304b\u3052\uff09\u306e\u8857\uff08\u307e\u3061\uff09 \u65e5\u591c\u96e3\u5206\u5f71\u4e4b\u8857 \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c \u767d\uff08\u3057\u308d\uff09\u3084\u771f\u767d\uff08\u307e\u3057\u308d\uff09\u306e\u9053\uff08\u307f\u3061\uff09\u884c\uff08\u3086\uff09\u304d\u306f \u96ea\u67d3\u8def\u9059\u4e4b\u6240\u5411 \u5bb5\uff08\u3088\u3044\uff09\u306e\u304a\u5bae\uff08\u307f\u3084\uff09\u306e\u97f3\uff08\u306d\uff09\u306e\u306a\u3054\u308a \u5165\u591c\u79a6\u5bae\u4e4b\u6b98\u97ff \u4e16\u754c\uff08\u305b\u304b\u3044\uff09\u306e\u3042\u308f\u3044\u306e\u3086\u3081\u3046\u3064\u3064 \u4f3c\u5922\u975e\u5922\u6b64\u4e16\u9593 \u307e\u3057\u308d\u304d\u96ea\u8def\uff08\u3086\u304d\u3058\uff09\u306e\u3042\u3057\u3042\u3068\u3092 \u769a\u769a\u96ea\u4e2d\u5c0b\u541b\u8de1 \u3042\u308f\u3086\u304d\u88f3\u88fe\uff08\u3082\u3059\u305d\uff09\u306e\u4e39\uff08\u306b\uff09\u306e\u5f71\uff08\u304b\u3052\uff09\u3092 \u843d\u96ea\u7d05\u88f3\u5b64\u5f71\u9059 \u8ffd\uff08\u304a\uff09\u3044\u3066\u307e\u308d\u3073\u3066\u8fbf\uff08\u305f\u3069\uff09\u308a\u8457\uff08\u3064\uff09\u304f \u5fd8\u5ff5\u9010\u4e4b\u7d42\u5c07\u81f3 \u3060\u308c\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u4eba\uff08\u3072\u3068\uff09\u306e\u8072\uff08\u3053\u3048\uff09 \u65b9\u805e\u7686\u662f\u964c\u4eba\u8072 \u3044\u3064\u3068\u3082\u77e5\uff08\u3057\uff09\u308c\u306c\u5f71\uff08\u304b\u3052\uff09\u306e\u8857\uff08\u307e\u3061\uff09 \u65e5\u591c\u96e3\u5206\u5f71\u4e4b\u8857 \u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e \u8d64\u7d05\u71c8\u706b\u5996\u9b45\u884c","title":"\u3042\u304b\u3084\u3042\u304b\u3057\u3084\u3042\u3084\u304b\u3057\u306e"},{"location":"excerpt/stylePeriods/","text":"Three Style Periods of the Common Practice Era General Music Theory by Leah Frederick at Oberlin Conservertory The Western Art Music that is colloquially referred to as \u201cClassical Music,\u201d is often what we refer to as the music written during the Common Practice Era. This music is described as tonal, meaning that its pitch structures are organized using the system of major and minor keys and harmonic patterns that we\u2019ve studied in this class. (Pitch structure in music written before the Baroque era and from the 20th-century to the present often follows different organizing principles.) The Common Practice Era is often divided into three stylistic eras: Baroque, Classical, Romantic. Of course, composers don\u2019t just wake up one day and decide to write in a new style, so the boundaries between these periods are somewhat artificial. That said, it\u2019s quite incredible how quickly musical style changed in just 200 years, from 1700 to 1900. These three style periods give us a good introductory framework to differentiate the musical style of Western Art Music in this time period. The list below is certainly not comprehensive, specifically with regards to genres and composers, but it does include many well-known genres and famous composers. BAROQUE (1600\u20131750) Style Characteristics: Light accompaniment and textures Small orchestra; use of harpsichords Less contrast in register Few dynamics and tempo changes Lots of ornaments and decoration Continuity; lack of clear phrase boundaries Genres: Dance Suite: usually for solo instrument; many movements (4\u20136 is common) Prelude and Fugue: improvisatory movement (prelude) followed by a polyphonic work (fugue) Concerto: work for solo or small group with orchestra; multiple movements (often 3\u20134) Sonata: work for solo or small ensemble; multiple movements (often 3-4) Composers: Antonio Vivaldi (1678\u20131741) Johann Sebastian Bach (1685\u20131750) George Frideric Handel (1685\u20131759) Arcangelo Corelli (1653\u20131713) Henry Purcell (1659\u20131695) Elizabeth Jacquet de la Guerre (1665\u20131729) Musical Examples: Handel: Suite in D minor https://www.youtube.com/watch?v=ihbh-C6ORpM Bach: Violin Partita in D minor, Chaconne https://www.youtube.com/watch?v=XkfsGCIiHb4 Corelli: Trio Sonata https://www.youtube.com/watch?v=CwJRzYv6HNI Bach: Prelude and Fugue in C major https://www.youtube.com/watch?v=1CVlBSgj0bk (prelude) https://www.youtube.com/watch?v=FUJpXpCbNgw (fugue) CLASSICAL (1750\u20131800) Style Characteristics: Light instrumentation Orchestra with strings and small wind section (horns/oboes) Often clear distinction between melody and accompaniment Clear boundaries between phrases; obvious cadences Clarity and elegance Genres: String Quartet: work for 2 violins, viola, and cello; often 4 movements Symphony: work for orchestra; often 4 movements Sonata: work for solo or small ensemble; often 3\u20134 movements Concerto: work for soloist and orchestra; usually 3 movements Composers: Wolfgang Amadeus Mozart (1756\u20131791) Joseph Haydn (1732\u20131809) Marianna Martines (1744\u20131812) Ludwig van Beethoven (1770\u20131827) Musical Examples: Mozart: Violin Sonata in E minor, K. 304 https://www.youtube.com/watch?v=ynpTXUWrBXc Haydn: String Quartet in B-flat major, Op. 76 https://www.youtube.com/watch?v=biyy2tzMb8M Mozart: Piano Concerto in A major, K. 488 https://www.youtube.com/watch?v=BMYjGkgzinU Beethoven: String Quartet in F major, Op. 18, No. 1 https://www.youtube.com/watch?v=JDonq3gQqf8 Mozart: Symphony No. 41 \u201cJupiter\u201d https://www.youtube.com/watch?v=C6EOb86YdIs ROMANTIC (1800\u20131900) Style Characteristics: Dramatic, epic works, often much longer Bigger orchestra with use of brass and percussion (sometimes choir) Lush, thick textures Large changes in tempo and dynamics Virtuosic, emphasis on perfomer Sometimes \u201cprogrammatic,\u201d depicting a story, emotion, or image Genres: Symphony: work for orchestra; often 4 movements Sonata: work for solo or small ensemble; often 3\u20134 movements Concerto: work for soloist and orchestra; usually 3 movements Character Piece: short work for a single instrument or small ensemble; usually a single movement capturing a specific image or mood Song (Lied): work for voice and piano Composers: Ludwig van Beethoven (1770\u20131827)* Felix Mendelssohn (1809\u20131847) Fanny Mendelssohn Hensel (1805\u20131847) Robert Schumann (1810\u20131856) Clara Schumann (1818\u20131896) Johannes Brahms (1833\u20131897) Anton\u00ecn Dvo\u0159\u00e1k (1841\u20131904) Gustav Mahler (1860\u20131911) * Note: Beethoven\u2019s works span between the Classical and Romantic Eras. His music was important in inspiring the shift towards the Romantic Style. Musical Examples: Schumann: Dichterliebe (set of songs) https://www.youtube.com/watch?v=EZLjf_m6j0A Mendelssohn: Songs without Words (set of character pieces) https://www.youtube.com/watch?v=y1uvYdW8MSk Brahms: Symphony No. 3 https://www.youtube.com/watch?v=-PyAkTW5HDU Mendelssohn: Violin Concerto https://www.youtube.com/watch?v=K67o86CS5uo","title":"Three Style Periods of the Common Practice Era"},{"location":"excerpt/stylePeriods/#three-style-periods-of-the-common-practice-era","text":"General Music Theory by Leah Frederick at Oberlin Conservertory The Western Art Music that is colloquially referred to as \u201cClassical Music,\u201d is often what we refer to as the music written during the Common Practice Era. This music is described as tonal, meaning that its pitch structures are organized using the system of major and minor keys and harmonic patterns that we\u2019ve studied in this class. (Pitch structure in music written before the Baroque era and from the 20th-century to the present often follows different organizing principles.) The Common Practice Era is often divided into three stylistic eras: Baroque, Classical, Romantic. Of course, composers don\u2019t just wake up one day and decide to write in a new style, so the boundaries between these periods are somewhat artificial. That said, it\u2019s quite incredible how quickly musical style changed in just 200 years, from 1700 to 1900. These three style periods give us a good introductory framework to differentiate the musical style of Western Art Music in this time period. The list below is certainly not comprehensive, specifically with regards to genres and composers, but it does include many well-known genres and famous composers.","title":"Three Style Periods of the Common Practice Era"},{"location":"excerpt/stylePeriods/#baroque-16001750","text":"","title":"BAROQUE (1600\u20131750)"},{"location":"excerpt/stylePeriods/#style-characteristics","text":"Light accompaniment and textures Small orchestra; use of harpsichords Less contrast in register Few dynamics and tempo changes Lots of ornaments and decoration Continuity; lack of clear phrase boundaries","title":"Style Characteristics:"},{"location":"excerpt/stylePeriods/#genres","text":"Dance Suite: usually for solo instrument; many movements (4\u20136 is common) Prelude and Fugue: improvisatory movement (prelude) followed by a polyphonic work (fugue) Concerto: work for solo or small group with orchestra; multiple movements (often 3\u20134) Sonata: work for solo or small ensemble; multiple movements (often 3-4)","title":"Genres:"},{"location":"excerpt/stylePeriods/#composers","text":"Antonio Vivaldi (1678\u20131741) Johann Sebastian Bach (1685\u20131750) George Frideric Handel (1685\u20131759) Arcangelo Corelli (1653\u20131713) Henry Purcell (1659\u20131695) Elizabeth Jacquet de la Guerre (1665\u20131729)","title":"Composers:"},{"location":"excerpt/stylePeriods/#musical-examples","text":"Handel: Suite in D minor https://www.youtube.com/watch?v=ihbh-C6ORpM Bach: Violin Partita in D minor, Chaconne https://www.youtube.com/watch?v=XkfsGCIiHb4 Corelli: Trio Sonata https://www.youtube.com/watch?v=CwJRzYv6HNI Bach: Prelude and Fugue in C major https://www.youtube.com/watch?v=1CVlBSgj0bk (prelude) https://www.youtube.com/watch?v=FUJpXpCbNgw (fugue)","title":"Musical Examples:"},{"location":"excerpt/stylePeriods/#classical-17501800","text":"","title":"CLASSICAL (1750\u20131800)"},{"location":"excerpt/stylePeriods/#style-characteristics_1","text":"Light instrumentation Orchestra with strings and small wind section (horns/oboes) Often clear distinction between melody and accompaniment Clear boundaries between phrases; obvious cadences Clarity and elegance","title":"Style Characteristics:"},{"location":"excerpt/stylePeriods/#genres_1","text":"String Quartet: work for 2 violins, viola, and cello; often 4 movements Symphony: work for orchestra; often 4 movements Sonata: work for solo or small ensemble; often 3\u20134 movements Concerto: work for soloist and orchestra; usually 3 movements","title":"Genres:"},{"location":"excerpt/stylePeriods/#composers_1","text":"Wolfgang Amadeus Mozart (1756\u20131791) Joseph Haydn (1732\u20131809) Marianna Martines (1744\u20131812) Ludwig van Beethoven (1770\u20131827)","title":"Composers:"},{"location":"excerpt/stylePeriods/#musical-examples_1","text":"Mozart: Violin Sonata in E minor, K. 304 https://www.youtube.com/watch?v=ynpTXUWrBXc Haydn: String Quartet in B-flat major, Op. 76 https://www.youtube.com/watch?v=biyy2tzMb8M Mozart: Piano Concerto in A major, K. 488 https://www.youtube.com/watch?v=BMYjGkgzinU Beethoven: String Quartet in F major, Op. 18, No. 1 https://www.youtube.com/watch?v=JDonq3gQqf8 Mozart: Symphony No. 41 \u201cJupiter\u201d https://www.youtube.com/watch?v=C6EOb86YdIs","title":"Musical Examples:"},{"location":"excerpt/stylePeriods/#romantic-18001900","text":"","title":"ROMANTIC (1800\u20131900)"},{"location":"excerpt/stylePeriods/#style-characteristics_2","text":"Dramatic, epic works, often much longer Bigger orchestra with use of brass and percussion (sometimes choir) Lush, thick textures Large changes in tempo and dynamics Virtuosic, emphasis on perfomer Sometimes \u201cprogrammatic,\u201d depicting a story, emotion, or image","title":"Style Characteristics:"},{"location":"excerpt/stylePeriods/#genres_2","text":"Symphony: work for orchestra; often 4 movements Sonata: work for solo or small ensemble; often 3\u20134 movements Concerto: work for soloist and orchestra; usually 3 movements Character Piece: short work for a single instrument or small ensemble; usually a single movement capturing a specific image or mood Song (Lied): work for voice and piano","title":"Genres:"},{"location":"excerpt/stylePeriods/#composers_2","text":"Ludwig van Beethoven (1770\u20131827)* Felix Mendelssohn (1809\u20131847) Fanny Mendelssohn Hensel (1805\u20131847) Robert Schumann (1810\u20131856) Clara Schumann (1818\u20131896) Johannes Brahms (1833\u20131897) Anton\u00ecn Dvo\u0159\u00e1k (1841\u20131904) Gustav Mahler (1860\u20131911) * Note: Beethoven\u2019s works span between the Classical and Romantic Eras. His music was important in inspiring the shift towards the Romantic Style.","title":"Composers:"},{"location":"excerpt/stylePeriods/#musical-examples_2","text":"Schumann: Dichterliebe (set of songs) https://www.youtube.com/watch?v=EZLjf_m6j0A Mendelssohn: Songs without Words (set of character pieces) https://www.youtube.com/watch?v=y1uvYdW8MSk Brahms: Symphony No. 3 https://www.youtube.com/watch?v=-PyAkTW5HDU Mendelssohn: Violin Concerto https://www.youtube.com/watch?v=K67o86CS5uo","title":"Musical Examples:"},{"location":"front-end/DOM%20Scripting/","text":"DOM Scripting Notes CSS: presentation JavaScript: behavior append\u548cappendChild\u7684\u533a\u522b append\u662fjavascript\u7684\u539f\u751f\u65b9\u6cd5\uff0cappendChild\u662fDOM\u7684 \u4e00\u822c\u6765\u8bb2appendChild\u53ef\u4ee5\u7528append\u4ee3\u66ff\uff0c\u4f46appendChild\u4e0d\u80fd\u4ee3\u66ffappend","title":"DOM Scripting Notes"},{"location":"front-end/DOM%20Scripting/#dom-scripting-notes","text":"CSS: presentation JavaScript: behavior","title":"DOM Scripting Notes"},{"location":"front-end/DOM%20Scripting/#appendappendchild","text":"append\u662fjavascript\u7684\u539f\u751f\u65b9\u6cd5\uff0cappendChild\u662fDOM\u7684 \u4e00\u822c\u6765\u8bb2appendChild\u53ef\u4ee5\u7528append\u4ee3\u66ff\uff0c\u4f46appendChild\u4e0d\u80fd\u4ee3\u66ffappend","title":"append\u548cappendChild\u7684\u533a\u522b"},{"location":"front-end/DevTools/","text":"DevTools Notes Screenshot a single element Select an element and press cmd-shift-p (or ctrl-shift-p in Windows) to open the Command Menu, and select Capture node screenshot","title":"DevTools Notes"},{"location":"front-end/DevTools/#devtools-notes","text":"","title":"DevTools Notes"},{"location":"front-end/DevTools/#screenshot-a-single-element","text":"Select an element and press cmd-shift-p (or ctrl-shift-p in Windows) to open the Command Menu, and select Capture node screenshot","title":"Screenshot a single element"},{"location":"front-end/JS%20Knowledge/","text":"JS Knowledge Data Structure The built-in shift() is not the most efficient method. Sometimes you just need a pointer and clean up the memory periodically. Object Could use this to implement one simple Set. (Also a built-in Set in ES6) .hasOwnProperty(\"x\") checks if this object has a certain property x delete obj[\"x\"]/ obj.x deletes this property & data Function this & arrowfunction \u592a\u957f\u4e0d\u770b\u7248 \uff1ajs function\u4e2d\u7684this\u4e0e\u8fd9\u4e2afunction\u672c\u8eab\u6709\u5173\uff0c\u5373\u4f7f\u5b83\u88ab\u5305\u5728object\u5185\uff1b\u7136\u800carrow function\u7684this\u7531\u5916\u90e8\u51b3\u5b9a\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u7528arrow functinon\u2026\u2026\u4e4b\u524d\u4e00\u5b9a\u662f\u5728\u54ea\u91cc\u770b\u5230\u8fd9\u4e2a\u77e5\u8bc6\u70b9\uff0c\u7136\u800c\u5fd8\u4e86\u3002 \u8865\u5145\uff1a\u53ef\u4ee5\u4f7f\u7528bind\u51fd\u6570\u5c06\u67d0\u4e2a\u51fd\u6570\u4e2d\u7684this\u4e0e\u67d0\u4e2a\u5bf9\u8c61\u7ed1\u5b9a Declaration for...in or for...of? var or let? var is function scoped while let is block scoped so when you declar var in an if statement, you could get this variable even outside of the block(but not outside of this function), but let cannot. also, var got decleared at the top of each function(even the value assignment is still given at the same line) Value & Type check null null == null // true null === null // true null == undefined // true When using double equal to check, the value might be undefined or null , so it is better to use triple equal when you really need null . However, in generall we don't really need to distinct them, as they are both falsy values, a more common and easier way is to check its value is false or not, see this article \uff1a","title":"JS Knowledge"},{"location":"front-end/JS%20Knowledge/#js-knowledge","text":"","title":"JS Knowledge"},{"location":"front-end/JS%20Knowledge/#data-structure","text":"The built-in shift() is not the most efficient method. Sometimes you just need a pointer and clean up the memory periodically.","title":"Data Structure"},{"location":"front-end/JS%20Knowledge/#object","text":"Could use this to implement one simple Set. (Also a built-in Set in ES6) .hasOwnProperty(\"x\") checks if this object has a certain property x delete obj[\"x\"]/ obj.x deletes this property & data","title":"Object"},{"location":"front-end/JS%20Knowledge/#function","text":"","title":"Function"},{"location":"front-end/JS%20Knowledge/#this-arrowfunction","text":"\u592a\u957f\u4e0d\u770b\u7248 \uff1ajs function\u4e2d\u7684this\u4e0e\u8fd9\u4e2afunction\u672c\u8eab\u6709\u5173\uff0c\u5373\u4f7f\u5b83\u88ab\u5305\u5728object\u5185\uff1b\u7136\u800carrow function\u7684this\u7531\u5916\u90e8\u51b3\u5b9a\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u7528arrow functinon\u2026\u2026\u4e4b\u524d\u4e00\u5b9a\u662f\u5728\u54ea\u91cc\u770b\u5230\u8fd9\u4e2a\u77e5\u8bc6\u70b9\uff0c\u7136\u800c\u5fd8\u4e86\u3002 \u8865\u5145\uff1a\u53ef\u4ee5\u4f7f\u7528bind\u51fd\u6570\u5c06\u67d0\u4e2a\u51fd\u6570\u4e2d\u7684this\u4e0e\u67d0\u4e2a\u5bf9\u8c61\u7ed1\u5b9a","title":"this &amp; arrowfunction"},{"location":"front-end/JS%20Knowledge/#declaration","text":"","title":"Declaration"},{"location":"front-end/JS%20Knowledge/#forin-or-forof","text":"","title":"for...in or for...of?"},{"location":"front-end/JS%20Knowledge/#var-or-let","text":"var is function scoped while let is block scoped so when you declar var in an if statement, you could get this variable even outside of the block(but not outside of this function), but let cannot. also, var got decleared at the top of each function(even the value assignment is still given at the same line)","title":"var or let?"},{"location":"front-end/JS%20Knowledge/#value-type","text":"","title":"Value &amp; Type"},{"location":"front-end/JS%20Knowledge/#check-null","text":"null == null // true null === null // true null == undefined // true When using double equal to check, the value might be undefined or null , so it is better to use triple equal when you really need null . However, in generall we don't really need to distinct them, as they are both falsy values, a more common and easier way is to check its value is false or not, see this article \uff1a","title":"check null"},{"location":"front-end/React%20Native/","text":"React Native Path Convention src(components, screens) assets(images etc.) Style Sheet flexDirection: 'row' justifyContent: 'space-between' alignItems: 'center' child fill the parent: ...StyleSheet.absoluteFillObject Box Object Model margin border padding Flex Box children's layout in a parent Position a child's layout in order to override the above two position: 'absolute' could ignore all siblings React Navigation npx expo-cli install react-native-gesture-handler react-native-reanimated react-navigation-stack@1.10.3 For App.js: import { createAppContainer } from 'react-navigation'; import { createStackNavigator } from 'react-navigation-stack'; import screen; const navigator = createStackNavigtor({screens},{other}); export default createAppContainer(navigator); State guaranteed update: const addGoalHandler = () =>{ setGoals(currentGoals => [...currentGoals, enteredGoal]); }; Reducer const [state, runReducer(dispatch)] = useReducer(reducer, {default}) reducer: (state, action) some conventions for action object: type for string that describe the operation, payload for the amount or data useState(function,[value]), will render only for the first time or the value(s) changed Component in a single file import libraries create a function that returns some JSX create stylesheet object export the component (it is better to save all components into a folder called components or src) const GoalInput = props => { return (); } export default GoalInput; you could return an empty tag <> views will fill the whole android screen hidden behind the bottom bar, so you have to set view flex:1 Touchable (TouchableOpacity or without feedback) you need to wrap everything in it like view ScrollView FlatList it optimizes scrolling by only rendering what's required than ScrollView data: a list of objects with property key(or id) renderItem: a function, input is the object you could also use keyExtractor to get a key for each item If the key is not provided RN have to regenerate the whole list if anything got deleted. some props horizontal(true or false) showsHorizontalScrollIndicator(show scroll bar or not) TextInput be careful of props: autoCapitalize(\"none\"), autoCorrect(false) onEndEditing Modal float Debugging toggle inspector remote debugging(in expo) react native debugger","title":"React Native"},{"location":"front-end/React%20Native/#react-native","text":"","title":"React Native"},{"location":"front-end/React%20Native/#path-convention","text":"src(components, screens) assets(images etc.)","title":"Path Convention"},{"location":"front-end/React%20Native/#style-sheet","text":"flexDirection: 'row' justifyContent: 'space-between' alignItems: 'center' child fill the parent: ...StyleSheet.absoluteFillObject","title":"Style Sheet"},{"location":"front-end/React%20Native/#box-object-model","text":"margin border padding","title":"Box Object Model"},{"location":"front-end/React%20Native/#flex-box","text":"children's layout in a parent","title":"Flex Box"},{"location":"front-end/React%20Native/#position","text":"a child's layout in order to override the above two position: 'absolute' could ignore all siblings","title":"Position"},{"location":"front-end/React%20Native/#react-navigation","text":"npx expo-cli install react-native-gesture-handler react-native-reanimated react-navigation-stack@1.10.3 For App.js: import { createAppContainer } from 'react-navigation'; import { createStackNavigator } from 'react-navigation-stack'; import screen; const navigator = createStackNavigtor({screens},{other}); export default createAppContainer(navigator);","title":"React Navigation"},{"location":"front-end/React%20Native/#state","text":"guaranteed update: const addGoalHandler = () =>{ setGoals(currentGoals => [...currentGoals, enteredGoal]); };","title":"State"},{"location":"front-end/React%20Native/#reducer","text":"const [state, runReducer(dispatch)] = useReducer(reducer, {default}) reducer: (state, action) some conventions for action object: type for string that describe the operation, payload for the amount or data useState(function,[value]), will render only for the first time or the value(s) changed","title":"Reducer"},{"location":"front-end/React%20Native/#component","text":"","title":"Component"},{"location":"front-end/React%20Native/#in-a-single-file","text":"import libraries create a function that returns some JSX create stylesheet object export the component (it is better to save all components into a folder called components or src) const GoalInput = props => { return (); } export default GoalInput; you could return an empty tag <> views will fill the whole android screen hidden behind the bottom bar, so you have to set view flex:1","title":"in a single file"},{"location":"front-end/React%20Native/#touchable","text":"(TouchableOpacity or without feedback) you need to wrap everything in it like view ScrollView","title":"Touchable"},{"location":"front-end/React%20Native/#flatlist","text":"it optimizes scrolling by only rendering what's required than ScrollView data: a list of objects with property key(or id) renderItem: a function, input is the object you could also use keyExtractor to get a key for each item If the key is not provided RN have to regenerate the whole list if anything got deleted.","title":"FlatList"},{"location":"front-end/React%20Native/#some-props","text":"horizontal(true or false) showsHorizontalScrollIndicator(show scroll bar or not)","title":"some props"},{"location":"front-end/React%20Native/#textinput","text":"be careful of props: autoCapitalize(\"none\"), autoCorrect(false) onEndEditing","title":"TextInput"},{"location":"front-end/React%20Native/#modal","text":"float","title":"Modal"},{"location":"front-end/React%20Native/#debugging","text":"toggle inspector remote debugging(in expo) react native debugger","title":"Debugging"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/","text":"\u8863\u670d\u5e94\u8be5\u600e\u4e48\u7a7f \u751f\u6d3b\u6001\u5ea6 \u4e0d\u8981\u9a7c\u80cc \u4e0d\u8981\u9a7c\u80cc \u4e0d\u8981\u9a7c\u80cc \u52e4\u6d17\u52e4\u6362 \u9002\u5f53\u953b\u70bc \u7a7f\u4ec0\u4e48 \u666e\u9002\u6027 \u8d28\u611f\u597d \u7248\u578b\u597d\uff08\u4e0d\u592a\u61c2\uff09 \u6253\u6298\u7684\u65f6\u5019\u4e70\u57fa\u672c\u6b3e\u5c31\u884c\u4e86 \u57fa\u672c\u6b3e \u9ed1\u767d\u7070T\u6064 \u886c\u886b \u6df1\u6d45\u725b\u4ed4\u88e4 \u5361\u5176\u88e4\uff08\uff1f\uff09 \u4f11\u95f2\u897f\u88c5\u88e4\uff08\uff1f\uff09 \u53ef\u4ee5\u4e70\u677f\u978b \u9488\u5bf9\u4e2a\u4eba \u539a\u91cd\u611f\u7684\u8863\u670d \u957f\u5916\u5957 \u7b80\u5355\u7c97\u66b4\u5730\u603b\u7ed3\u4e86\u4e00\u4e0b\u642d\u914d \u4e0a\u8eab \u6625\u590f\uff1a\u767d\u8272T+\u683c\u5b50\u886c\u886b \u4e0a\u8eab \u79cb\u51ac\uff1a\u683c\u5b50\u886c\u886b\u6216\u8005\u4ec0\u4e48\u886c\u886b+\u6ca1\u6709\u5e3d\u5b50\u7684\u536b\u8863/\u5bbd\u677e\u7684\u6bdb\u8863 \u4e0b\u8eab\uff1a\u725b\u4ed4\u88e4/\u9ed1\u8272\u7684\u7d27\u7684\u88e4\u5b50 \u978b\uff1avans\u6216\u8005\u5321\u5a01\u52a0\u4e0a\u767d\u889c\u5b50 \u65e5\u7cfb\u5c31\u662f\u68d5\u8272\u7cfb\u7eff\u8272\u7cfb\u548c\u85cf\u84dd\u8272\u7cfb","title":"\u8863\u670d\u5e94\u8be5\u600e\u4e48\u7a7f"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/#_1","text":"","title":"\u8863\u670d\u5e94\u8be5\u600e\u4e48\u7a7f"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/#_2","text":"\u4e0d\u8981\u9a7c\u80cc \u4e0d\u8981\u9a7c\u80cc \u4e0d\u8981\u9a7c\u80cc \u52e4\u6d17\u52e4\u6362 \u9002\u5f53\u953b\u70bc","title":"\u751f\u6d3b\u6001\u5ea6"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/#_3","text":"","title":"\u7a7f\u4ec0\u4e48"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/#_4","text":"\u8d28\u611f\u597d \u7248\u578b\u597d\uff08\u4e0d\u592a\u61c2\uff09 \u6253\u6298\u7684\u65f6\u5019\u4e70\u57fa\u672c\u6b3e\u5c31\u884c\u4e86","title":"\u666e\u9002\u6027"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/#_5","text":"\u9ed1\u767d\u7070T\u6064 \u886c\u886b \u6df1\u6d45\u725b\u4ed4\u88e4 \u5361\u5176\u88e4\uff08\uff1f\uff09 \u4f11\u95f2\u897f\u88c5\u88e4\uff08\uff1f\uff09 \u53ef\u4ee5\u4e70\u677f\u978b","title":"\u57fa\u672c\u6b3e"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/#_6","text":"\u539a\u91cd\u611f\u7684\u8863\u670d \u957f\u5916\u5957","title":"\u9488\u5bf9\u4e2a\u4eba"},{"location":"life/%E8%A1%A3%E6%9C%8D%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%A9%BF/#_7","text":"\u4e0a\u8eab \u6625\u590f\uff1a\u767d\u8272T+\u683c\u5b50\u886c\u886b \u4e0a\u8eab \u79cb\u51ac\uff1a\u683c\u5b50\u886c\u886b\u6216\u8005\u4ec0\u4e48\u886c\u886b+\u6ca1\u6709\u5e3d\u5b50\u7684\u536b\u8863/\u5bbd\u677e\u7684\u6bdb\u8863 \u4e0b\u8eab\uff1a\u725b\u4ed4\u88e4/\u9ed1\u8272\u7684\u7d27\u7684\u88e4\u5b50 \u978b\uff1avans\u6216\u8005\u5321\u5a01\u52a0\u4e0a\u767d\u889c\u5b50 \u65e5\u7cfb\u5c31\u662f\u68d5\u8272\u7cfb\u7eff\u8272\u7cfb\u548c\u85cf\u84dd\u8272\u7cfb","title":"\u7b80\u5355\u7c97\u66b4\u5730\u603b\u7ed3\u4e86\u4e00\u4e0b\u642d\u914d"},{"location":"reading%20notes/toRead/","text":"ToRead English Great American City: Chicago & the Enduring Neighborhood Effect Age of anger: a history of the present Abstract City NC975.5.N54 A35 2012 24/7: Late Captitalism & the Ends of Sleep The Productive Programmer The Pragmatic Programmer inspired: how to create tech products customers love / Marty Cagan The Effective executive Hacking Growth: How Today\u2019s Fastest-Growing Companies Drive Breakout Success/Morgan Brown and Sean Ellis Front-End Robin Williams' Design Workshop The non-designer's Design Book css secret Thought on interactive design Simple and Usable Web, Mobile, and Interaction Design Designing Web Interfaces: Principles and Patterns for Rich Interactions Design for Hackers: Reverse Engineering Beauty \u7b80\u4f53\u4e2d\u6587 \u601d\u8003\uff0c\u5feb\u4e0e\u6162 \u6587\u5fc3 \u7f8e\u56fd\u5927\u57ce\u5e02\u7684\u6b7b\u4e0e\u751f \u57ce\u5e02\u7684\u5f20\u671b \u7a0b\u5e8f\u5458\u7684\u6570\u5b66 \u7ade\u4e89\u529b\u7684\u63a2\u6c42 by \u8521\u94ed\u4ecb \u5e94\u7269\u5144 by \u674e\u6d31 \u96e8 by \u9ec4\u9526\u6811 \u4e00\u4e2a\u4e50\u89c2\u4e3b\u4e49\u8005\u5728\u7f8e\u56fd","title":"ToRead"},{"location":"reading%20notes/toRead/#toread","text":"","title":"ToRead"},{"location":"reading%20notes/toRead/#english","text":"Great American City: Chicago & the Enduring Neighborhood Effect Age of anger: a history of the present Abstract City NC975.5.N54 A35 2012 24/7: Late Captitalism & the Ends of Sleep The Productive Programmer The Pragmatic Programmer inspired: how to create tech products customers love / Marty Cagan The Effective executive Hacking Growth: How Today\u2019s Fastest-Growing Companies Drive Breakout Success/Morgan Brown and Sean Ellis","title":"English"},{"location":"reading%20notes/toRead/#front-end","text":"Robin Williams' Design Workshop The non-designer's Design Book css secret Thought on interactive design Simple and Usable Web, Mobile, and Interaction Design Designing Web Interfaces: Principles and Patterns for Rich Interactions Design for Hackers: Reverse Engineering Beauty","title":"Front-End"},{"location":"reading%20notes/toRead/#_1","text":"\u601d\u8003\uff0c\u5feb\u4e0e\u6162 \u6587\u5fc3 \u7f8e\u56fd\u5927\u57ce\u5e02\u7684\u6b7b\u4e0e\u751f \u57ce\u5e02\u7684\u5f20\u671b \u7a0b\u5e8f\u5458\u7684\u6570\u5b66 \u7ade\u4e89\u529b\u7684\u63a2\u6c42 by \u8521\u94ed\u4ecb \u5e94\u7269\u5144 by \u674e\u6d31 \u96e8 by \u9ec4\u9526\u6811 \u4e00\u4e2a\u4e50\u89c2\u4e3b\u4e49\u8005\u5728\u7f8e\u56fd","title":"\u7b80\u4f53\u4e2d\u6587"},{"location":"research/Belmont_Principles/","text":"Belmont Principles Ethical Principles and Guidelines for the Protection of Human Subjects of Research \u597d\u5427\uff0c\u8fd9\u5f88\u4eba\u9053\u4e3b\u4e49\u3002 \u4e09\u6761\u7c97\u7565\u770b\u5b8c\u4e4b\u540e\uff0c\u89c9\u5f97\u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\u505a\u51fa\u76f8\u5e94\u7684\u6743\u8861\u8fd8\u662f\u5f88\u96be\uff0c\u51e0\u4e4e\u4e0d\u592a\u53ef\u80fd\u5168\u90e8\u505a\u5230\u554ahhhh Respect for Persons acknowledge autonomy autonomy\u7684\u4eba\u5c31\u662f\u6709\u80fd\u529b\u8003\u8651\u81ea\u5df1\u7684\u76ee\u6807\u5e76\u884c\u52a8\u7684\u4eba\u3002\u53cd\u6b63\u8981\u5c0a\u91cd\u8fd9\u5e2e\u4eba\u7684\u610f\u89c1\u548c\u60f3\u6cd5\uff0c\u9664\u975e\u4ed6\u4eec\u5e72\u4e86\u5bf9\u522b\u4eba\u6709\u5bb3\u7684\u4e8b\u60c5\uff0c\u5426\u5219\u4e0d\u80fd\u968f\u610f\u963b\u6b62\u4ed6\u4eec\u7684\u884c\u4e3a\u3002 protect those with diminished autonomy \u5bf9\u4e8e\u90a3\u4e9b\u505a\u4e0d\u5230autonomy\u7684\u4eba\uff0c\u5c31\u9700\u8981\u4fdd\u62a4\u5e76\u4e14\u5e2e\u52a9\u4ed6\u4eec\u3002 Beneficence do not harm \u4e0d\u80fd\u4f24\u5bb3\u4ed6\u4eec\uff0c\u4e5f\u4e0d\u80fd\u8ba9\u4ed6\u4eec\u6709\u53d7\u4f24\u7684\u98ce\u9669\u3002 maximize possible benefits and minimize possible harms \u6700\u5927\u5316\u6536\u76ca\uff0c\u4e0d\u4e00\u5b9a\u662f\u5bf9\u5b9e\u9a8c\u5bf9\u8c61\u7684\u6536\u76ca\uff0c\u800c\u662f\u4e00\u4e2a\u7fa4\u4f53\u751a\u81f3\u5168\u4eba\u7c7b\u7684\u90a3\u79cd\u957f\u671f\u6536\u76ca\u3002 Justice to each person an equal share to each person according to individual need to each person according to individual effort to each person according to societal contribution to each person according to merit.","title":"Belmont Principles"},{"location":"research/Belmont_Principles/#belmont-principles","text":"Ethical Principles and Guidelines for the Protection of Human Subjects of Research \u597d\u5427\uff0c\u8fd9\u5f88\u4eba\u9053\u4e3b\u4e49\u3002 \u4e09\u6761\u7c97\u7565\u770b\u5b8c\u4e4b\u540e\uff0c\u89c9\u5f97\u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\u505a\u51fa\u76f8\u5e94\u7684\u6743\u8861\u8fd8\u662f\u5f88\u96be\uff0c\u51e0\u4e4e\u4e0d\u592a\u53ef\u80fd\u5168\u90e8\u505a\u5230\u554ahhhh","title":"Belmont Principles"},{"location":"research/Belmont_Principles/#respect-for-persons","text":"","title":"Respect for Persons"},{"location":"research/Belmont_Principles/#acknowledge-autonomy","text":"autonomy\u7684\u4eba\u5c31\u662f\u6709\u80fd\u529b\u8003\u8651\u81ea\u5df1\u7684\u76ee\u6807\u5e76\u884c\u52a8\u7684\u4eba\u3002\u53cd\u6b63\u8981\u5c0a\u91cd\u8fd9\u5e2e\u4eba\u7684\u610f\u89c1\u548c\u60f3\u6cd5\uff0c\u9664\u975e\u4ed6\u4eec\u5e72\u4e86\u5bf9\u522b\u4eba\u6709\u5bb3\u7684\u4e8b\u60c5\uff0c\u5426\u5219\u4e0d\u80fd\u968f\u610f\u963b\u6b62\u4ed6\u4eec\u7684\u884c\u4e3a\u3002","title":"acknowledge autonomy"},{"location":"research/Belmont_Principles/#protect-those-with-diminished-autonomy","text":"\u5bf9\u4e8e\u90a3\u4e9b\u505a\u4e0d\u5230autonomy\u7684\u4eba\uff0c\u5c31\u9700\u8981\u4fdd\u62a4\u5e76\u4e14\u5e2e\u52a9\u4ed6\u4eec\u3002","title":"protect those with diminished autonomy"},{"location":"research/Belmont_Principles/#beneficence","text":"","title":"Beneficence"},{"location":"research/Belmont_Principles/#do-not-harm","text":"\u4e0d\u80fd\u4f24\u5bb3\u4ed6\u4eec\uff0c\u4e5f\u4e0d\u80fd\u8ba9\u4ed6\u4eec\u6709\u53d7\u4f24\u7684\u98ce\u9669\u3002","title":"do not harm"},{"location":"research/Belmont_Principles/#maximize-possible-benefits-and-minimize-possible-harms","text":"\u6700\u5927\u5316\u6536\u76ca\uff0c\u4e0d\u4e00\u5b9a\u662f\u5bf9\u5b9e\u9a8c\u5bf9\u8c61\u7684\u6536\u76ca\uff0c\u800c\u662f\u4e00\u4e2a\u7fa4\u4f53\u751a\u81f3\u5168\u4eba\u7c7b\u7684\u90a3\u79cd\u957f\u671f\u6536\u76ca\u3002","title":"maximize possible benefits and minimize possible harms"},{"location":"research/Belmont_Principles/#justice","text":"","title":"Justice"},{"location":"research/Belmont_Principles/#to-each-person-an-equal-share","text":"","title":"to each person an equal share"},{"location":"research/Belmont_Principles/#to-each-person-according-to-individual-need","text":"","title":"to each person according to individual need"},{"location":"research/Belmont_Principles/#to-each-person-according-to-individual-effort","text":"","title":"to each person according to individual effort"},{"location":"research/Belmont_Principles/#to-each-person-according-to-societal-contribution","text":"","title":"to each person according to societal contribution"},{"location":"research/Belmont_Principles/#to-each-person-according-to-merit","text":"","title":"to each person according to merit."},{"location":"research/Cognitive%20Walkthrough/","text":"Cognitive Walkthrough Method Users like to learn software by exploration, instead of formal training. Evaluate a proposed interface in the context of one or more specific user tasks. Detailed Description Two phases: preparatory phase: define input such as tasks, action sequences, user population, interface to be analyzed analysis phase: real work, i.e. walk through all actions of all tasks Define Inputs Who will be the users of the system?(specific background experience or knowledge for both interface and task ) What tasks will be analyzed?(should be concrete and realistic) What is the correct action sequence for each task and how is it described?(how the user is expected to view the task before learning the interface + a description of the sequence of actions that should accomplish the task with the current definition of the interface) How is the interface defined?(Description of prompts before every action) Walking Through the Actions Examining each action and attempting to tell a credible story about why users choose that action, based on assumptions about the user's background knowledge and goals, and on an understanding of the problem-solving process that enables a user to guess the correct action. heuristic \u542f\u53d1\u5f0f\uff08\u6559\u5b66\u6cd5\uff09 such as label-following critical features: connect goal description and action; connect action and feedback Will the users try to achieve the right effect? Will the user notice that the correct action is available? Will the user associate the correct action with the effect trying to be achieved? If the correct action is performed, will the user see that progress is being made toward solution of the task? Capturing Critical Information During the Evaluation User knowledge requirements, assumptions about the user population, notes about side issues and design changes, and the credible success story developed during the walkthrough. A possible practice: Divide these information into 3 groups, one for recording key points of group story, one for classes of users(population, prerequisite, what will be learn during performing tasks), one for side issues and design challenges(in detail if possible). Success and Failure Stories Common Features of Success Users May Know What Effect To Achieve it is part of their original task they have experience using a system the system tells them to do it User May Know An Action Is Available by experience seeing some device (button etc.) seeing a representation of an action (menu entry etc.) User May Know An Action Is Appropriate For The Effect They Are Trying To Achieve by experience the interface provides a prompt or label that connects the action to what they are trying to do all other actions look wrong User May Know Things Are Going OK After An Action by experience recognize a connection between a system response and what they were trying to do Some Other Problems time limits physically difficult actions dropped terminator actions Staying on Track and General Fixes Staying on Track Cognitive Walkthrough only tells success story. If any issues generated in one of the actions of the sequence, just assume that the user takes the correct action, record the problem and go to next step. Also, users might learn new knowledge in previous actions General Fixes Will the user be trying to achieve the right effect? eliminate the action or change it to combinations of other action provide a prompt about which action to perform change parts of the task to get a better understanding Will the user know that the correct action is available? assign the action to a more obvious control Will the user know that the correct action will achieve the desired effect? labor-following, assign labels that include words that users are likely to use when describing their tasks If the correct action is taken, will the user see that things are going OK? feedback that indicates what happened is better than feedback that just indicates that something happened use term or graphics that relate to the user's description for the task","title":"Cognitive Walkthrough Method"},{"location":"research/Cognitive%20Walkthrough/#cognitive-walkthrough-method","text":"Users like to learn software by exploration, instead of formal training. Evaluate a proposed interface in the context of one or more specific user tasks.","title":"Cognitive Walkthrough Method"},{"location":"research/Cognitive%20Walkthrough/#detailed-description","text":"Two phases: preparatory phase: define input such as tasks, action sequences, user population, interface to be analyzed analysis phase: real work, i.e. walk through all actions of all tasks","title":"Detailed  Description"},{"location":"research/Cognitive%20Walkthrough/#define-inputs","text":"Who will be the users of the system?(specific background experience or knowledge for both interface and task ) What tasks will be analyzed?(should be concrete and realistic) What is the correct action sequence for each task and how is it described?(how the user is expected to view the task before learning the interface + a description of the sequence of actions that should accomplish the task with the current definition of the interface) How is the interface defined?(Description of prompts before every action)","title":"Define Inputs"},{"location":"research/Cognitive%20Walkthrough/#walking-through-the-actions","text":"Examining each action and attempting to tell a credible story about why users choose that action, based on assumptions about the user's background knowledge and goals, and on an understanding of the problem-solving process that enables a user to guess the correct action. heuristic \u542f\u53d1\u5f0f\uff08\u6559\u5b66\u6cd5\uff09 such as label-following critical features: connect goal description and action; connect action and feedback Will the users try to achieve the right effect? Will the user notice that the correct action is available? Will the user associate the correct action with the effect trying to be achieved? If the correct action is performed, will the user see that progress is being made toward solution of the task?","title":"Walking Through the Actions"},{"location":"research/Cognitive%20Walkthrough/#capturing-critical-information-during-the-evaluation","text":"User knowledge requirements, assumptions about the user population, notes about side issues and design changes, and the credible success story developed during the walkthrough. A possible practice: Divide these information into 3 groups, one for recording key points of group story, one for classes of users(population, prerequisite, what will be learn during performing tasks), one for side issues and design challenges(in detail if possible).","title":"Capturing Critical Information During the Evaluation"},{"location":"research/Cognitive%20Walkthrough/#success-and-failure-stories","text":"","title":"Success and Failure Stories"},{"location":"research/Cognitive%20Walkthrough/#common-features-of-success","text":"Users May Know What Effect To Achieve it is part of their original task they have experience using a system the system tells them to do it User May Know An Action Is Available by experience seeing some device (button etc.) seeing a representation of an action (menu entry etc.) User May Know An Action Is Appropriate For The Effect They Are Trying To Achieve by experience the interface provides a prompt or label that connects the action to what they are trying to do all other actions look wrong User May Know Things Are Going OK After An Action by experience recognize a connection between a system response and what they were trying to do","title":"Common Features of Success"},{"location":"research/Cognitive%20Walkthrough/#some-other-problems","text":"time limits physically difficult actions dropped terminator actions","title":"Some Other Problems"},{"location":"research/Cognitive%20Walkthrough/#staying-on-track-and-general-fixes","text":"","title":"Staying on Track and General Fixes"},{"location":"research/Cognitive%20Walkthrough/#staying-on-track","text":"Cognitive Walkthrough only tells success story. If any issues generated in one of the actions of the sequence, just assume that the user takes the correct action, record the problem and go to next step. Also, users might learn new knowledge in previous actions","title":"Staying on Track"},{"location":"research/Cognitive%20Walkthrough/#general-fixes","text":"Will the user be trying to achieve the right effect? eliminate the action or change it to combinations of other action provide a prompt about which action to perform change parts of the task to get a better understanding Will the user know that the correct action is available? assign the action to a more obvious control Will the user know that the correct action will achieve the desired effect? labor-following, assign labels that include words that users are likely to use when describing their tasks If the correct action is taken, will the user see that things are going OK? feedback that indicates what happened is better than feedback that just indicates that something happened use term or graphics that relate to the user's description for the task","title":"General Fixes"},{"location":"research/Non-parametric%20Tests/","text":"Non-parametric Tests the Wilcoxon rank-sum test(Mann-Whitney test) comparing two independent conditions compares two conditions when different participants take part in each condition and the resulting data violate any assumption of the independent t-test \u539f\u7406 \u5c06\u4e24\u7ec4\u6570\u636e\u6807\u4e0a\u6807\u7b7e\uff0c\u7136\u540e\u653e\u5728\u4e00\u8d77\u6392\u5e8f\u3002\u6700\u5c0f\u503c\u4e3arank 1\uff0c\u7b2c\u4e8c\u5c0f\u7684\u4e3arank 2\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\u2026\u2026 \u6ce8\u610f\uff0c\u5982\u679c\u6709\u591a\u4e2a\u503c\u76f8\u540c\uff08tied scores\uff09\uff0c\u90a3\u4ed6\u4eec\u7684rank\u7edf\u4e00\u4e3apotential rank\u7684\u5e73\u5747\u503c\u3002potential rank\u5c31\u662f\u5047\u8bbe\u4ed6\u4eec\u4e0d\u540c\u7684\u8bdd\u5e94\u8be5\u662f\u4ec0\u4e48rank\u3002 \u7136\u540e\u518d\u628a\u76f8\u540c\u7ec4\u5185\u7684\u6240\u6709\u503c\u7684rank\u6c42\u548c\u3002 \u4e3a\u4e86\u6821\u6b63\uff0c\u5404\u51cf\u53bbmean rank of the group\uff0c\u516c\u5f0f\u4e3aN(N+1)/2\u3002 \uff08N\u4e3a\u6bcf\u4e2a\u7ec4\u7684\u4eba\u6570\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u7b49\u5dee\u6570\u52171...N\u7684\u548c\u6700\u540e\u9664\u4ee5N\uff09 \u4ee5\u4e0a\u7684\u8ba1\u7b97\u7ed3\u679c\u4e3atest statistic\uff0c\u53d6\u8f83\u5c0f\u7684\u90a3\u4e2a\u503c\uff08\uff1f\u5b58\u7591\uff09 \u7136\u540e\u8ba1\u7b97associated p-value\uff0c\u5176\u5b9e\u53ef\u4ee5\u7528monte carlo method\uff0c\u5c31\u662f\u4ece\u6574\u4e2a\u6837\u672c\u91cc\u968f\u673a\u62bd\u53d6\u51fa\u6765\u4e00\u4e2a\u7ec4\uff0c\u7136\u540e\u518d\u6b21\u8ba1\u7b97\uff0c\u770b\u770b\u662f\u5426\u7b26\u5408\u6211\u4eec\u7684\u7ed3\u679c\uff08\u5176\u5b9e\u4e0d\u5e94\u8be5\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0bnull hypothesis is true\uff09\u2014\u2014\u4e0d\u8fc7\u8fd9\u4e2a\u8981\u53cd\u53cd\u590d\u590d\u53d6\u6837\u672c\u8ba1\u7b97\uff0c\u5bf9\u5927\u7684\u6570\u636e\u6765\u8bf4\u5f88\u4e0d\u53cb\u597d\u3002 \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662fnormal approximation\u3002 \u8be5\u65b9\u6cd5\u5e76\u4e0d\u5f3a\u6c42\u6570\u636e\u672c\u8eab\u662f\u6210\u6b63\u6001\u5206\u5e03\u7684\uff0c\u800c\u662f\u8ba4\u4e3a\u6211\u4eec\u4e00\u6b21\u4e00\u6b21\u53d6\u6837\u672c\u8ba1\u7b97\u7684\u4e0a\u8ff0\u7ed3\u679c\u5e94\u8be5\u662f\u6210\u6b63\u6001\u5206\u5e03\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u6807\u51c6\u5dee\uff0c\u7136\u540e\u7b97z\uff0c\u7136\u540e\u7b97p-value\u3002 \u5f53\u7136\u5bf9R\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7b97\uff0c\u5b83\u9ed8\u8ba4\u4f1a\u52a0\u4e0a\u4e00\u4e2acontinuity correction\uff0c\u56e0\u4e3a\u6b63\u6001\u5206\u5e03\u672c\u8eab\u662f\u5e73\u6ed1\u66f2\u7ebf\uff0c\u4f46\u6211\u4eec\u7684\u6570\u636e\u5206\u6210\u4e86rank\u6240\u4ee5\u4e0d\u662f\u5e73\u6ed1\u7684\uff0c\u56e0\u6b64\u6821\u6b63\u4e4b\u540e\u4f1a\u628a\u4f60\u7684p-value\u7a0d\u5fae\u62c9\u9ad8\u4e00\u70b9\u3002 calculating effect size r=z/sqrt(N) \u5728R\u4e2d\u8ba1\u7b97z-score\u7684\u65b9\u6cd5\uff1aqnorm(xxmodel$p.value/2) if p-value<0.05, then the two groups are significantly different the Wilcoxon signed-rank test comparing two related conditions two set of scores, from the same participants, and the resulting data violate an assumption of the dependent t-test \u539f\u7406 \u5bf9\u6240\u6709\u7684\u6570\u636e\uff1astate 2 - state 1\uff08\u5982\u679c\u5dee\u4e3a0\uff0c\u90a3\u4e48\u76f4\u63a5\u7b5b\u6389\u8be5\u6570\u636e\uff09 \u7136\u540e\u6839\u636e\u7ed3\u679c\u7684\u7edd\u5bf9\u503c\u7684\u5927\u5c0f\u5bf9\u6570\u636e\u8fdb\u884crank\u5206\u914d\uff0c\u5904\u7406tied scores\u7684\u65b9\u6cd5\u76f8\u540c \u7136\u540e\u628a\u6570\u636e\u5206\u4e3a\u5dee\u5927\u4e8e\u96f6\u548c\u5dee\u5c0f\u4e8e\u96f6\u4e24\u79cd\uff0c\u6c42sum of positive ranks\u548csum of negative ranks \u6700\u7ec8\u7684test statistic\u4e3a\u8fd9\u4e24\u4e2a\u7ed3\u679c\u91cc\u6bd4\u8f83\u5c0f\u7684\u90a3\u4e2a \u7136\u540e\u8ba1\u7b97significance of the test statistic\uff08\u516c\u5f0f\u89c1\u8bfe\u672cp668\u4e0b\u9762\uff09\uff0c\u6ce8\u610f\u6837\u672c\u603b\u6570\u4e0d\u7b97\u5dee\u4e3a\u96f6\u7684\u90a3\u51e0\u4e2a mean\u548cstandard error\u7684\u8ba1\u7b97\u65b9\u6cd5\u89c1p670 \u8ba1\u7b97effect size\u89c1p673 if p-value<0.05, then the two groups are significantly different Kruskal-Wallis test comparing several conditions when different participants take part in each condition and the resulting data violate an assumption of one-way independent ANOVA \u548cwilcoxon rank-sum\u7c7b\u4f3c\uff0c\u4e00\u5f00\u59cb\u5148\u628a\u5404\u7ec4\u6570\u636e\u653e\u5728\u4e00\u8d77\u6392rank\uff0c\u7136\u548c\u628a\u5404\u7ec4\u7684rank\u6c42\u548c\u3002 \u5404\u7ec4\u7684test statistic H\u6709\u4e00\u4e2a\u5f88\u590d\u6742\u7684\u516c\u5f0f\uff0c\u89c1p767\u6700\u4e0b\u976215.1 post hoc test \u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u4e24\u4e24\u6bd4\u8f83\uff0c\u90fd\u8fdb\u884c\u4e00\u6b21wilcoxon rank-sum test\uff0c\u516c\u5f0f\u89c1p681\u768415.2 R\u4e2d\u7684\u65b9\u6cd5\u89c1p683 if p-value<0.05, then the two groups are significantly different the Jonckheere-Terpstra test \u548cKruskal-Wallis test\u7c7b\u4f3c\uff0c\u53ea\u662f\u5305\u62ec\u4e86the order of the groups\u662f\u5426\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002 R\u4e2d\u7684\u65b9\u6cd5\u89c1p685 Friedman's test differences between conditions when there are more than two conditions and the same participants have been used in all conditions(each case contributes several scores to the data)+violated an assumption of one-way repeated-measures ANOVA Friedman's ANOVA \u9996\u5148\u628a\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u7684\u6570\u636e\u653e\u5728\u4e0d\u540c\u7684\u5217\u4e2d\uff0c\u7136\u540e\u5bf9 \u6bcf\u4e00\u884c \uff08\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u4e2aparticipants\uff09\u4e2d\u7684\u5217\u6392rank\uff08\u6bd4\u5982condition 2\u6700\u5c0f\uff0c\u90a3\u4e48\u5b83\u7684rank\u662f1\uff0c\u7b2c\u4e8c\u5c0f\u7684\u662fcondition 1\uff0c\u90a3\u4e48\u5b83\u7684rank\u5c31\u662f2\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\uff09 \u6700\u540e\uff0c\u5c06\u4e0d\u540ccondition\uff08\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u5217\uff09\u7684rank\u76f8\u52a0\u3002test statistics F_r \u7684\u516c\u5f0f\u8fd8\u662f\u5f88\u590d\u6742\uff0c\u89c1p689\u6700\u4e0a\u65b9 post hoc test\u7684\u65b9\u6cd5\u89c1p691\u768415.7.6. if p-value<0.05, then the two groups are significantly different","title":"Non-parametric Tests"},{"location":"research/Non-parametric%20Tests/#non-parametric-tests","text":"","title":"Non-parametric Tests"},{"location":"research/Non-parametric%20Tests/#the-wilcoxon-rank-sum-testmann-whitney-test","text":"comparing two independent conditions compares two conditions when different participants take part in each condition and the resulting data violate any assumption of the independent t-test","title":"the Wilcoxon rank-sum test(Mann-Whitney test)"},{"location":"research/Non-parametric%20Tests/#_1","text":"\u5c06\u4e24\u7ec4\u6570\u636e\u6807\u4e0a\u6807\u7b7e\uff0c\u7136\u540e\u653e\u5728\u4e00\u8d77\u6392\u5e8f\u3002\u6700\u5c0f\u503c\u4e3arank 1\uff0c\u7b2c\u4e8c\u5c0f\u7684\u4e3arank 2\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\u2026\u2026 \u6ce8\u610f\uff0c\u5982\u679c\u6709\u591a\u4e2a\u503c\u76f8\u540c\uff08tied scores\uff09\uff0c\u90a3\u4ed6\u4eec\u7684rank\u7edf\u4e00\u4e3apotential rank\u7684\u5e73\u5747\u503c\u3002potential rank\u5c31\u662f\u5047\u8bbe\u4ed6\u4eec\u4e0d\u540c\u7684\u8bdd\u5e94\u8be5\u662f\u4ec0\u4e48rank\u3002 \u7136\u540e\u518d\u628a\u76f8\u540c\u7ec4\u5185\u7684\u6240\u6709\u503c\u7684rank\u6c42\u548c\u3002 \u4e3a\u4e86\u6821\u6b63\uff0c\u5404\u51cf\u53bbmean rank of the group\uff0c\u516c\u5f0f\u4e3aN(N+1)/2\u3002 \uff08N\u4e3a\u6bcf\u4e2a\u7ec4\u7684\u4eba\u6570\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u7b49\u5dee\u6570\u52171...N\u7684\u548c\u6700\u540e\u9664\u4ee5N\uff09 \u4ee5\u4e0a\u7684\u8ba1\u7b97\u7ed3\u679c\u4e3atest statistic\uff0c\u53d6\u8f83\u5c0f\u7684\u90a3\u4e2a\u503c\uff08\uff1f\u5b58\u7591\uff09 \u7136\u540e\u8ba1\u7b97associated p-value\uff0c\u5176\u5b9e\u53ef\u4ee5\u7528monte carlo method\uff0c\u5c31\u662f\u4ece\u6574\u4e2a\u6837\u672c\u91cc\u968f\u673a\u62bd\u53d6\u51fa\u6765\u4e00\u4e2a\u7ec4\uff0c\u7136\u540e\u518d\u6b21\u8ba1\u7b97\uff0c\u770b\u770b\u662f\u5426\u7b26\u5408\u6211\u4eec\u7684\u7ed3\u679c\uff08\u5176\u5b9e\u4e0d\u5e94\u8be5\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0bnull hypothesis is true\uff09\u2014\u2014\u4e0d\u8fc7\u8fd9\u4e2a\u8981\u53cd\u53cd\u590d\u590d\u53d6\u6837\u672c\u8ba1\u7b97\uff0c\u5bf9\u5927\u7684\u6570\u636e\u6765\u8bf4\u5f88\u4e0d\u53cb\u597d\u3002 \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662fnormal approximation\u3002 \u8be5\u65b9\u6cd5\u5e76\u4e0d\u5f3a\u6c42\u6570\u636e\u672c\u8eab\u662f\u6210\u6b63\u6001\u5206\u5e03\u7684\uff0c\u800c\u662f\u8ba4\u4e3a\u6211\u4eec\u4e00\u6b21\u4e00\u6b21\u53d6\u6837\u672c\u8ba1\u7b97\u7684\u4e0a\u8ff0\u7ed3\u679c\u5e94\u8be5\u662f\u6210\u6b63\u6001\u5206\u5e03\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u6807\u51c6\u5dee\uff0c\u7136\u540e\u7b97z\uff0c\u7136\u540e\u7b97p-value\u3002 \u5f53\u7136\u5bf9R\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7b97\uff0c\u5b83\u9ed8\u8ba4\u4f1a\u52a0\u4e0a\u4e00\u4e2acontinuity correction\uff0c\u56e0\u4e3a\u6b63\u6001\u5206\u5e03\u672c\u8eab\u662f\u5e73\u6ed1\u66f2\u7ebf\uff0c\u4f46\u6211\u4eec\u7684\u6570\u636e\u5206\u6210\u4e86rank\u6240\u4ee5\u4e0d\u662f\u5e73\u6ed1\u7684\uff0c\u56e0\u6b64\u6821\u6b63\u4e4b\u540e\u4f1a\u628a\u4f60\u7684p-value\u7a0d\u5fae\u62c9\u9ad8\u4e00\u70b9\u3002","title":"\u539f\u7406"},{"location":"research/Non-parametric%20Tests/#calculating-effect-size","text":"r=z/sqrt(N) \u5728R\u4e2d\u8ba1\u7b97z-score\u7684\u65b9\u6cd5\uff1aqnorm(xxmodel$p.value/2) if p-value<0.05, then the two groups are significantly different","title":"calculating effect size"},{"location":"research/Non-parametric%20Tests/#the-wilcoxon-signed-rank-test","text":"comparing two related conditions two set of scores, from the same participants, and the resulting data violate an assumption of the dependent t-test","title":"the Wilcoxon signed-rank test"},{"location":"research/Non-parametric%20Tests/#_2","text":"\u5bf9\u6240\u6709\u7684\u6570\u636e\uff1astate 2 - state 1\uff08\u5982\u679c\u5dee\u4e3a0\uff0c\u90a3\u4e48\u76f4\u63a5\u7b5b\u6389\u8be5\u6570\u636e\uff09 \u7136\u540e\u6839\u636e\u7ed3\u679c\u7684\u7edd\u5bf9\u503c\u7684\u5927\u5c0f\u5bf9\u6570\u636e\u8fdb\u884crank\u5206\u914d\uff0c\u5904\u7406tied scores\u7684\u65b9\u6cd5\u76f8\u540c \u7136\u540e\u628a\u6570\u636e\u5206\u4e3a\u5dee\u5927\u4e8e\u96f6\u548c\u5dee\u5c0f\u4e8e\u96f6\u4e24\u79cd\uff0c\u6c42sum of positive ranks\u548csum of negative ranks \u6700\u7ec8\u7684test statistic\u4e3a\u8fd9\u4e24\u4e2a\u7ed3\u679c\u91cc\u6bd4\u8f83\u5c0f\u7684\u90a3\u4e2a \u7136\u540e\u8ba1\u7b97significance of the test statistic\uff08\u516c\u5f0f\u89c1\u8bfe\u672cp668\u4e0b\u9762\uff09\uff0c\u6ce8\u610f\u6837\u672c\u603b\u6570\u4e0d\u7b97\u5dee\u4e3a\u96f6\u7684\u90a3\u51e0\u4e2a mean\u548cstandard error\u7684\u8ba1\u7b97\u65b9\u6cd5\u89c1p670 \u8ba1\u7b97effect size\u89c1p673 if p-value<0.05, then the two groups are significantly different","title":"\u539f\u7406"},{"location":"research/Non-parametric%20Tests/#kruskal-wallis-test","text":"comparing several conditions when different participants take part in each condition and the resulting data violate an assumption of one-way independent ANOVA \u548cwilcoxon rank-sum\u7c7b\u4f3c\uff0c\u4e00\u5f00\u59cb\u5148\u628a\u5404\u7ec4\u6570\u636e\u653e\u5728\u4e00\u8d77\u6392rank\uff0c\u7136\u548c\u628a\u5404\u7ec4\u7684rank\u6c42\u548c\u3002 \u5404\u7ec4\u7684test statistic H\u6709\u4e00\u4e2a\u5f88\u590d\u6742\u7684\u516c\u5f0f\uff0c\u89c1p767\u6700\u4e0b\u976215.1","title":"Kruskal-Wallis test"},{"location":"research/Non-parametric%20Tests/#post-hoc-test","text":"\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u4e24\u4e24\u6bd4\u8f83\uff0c\u90fd\u8fdb\u884c\u4e00\u6b21wilcoxon rank-sum test\uff0c\u516c\u5f0f\u89c1p681\u768415.2 R\u4e2d\u7684\u65b9\u6cd5\u89c1p683 if p-value<0.05, then the two groups are significantly different","title":"post hoc test"},{"location":"research/Non-parametric%20Tests/#the-jonckheere-terpstra-test","text":"\u548cKruskal-Wallis test\u7c7b\u4f3c\uff0c\u53ea\u662f\u5305\u62ec\u4e86the order of the groups\u662f\u5426\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002 R\u4e2d\u7684\u65b9\u6cd5\u89c1p685","title":"the Jonckheere-Terpstra test"},{"location":"research/Non-parametric%20Tests/#friedmans-test","text":"differences between conditions when there are more than two conditions and the same participants have been used in all conditions(each case contributes several scores to the data)+violated an assumption of one-way repeated-measures ANOVA Friedman's ANOVA \u9996\u5148\u628a\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u7684\u6570\u636e\u653e\u5728\u4e0d\u540c\u7684\u5217\u4e2d\uff0c\u7136\u540e\u5bf9 \u6bcf\u4e00\u884c \uff08\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u4e2aparticipants\uff09\u4e2d\u7684\u5217\u6392rank\uff08\u6bd4\u5982condition 2\u6700\u5c0f\uff0c\u90a3\u4e48\u5b83\u7684rank\u662f1\uff0c\u7b2c\u4e8c\u5c0f\u7684\u662fcondition 1\uff0c\u90a3\u4e48\u5b83\u7684rank\u5c31\u662f2\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\uff09 \u6700\u540e\uff0c\u5c06\u4e0d\u540ccondition\uff08\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u5217\uff09\u7684rank\u76f8\u52a0\u3002test statistics F_r \u7684\u516c\u5f0f\u8fd8\u662f\u5f88\u590d\u6742\uff0c\u89c1p689\u6700\u4e0a\u65b9 post hoc test\u7684\u65b9\u6cd5\u89c1p691\u768415.7.6. if p-value<0.05, then the two groups are significantly different","title":"Friedman's test"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/","text":"Privacy & Human Behavior in the Age of Information\u7b14\u8bb0 \u8bba\u6587\u539f\u6587\u51fa\u81eaSCIENCE VOL 347\uff0c\u4ee5\u4e0b\u4e3a\u9605\u8bfb\u7b14\u8bb0\u3002 main content: empirical research on privacy behavior Introduction \u80cc\u666f\uff1a\u539f\u672c\u53ea\u662f\u9650\u4e8e\u5c0f\u5708\u5b50\u7684\u3001\u4e0d\u53ef\u4fdd\u7559\u7684\u5185\u5bb9\u5982\u4eca\u90fd\u6709\u8ff9\u53ef\u5faa\uff0c\u4e2a\u4eba\u4fe1\u606f\u7684\u6536\u96c6\u4e0e\u5904\u7406\u53d8\u5f97\u666e\u904d\u3002 \u4e00\u65b9\u9762\uff0c\u4e0d\u8bba\u662f\u5bf9\u516c\u53f8\u8fd8\u662f\u5bf9\u4e2a\u4eba\uff0c\u4fe1\u606f\u7684\u6536\u96c6\u4e0e\u5904\u7406\u90fd\u4f1a\u5e26\u6765\u8bb8\u591a\u65b9\u4fbf\uff0c\u6bd4\u5982\u7528\u533b\u7597\u76f8\u5173\u7684\u5927\u6570\u636e\u6765\u7814\u53d1\u66f4\u6709\u6548\u7684\u836f\u7269\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u4e2a\u4eba\u4fe1\u606f\u7684\u6ee5\u7528\u53ef\u80fd\u4f1a\u5e26\u6765\u4e0d\u53ef\u4f30\u91cf\u7684\u5f71\u54cd\uff0c\u6bd4\u5982\u4fe1\u606f\u6b67\u89c6\u3001\u8206\u8bba\u64cd\u7eb5\u4e0e\u76d1\u89c6\u7b49\u3002 \u5173\u4e8e\u4eba\u4eec\u4fdd\u62a4\u4fe1\u606f\u7684\u80fd\u529b\u4e0e\u76f8\u5173\u516c\u5171\u653f\u7b56\u7684\u8ba8\u8bba\uff0c\u5982\u4eca\u6709\u4e24\u79cd\u9488\u950b\u76f8\u5bf9\u7684\u89c2\u70b9\uff1a\u7b2c\u4e00\u79cd\u4eba\u8ba4\u4e3a\u4eba\u4eec\u80fd\u591f\u6839\u636e\u81ea\u5df1\u7684\u51b3\u7b56\u6765\u4fdd\u62a4\u597d\u81ea\u5df1\u7684\u4fe1\u606f\u9690\u79c1\uff0c\u8fc7\u591a\u7684\u516c\u5171\u653f\u7b56\u53cd\u800c\u4f1a\u5e72\u6270\u4fe1\u606f\u4ea7\u4e1a\u5bf9\u4eba\u7c7b\u5e26\u6765\u7684\u6709\u76ca\u5f71\u54cd\uff1b\u53e6\u4e00\u79cd\u4eba\u8ba4\u4e3a\uff0c\u5728\u65e5\u76ca\u590d\u6742\u7684\u4fe1\u606f\u4e16\u754c\u4e2d\uff0c\u4eba\u4eec\u5f88\u96be\u6743\u8861\u5229\u5f0a\u3001\u81ea\u884c\u7ba1\u7406\u597d\u81ea\u5df1\u7684\u4fe1\u606f\u9690\u79c1\uff0c\u73b0\u6709\u7684\u4e00\u4e9b\u5de5\u5177\u5df2\u7ecf\u4e0d\u591f\u7528\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u9002\u5f53\u7684\u516c\u5171\u653f\u7b56\u4e0e\u673a\u6784\u5e94\u8be5\u4ecb\u5165\u5176\u4e2d\uff0c\u4ece\u800c\u6297\u8861\u5546\u4e1a\u56e2\u4f53\u548c\u653f\u5e9c\u90e8\u95e8\u5bf9\u4e8e\u4fe1\u606f\u7684\u6536\u96c6\u4e0e\u64cd\u7eb5\u3002 \u672c\u6587\u8bd5\u56fe\u63a2\u8ba8\u4e00\u4e9b\u5f71\u54cd\u4eba\u4eec\u4f5c\u51fa\u4fe1\u606f\u9690\u79c1\u51b3\u7b56\u7684\u56e0\u7d20\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u51b3\u7b56\u662f\u5982\u4f55\u5bfc\u81f4\u4fdd\u62a4\u6216\u8005\u8fdd\u53cd\u4fe1\u606f\u9690\u79c1\u5b89\u5168\u7684\u884c\u4e3a\u7684\u3002 \u63a2\u8ba8\u7684\u56e0\u7d20\u4e3b\u8981\u6709\u4e09\u4e2a\uff1a \u4eba\u4eec\u5728\u5404\u79cd\u9690\u79c1\u6743\u8861\u9762\u524d\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u4ee5\u53ca\u4eba\u4eec\u7684\u504f\u597d \u7531\u60c5\u5883\u51b3\u5b9a\u7684\u9690\u79c1\u504f\u597d\u2014\u2014\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u4f1a\u505a\u51fa\u4e0d\u540c\u7684\u4fe1\u606f\u5b89\u5168\u51b3\u7b56 \u4fe1\u606f\u9690\u79c1\u7684\u504f\u597d\u4f1a\u53d7\u5f88\u591a\u56e0\u7d20\u5f71\u54cd\uff0c\u56e0\u6b64\u5177\u6709\u4e00\u5b9a\u7684\u53ef\u5851\u6027 \u5f53\u7136\uff0c\u8fd9\u4e09\u4e2a\u56e0\u7d20\u4e92\u76f8\u5f71\u54cd\uff0c\u5c31\u56e0\u4e3a\u5bf9\u9690\u79c1\u95ee\u9898\u4e0d\u591f\u786e\u5b9a\uff0c\u6240\u4ee5\u4eba\u4eec\u503e\u5411\u4e8e\u4ece\u60c5\u5883\u4e2d\u5bfb\u627e\u7ebf\u7d22\u6765\u4f5c\u51fa\u51b3\u7b56\uff0c\u56e0\u6b64\u9690\u79c1\u504f\u597d\u662f\u7531\u60c5\u5883\u51b3\u5b9a\u7684\uff1b\u5982\u679c\u56e0\u6b64\u5bf9\u60c5\u5883\u52a0\u4ee5\u5e72\u6d89\uff0c\u90a3\u4e48\u4eba\u4eec\u7684\u4fe1\u606f\u504f\u597d\u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u56e0\u6b64\u5177\u6709\u53ef\u5851\u6027\u3002 Uncertainty \u4eba\u4eec\u4f1a\u901a\u8fc7\u79cd\u79cd\u624b\u6bb5\u5212\u5b9a\u9690\u79c1\u4e0e\u516c\u5f00\u7684\u754c\u9650\uff0c\u5e76\u4e14\u8fd9\u79cd\u624b\u6bb5\u662f\u81ea\u7136\u53d1\u751f\u7684\u3002\u4e0d\u8fc7\uff0c\u7269\u7406\u610f\u4e49\u4e0a\u7684\u754c\u9650\u5bb9\u6613\u5212\u5206\uff0c\u4f46\u4fe1\u606f\u5b89\u5168\u76f8\u5173\u7684\u8fb9\u754c\u5177\u6709\u6a21\u7cca\u6027\uff0c\u4eba\u4eec\u65e0\u6cd5\u77e5\u9053\u81ea\u5df1\u7684\u4fe1\u606f\u5b89\u5168\u662f\u5426\u3001\u4ec0\u4e48\u65f6\u5019\u3001\u88ab\u8c01\u3001\u5728\u54ea\u79cd\u7a0b\u5ea6\u4e0a\u4fb5\u72af\u3002 \u4fe1\u606f\u4e0d\u5bf9\u79f0\u4e0e\u4e0d\u5b8c\u6574 \u9020\u6210\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u7684\u7b2c\u4e00\u4e2a\u56e0\u7d20\u662f\u4fe1\u606f\u4e0d\u5bf9\u79f0\u4e0e\u4e0d\u5b8c\u6574\u3002\u73b0\u4ee3\u79d1\u6280\u4f7f\u4fe1\u606f\u7684\u6536\u96c6\u3001\u5904\u7406\u53d8\u5f97\u7528\u6237\u4e0d\u53ef\u89c1\uff0c\u4eba\u4eec\u5bf9\u81ea\u5df1\u7684\u4fe1\u606f\u88ab\u5176\u4ed6\u673a\u6784\u5229\u7528\u4e86\u591a\u5c11\u8fd9\u4ef6\u4e8b\u60c5\u6beb\u65e0\u6982\u5ff5\u3002 \u53e6\u5916\uff0c\u4eba\u4eec\u60f3\u8981\u5224\u5b9a\u81ea\u5df1\u7684\u67d0\u79cd\u4fe1\u606f\u9690\u79c1\u76f8\u5173\u7684\u884c\u4e3a\u5230\u5e95\u4f1a\u9020\u6210\u54ea\u4e9b\u540e\u679c\u4e5f\u5f88\u96be\u3002\u9996\u5148\uff0c\u4e00\u4e9b\u4fe1\u606f\u5b89\u5168\u9690\u60a3\u662f\u65e0\u5f62\u7684\uff0c\u6bd4\u5982\u4eba\u4eec\u53ef\u80fd\u4e0d\u77e5\u9053\u81ea\u5df1\u4fe1\u606f\u6cc4\u6f0f\u4f1a\u7ed9\u81ea\u5df1\u5e26\u6765\u591a\u5c11\u8d22\u4ea7\u4e0a\u7684\u635f\u5931\u3002\u5176\u6b21\uff0c\u9690\u79c1\u662f\u4e00\u628a\u53cc\u5203\u5251\uff0c\u5728\u635f\u5931\u5b83\u7684\u540c\u65f6\uff0c\u4e5f\u4f1a\u5f97\u5230\u4e00\u4e9b\u597d\u5904\uff0c\u4f8b\u5b50\u5c31\u4e0d\u63d0\u4e86\u3002 \u5982\u679c\u5c06\u67d0\u79cd\u4fe1\u606f\u5b89\u5168\u884c\u4e3a\u53ef\u80fd\u5e26\u6765\u7684\u635f\u5931\u4e0e\u597d\u5904\u900f\u660e\u5316\uff08\u5e76\u4e14\u5bb9\u6613\u7406\u89e3\uff09\u7684\u8bdd\uff0c\u80fd\u591f\u5f71\u54cd\u4eba\u4eec\u4fe1\u606f\u76f8\u5173\u7684\u51b3\u7b56\u3002 \u504f\u597d \u7b2c\u4e8c\u4e2a\u56e0\u7d20\u662f\u4eba\u4eec\u5bf9\u4e8e\u81ea\u5df1\u7684\u504f\u597d\u4e5f\u6709\u7740\u4e0d\u786e\u5b9a\u6027\u3002\u5373\u4f7f\u4eba\u4eec\u77e5\u9053\u4e86\u81ea\u5df1\u7684\u67d0\u79cd\u51b3\u7b56\u4f1a\u5bf9\u4fe1\u606f\u5b89\u5168\u9020\u6210\u5f71\u54cd\uff0c\u4ed6\u4eec\u4e5f\u5e76\u4e0d\u786e\u5b9a\u81ea\u5df1\u5230\u5e95\u8981\u4e0d\u8981\u8fd9\u4e48\u505a\u3001\u6216\u8005\u8fd9\u6837\u597d\u4e0d\u597d\u3002\u76f8\u5173\u7814\u7a76\u53d1\u73b0\u5176\u5b9e\u4eba\u4eec\u5bf9\u81ea\u5df1\u559c\u4e0d\u559c\u6b22\u67d0\u79cd\u5546\u54c1\u6216\u8005\u670d\u52a1\u3001\u751a\u81f3\u4eba\u90fd\u6ca1\u6709\u4e00\u4e2a\u660e\u786e\u7684\u6982\u5ff5\uff0c\u66f4\u4f55\u51b5\u81ea\u5df1\u7684\u9690\u79c1\u51b3\u7b56\u4e86\u3002 \u9996\u5148\uff0c \u4eba\u4eec\u7684\u6001\u5ea6\u4e0e\u884c\u4e3a\u4e4b\u95f4\u7ecf\u5e38\u6709\u7740\u4e0d\u786e\u5b9a\u6027 \uff0c\u5373\u4f7f\u4eba\u4eec\u6709\u7740\u5bf9\u9690\u79c1\u8b66\u60d5\u7684\u6001\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u4e5f\u672a\u5fc5\u4f1a\u505a\u51fa\u76f8\u5e94\u7684\u884c\u4e3a\u3002 \u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u91ca\u65b9\u6cd5\u662f\uff1a\u5e7f\u4e49\u4e0a\u7684\u300c\u5bf9\u9690\u79c1\u7684\u6001\u5ea6\u300d\u4e0e\u72ed\u4e49\u4e0a\u7684\u300c\u76f8\u5173\u7684\u610f\u56fe\u4e0e\u884c\u4e3a\u300d\u5e76\u4e0d\u4e00\u5b9a\u6210\u6b63\u76f8\u5173\uff0c\u4eba\u4eec\u53ef\u80fd\u8fd9\u4e48\u60f3\uff0c\u4f46\u8003\u8651\u5230\u7279\u5b9a\u7684\u60c5\u5883\u5e76\u4e0d\u4f1a\u91c7\u53d6\u76f8\u5e94\u884c\u4e3a\u3002\u4f46\u8fd9\u4e2a\u5047\u8bf4\u6709\u4e00\u5b9a\u95ee\u9898\u2014\u2014\u5b83\u65e0\u6cd5\u89e3\u91ca\u4e00\u4e9b\u6001\u5ea6\u4e0e\u884c\u4e3a\u5448\u6b63\u76f8\u5173\u7684\u5176\u4ed6\u60c5\u51b5\uff0c\u5e76\u4e14\u6ca1\u6709\u8003\u8651\u5230\u9519\u8bef\u4f30\u7b97\u5229\u5f0a\u7684\u60c5\u51b5\u3002 \u5176\u6b21\uff0c \u4eba\u4eec\u5bf9\u4e8e\u300c\u7528\u91d1\u94b1\u6765\u91cf\u5316\u9690\u79c1\u300d\u8fd9\u4ef6\u4e8b\u4e5f\u5e76\u4e0d\u786e\u5b9a \u3002\u5f53\u7136\u4e86\uff0c\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u63a8\u65ad\u5404\u79cd\u9690\u79c1\u884c\u4e3a\u7684\u300c\u4f30\u503c\u300d\u4f1a\u53d7\u5230\u5404\u79cd\u5404\u6837\u7684\u56e0\u7d20\u5f71\u54cd\uff0c\u5c24\u5176\u73b0\u5728\u7684\u60c5\u51b5\u662f\uff0c\u4fe1\u606f\u5206\u4eab\u76f8\u5173\u7684\u79d1\u6280\u4ea7\u54c1\uff08\u6bd4\u5982\u5404\u79cd\u793e\u4ea4\u5a92\u4f53\uff09\u53d1\u5c55\u6bd4\u9690\u79c1\u4fdd\u62a4\u7684\u79d1\u6280\u4ea7\u54c1\u8981\u53d1\u5c55\u5f97\u66f4\u597d\uff0c\u4ee5\u81f3\u4e8e\u4eba\u4eec\u5bb9\u6613\u4f4e\u4f30\u9690\u79c1\u76f8\u5173\u7684\u56e0\u7d20\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u4eba\u4eec\u5bf9\u9690\u79c1\u7684\u4f30\u8ba1\u53ef\u4ee5\u5177\u6709\u8bf1\u5bfc\u6027\uff0c\u56e0\u6b64\u4e5f\u672a\u5fc5\u53ef\u4fe1\u3002\u6839\u636e\u7814\u7a76\uff0c\u4eba\u4eec\u53ea\u6709\u5f97\u5230\u9690\u79c1\u4e86\u4e4b\u540e\u624d\u4f1a\u73cd\u60dc\uff0c\u4f46\u8981\u662f\u6ca1\u6709\u8fd9\u4e2a\u4e1c\u897f\u5c31\u57fa\u672c\u4e0a\u4e5f\u4e0d\u4f1a\u6ce8\u610f\u5b83\u4e86\uff08\u3002\u4e00\u4e9b\u4e0d\u6cd5\u5546\u5bb6\u53ef\u80fd\u4f1a\u8fd9\u4e48\u8bf1\u5bfc\u7528\u6237\u4e00\u5f00\u59cb\u5c31\u4ea4\u51fa\u9690\u79c1\uff0c\u5e76\u4e14\u4e0d\u518d\u53bb\u8003\u8651\u5b83 \u6700\u540e\uff0c\u5176\u4ed6\u7684\u793e\u4f1a\u9700\u6c42\uff0c\u6bd4\u65b9\u8bf4\u4e0e\u522b\u4eba\u5206\u4eab\u3001\u66b4\u9732\u81ea\u5df1\u7684\u4e00\u4e9b\u4fe1\u606f\u7b49\uff0c\u662f\u4f1a\u548c\u9690\u79c1\u4fdd\u62a4\u76f8\u77db\u76fe\u7684\uff0c\u800c\u5b83\u4eec\u4e5f\u540c\u6837\u91cd\u8981\u3002\u4e00\u65b9\u9762\u9002\u5f53\u7684\u9690\u79c1\u8ba9\u4eba\u5b89\u5fc3\uff0c\u53e6\u4e00\u65b9\u9762\u9002\u5f53\u7684\u66b4\u9732\u4e5f\u8ba9\u4eba\u5b89\u5fc3\uff0c\u4eba\u7c7b\u771f\u662f\u4e0d\u597d\u4f3a\u5019\uff08\u3002 Context-dependence \u6b63\u5982\u524d\u6587\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5f53\u4eba\u4eec\u4e0d\u786e\u5b9a\u81ea\u5df1\u7684\u504f\u597d\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u503e\u5411\u4e8e\u4ece\u60c5\u5883\u4e2d\u5bfb\u627e\u7ebf\u7d22\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u5bf9\u4e8e\u9690\u79c1\u53ef\u80fd\u6709\u7740\u4e0d\u540c\u7684\u8003\u8651\u3002\u5e76\u4e14\uff0c\u6211\u4eec\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u300c\u516c\u5171\u300d\u548c\u300c\u9690\u79c1\u300d\u7684\u754c\u9650\u4e5f\u5e76\u4e0d\u660e\u786e\u2014\u2014\u867d\u7136\u5927\u90e8\u5206\u65f6\u95f4\u53ea\u4f1a\u628a\u79d8\u5bc6\u544a\u8bc9\u81ea\u5df1\u5173\u7cfb\u6700\u8fd1\u7684\u4eba\uff0c\u4f46\u6709\u7684\u65f6\u5019\u5374\u53ea\u548c\u964c\u751f\u4eba\u8bf4\u3002 Sensible Behavior \u4eba\u4eec\u5bf9\u4e8e\u9690\u79c1\u7684\u5224\u65ad\u6709\u65f6\u662f\u300c\u5408\u60c5\u5408\u7406\u300d\u7684\uff0c\u6bd4\u5982\u5f53\u653f\u5e9c\u51fa\u53f0\u4e86\u76f8\u5e94\u6cd5\u89c4\u4e4b\u540e\uff0c\u4eba\u4eec\u4f1a\u66f4\u52a0\u5bb9\u6613\u4fe1\u4efb\u5404\u79cd\u6536\u96c6\u4fe1\u606f\u7684\u673a\u6784\u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u7ebf\u7d22\u4e5f\u4f1a\u6709\u574f\u5904\uff0c\u6709\u4e9b\u65f6\u5019\u4eba\u4eec\u5728\u67d0\u79cd\u7279\u5b9a\u73af\u5883\u4e0b\u53ef\u80fd\u4f1a\u65e0\u610f\u8bc6\u5730\u4ea4\u51fa\u81ea\u5df1\u7684\u9690\u79c1\u3002 Culture and Behavior of Other People \u4e24\u79cd\u65b9\u5f0f\uff1adescriptive norms or via reciprocity \u5f53\u5468\u56f4\u7684\u4eba\u90fd\u66b4\u9732\u81ea\u5df1\u7684\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u4eba\u4eec\u4f1a\u66f4\u503e\u5411\u4e8e\u968f\u5927\u6d41\u4e5f\u8fd9\u4e48\u505a\uff1b\u5f53\u5bf9\u65b9\u66b4\u9732\u4e86\u4e00\u4e9b\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u4eba\u4eec\u4e5f\u4f1a\u968f\u4e4b\u66b4\u9732\u76f8\u5e94\u7684\u4fe1\u606f\uff08\u5c3d\u7ba1\u5bf9\u65b9\u53ef\u80fd\u53ea\u662f\u4e2aAI\uff09\u3002\u8fd9\u4e5f\u662f\u7f51\u7edc\u4e0a\u4e3a\u4ec0\u4e48\u90a3\u4e48\u591a\u4eba\u516c\u5f00\u81ea\u5df1\u4fe1\u606f\u7684\u539f\u56e0\u3002 \u53e6\u5916\uff0c\u4ed6\u4eba\u5bf9\u4e8e\u4fe1\u606f\u7684\u6001\u5ea6\u4e5f\u4f1a\u5f71\u54cd\u5230\u81ea\u5df1\u7684\u9690\u79c1\uff0c\u56e0\u4e3a\u4e00\u65e6\u4f60\u5c06\u67d0\u79cd\u4fe1\u606f\u544a\u8bc9\u522b\u4eba\uff0c\u4ed6/\u5979\u5c31\u4f1a\u548c\u4f60\u5171\u540c\u62e5\u6709\u8be5\u4fe1\u606f\uff0c\u8fd9\u5c31\u66f4\u52a0\u6a21\u7cca\u4e86\u9690\u79c1\u548c\u516c\u5f00\u7684\u8fb9\u754c\u3002 \u540c\u6837\u5730\uff0c\u5bf9\u4e8e\u9690\u79c1\u7684\u8003\u8651\u4e5f\u4f1a\u4e0e\u7ecf\u9a8c\u6709\u5173\uff0c\u6bd4\u5982\u770b\u5230\u76d1\u63a7\u6444\u50cf\u5934\u5c31\u4f1a\u672c\u80fd\u5730\u611f\u5230\u8b66\u60d5\u3002\u4f46\u540c\u65f6\u5b83\u4e5f\u662f\u6709\u9002\u5e94\u6027\u7684\u2014\u2014\u8981\u662f\u76d1\u63a7\u6444\u50cf\u5934\u5929\u5929\u90fd\u653e\u5728\u90a3\u91cc\uff0c\u90a3\u4eba\u4eec\u4e5f\u4f1a\u9010\u6e10\u653e\u677e\u8b66\u60d5\u3002\u56e0\u6b64\u4eba\u4eec\u53ef\u80fd\u4f1a\u9010\u6e10\u4e60\u60ef\u4fe1\u606f\u65f6\u4ee3\u5e26\u6765\u7684\u9690\u79c1\u4fb5\u72af\u3002 \u56e0\u4e3a\u4fe1\u606f\u65f6\u4ee3\u9690\u79c1\u7684\u754c\u9650\u9010\u6e10\u6a21\u7cca\uff0c\u6240\u4ee5\u533a\u5206\u7ebf\u4e0a\u7ebf\u4e0b\u3001\u6ee1\u8db3\u6bcf\u4e00\u4e2a\u4eba\u5bf9\u81ea\u5df1\u7684\u9884\u671f\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u6211\u4eec\u4e0d\u518d\u80fd\u591f\u7cbe\u786e\u5730\u63a7\u5236\u4f4f\u81ea\u5df1\u53d1\u5e03\u7684\u4fe1\u606f\u7684\u76ee\u6807\u7fa4\u4f17\uff0c\u8fd9\u4e5f\u4f1a\u5e26\u6765\u4e00\u4e9b\u5173\u4e8e\u5f53\u4ee3\u4fe1\u606f\u79d1\u6280\u7684\u4e00\u4e9b\u62c5\u5fe7\u3002 Malleability and Influence \u5c31\u56e0\u4e3a\u5927\u90e8\u5206\u4eba\u5e76\u6ca1\u6709\u610f\u8bc6\u5230\u81ea\u5df1\u7684\u9690\u79c1\u6289\u62e9\u4e0e\u60c5\u5883\u76f8\u5173\uff0c\u4f46\u5f88\u591a\u673a\u6784\u548c\u7ec4\u7ec7\u6ce8\u610f\u5230\u4e86\uff0c\u6240\u4ee5\u4fe1\u606f\u6536\u96c6\u4e0e\u5229\u7528\u6210\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u4ea7\u4e1a\uff08\u3002\u4ed6\u4eec\u4f1a\u5229\u7528\u4eba\u4eec\u9690\u79c1\u503e\u5411\u7684\u53ef\u5851\u6027\u6765\uff08\u8bf1\u5bfc\uff09\u4ea4\u51fa\u6570\u636e\u3002 \u9ed8\u8ba4\u8bbe\u7f6e \u4eba\u4eec\u4e00\u822c\u90fd\u4e0d\u4f1a\u6539\u81ea\u5df1\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u800c\u4e14\u503e\u5411\u4e8e\u8ba4\u4e3a\u9ed8\u8ba4\u8bbe\u7f6e\u662f\u7cfb\u7edf\u63a8\u8350\u7684\u6700\u4f18\u89e3\u3002\u56e0\u6b64\u5982\u679c\u793e\u4ea4\u5a92\u4f53\u9ed8\u8ba4\u516c\u5f00\u4fe1\u606f\uff0c\u90a3\u4eba\u4eec\u4e5f\u4f1a\u66f4\u6709\u53ef\u80fd\u516c\u5f00\u81ea\u5df1\u7684\u4fe1\u606f\u3002 \u8bf1\u5bfc\u7528\u6237\u516c\u5f00\u4fe1\u606f \u6bd4\u5982\u6709\u8bf1\u5bfc\u6027\u7684\u7528\u6237\u754c\u9762\u3002\u6216\u8005\u5728\u6536\u96c6\u4fe1\u606f\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u53d1\u51fa\u8b66\u544a\uff0c\u5373\u4f7f\u53d1\u51fa\u8b66\u544a\u4e86\u4e5f\u4f1a\u987a\u4fbf\u641e\u70b9\u5149\u987e\u4ec0\u4e48\u7684\u8ba9\u4eba\u4eec\u5bf9\u8b66\u544a\u672c\u8eab\u5370\u8c61\u4e0d\u592a\u597d\u3002 \u524d\u63d0\u6761\u4ef6 \u6709\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u4e00\u70b9\u70b9\u5e72\u9884\u8d62\u5f97\u7528\u6237\u7684\u4fe1\u4efb\uff0c\u4ed6\u4eec\u5c31\u4f1a\u5bf9\u4fe1\u606f\u5b89\u5168\u7684\u8b66\u60d5\u6027\u653e\u677e\uff0c\u6bd4\u5982\u516c\u5e03\u4e00\u4e2a\u6d88\u8d39\u8005\u5e76\u4e0d\u4f1a\u4ed4\u7ec6\u770b\u7684\u9690\u79c1\u4fdd\u62a4\u653f\u7b56\uff0c\u7528\u6237\u5c31\u4f1a\u300c\u653e\u5fc3\u5730\u300d\u5c06\u6570\u636e\u4ea4\u7ed9\u7b2c\u4e09\u65b9\u3002 \u53ef\u63a7\u6027 \u57fa\u672c\u4e0a\u6240\u6709\u7684\u76f8\u5173\u4ea7\u54c1\u90fd\u4f1a\u8ba9\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u81ea\u5df1\u4fe1\u606f\u7684\u516c\u5f00\u8303\u56f4\uff0c\u800c\u4e14\u4e00\u822c\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u7684\u5fc5\u5907\u63aa\u65bd\u3002\u7136\u800c\u5c06\u51b3\u5b9a\u6743\u4ea4\u7ed9\u7528\u6237\u6709\u65f6\u4f1a\u4ea7\u751f\u53cd\u4f5c\u7528\u3002\u7814\u7a76\u53d1\u73b0\u5f53\u7528\u6237\u5728\u4fe1\u606f\u516c\u5f00\u8303\u56f4\u4e2d\u6709\u66f4\u591a\u7684\u9009\u62e9\u65f6\uff0c\u4ed6\u4eec\u53cd\u800c\u4f1a\u503e\u5411\u4e8e\u516c\u5f00\u66f4\u591a\u7684\u4fe1\u606f\u3002 \u4fe1\u606f\u900f\u660e\u5316 \u548c\u53ef\u63a7\u6027\u7c7b\u4f3c\uff0c\u5b83\u4e00\u822c\u4e5f\u88ab\u8ba4\u4e3a\u5bf9\u4fdd\u62a4\u7528\u6237\u7684\u9690\u79c1\u6709\u5229\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u5374\u6210\u4e86\u9e21\u808b\u3002\u6bd5\u7adf\u6ca1\u6709\u51e0\u4e2a\u7528\u6237\u4f1a\u771f\u7684\u9605\u8bfb\u6761\u6b3e\uff0c\u5e76\u4e14\u5f04\u660e\u767d\u90a3\u4e9b\u7f51\u7ad9\u548c\u670d\u52a1\u662f\u5982\u4f55\u6536\u96c6\u5e76\u4e14\u5229\u7528\u81ea\u5df1\u7684\u6570\u636e\u7684\u3002\u66f4\u4f55\u51b5\u5373\u4f7f\u60f3\u8981\u8bfb\uff0c\u4e5f\u5f88\u96be\u5f04\u61c2\uff0c\u53cd\u800c\u662f\u6d6a\u8d39\u65f6\u95f4\u3002 \u4e0d\u8fc7\uff0c\u4e4b\u524d\u7528\u300c\u8bf1\u5bfc\u300d\u8fd9\u4e2a\u8bcd\u597d\u50cf\u7b97\u8d2c\u4e49\uff0c\u4f46\u4e0d\u662f\u6240\u6709\u7684\u53ef\u5851\u6027\u4e0e\u53ef\u64cd\u4f5c\u6027\u90fd\u662f\u8d1f\u9762\u7684\u3002\u7136\u800c\u5982\u679c\u4f7f\u7528\u5f97\u5f53\uff0c\u53ef\u5851\u6027\u53ef\u4ee5\u5bf9\u793e\u4f1a\u6709\u7740\u79ef\u6781\u7684\u5f71\u54cd\uff0c\u6bd4\u5982\u8ba9\u7528\u6237\u611f\u77e5\u5230\u88ab\u76d1\u89c6\u80fd\u591f\u8ba9\u7528\u6237\u65e0\u610f\u8bc6\u5730\u505a\u51fa\u66f4\u6709\u5229\u4e8e\u793e\u4f1a\u7684\u884c\u4e3a\u3002\u76f8\u540c\u5730\uff0c\u7f51\u7edc\u5e26\u6765\u7684\u53bb\u4eba\u683c\u5316\u4e5f\u80fd\u591f\u7528\u6765\u6536\u96c6\u51c6\u786e\u6027\u66f4\u9ad8\u7684\u516c\u5171\u6570\u636e\uff08\u6bd4\u5982\u4eba\u4eec\u5728\u5b9e\u540d\u72b6\u6001\u4e0b\u4e0d\u592a\u613f\u610f\u900f\u9732\u7684\u6570\u636e\uff09\u3002 Conclusion \u5728\u4e0d\u540c\u7684\u6587\u5316\u4e2d\uff0c\u5173\u4e8e\u9690\u79c1\u7684\u5171\u8bc6\u548c\u884c\u4e3a\u662f\u4e0d\u540c\u7684\uff1b\u7136\u800c\uff0c\u4e0d\u8bba\u5728\u54ea\u79cd\u6587\u5316\u4e2d\uff0c\u5982\u4f55\u63a7\u5236\u9690\u79c1\u4e0e\u516c\u5f00\u7684\u754c\u9650\u662f\u6bcf\u4e00\u4e2a\u4eba\u90fd\u9700\u8981\u6ce8\u610f\u7684\uff0c\u800c\u8fd9\u4e2a\u95ee\u9898\u5728\u4fe1\u606f\u65f6\u4ee3\u66f4\u52a0\u91cd\u8981\uff08\u63a7\u5236\u8fd9\u4e2a\u7684\u80fd\u529b\u5df2\u7ecf\u8d85\u51fa\u4e86\u6211\u4eec\u7684\u751f\u7406\u6781\u9650\uff09\u3002 \u8bba\u516c\u5171\u653f\u7b56\u80fd\u591f\u8d77\u5230\u4ec0\u4e48\u4f5c\u7528\uff1f \u6839\u636e\u7814\u7a76\u53d1\u73b0\uff0c\u5355\u7eaf\u5730\u300c\u901a\u77e5\u300d\u6216\u8005\u300c\u8d4b\u4e88\u300d\u7528\u6237\u9690\u79c1\u76f8\u5173\u7684\u6743\u529b\uff0c\u5df2\u7ecf\u4e0d\u80fd\u63d0\u4f9b\u8db3\u591f\u7684\u4fdd\u62a4\u4e86\u3002\u5c24\u5176\u662f\u300c\u63a7\u5236\u300d\u548c\u300c\u4e0d\u900f\u660e\u5ea6\u300d\uff0c\u4e8b\u5b9e\u4e0a\u6548\u679c\u5e76\u6ca1\u6709\u90a3\u4e48\u597d\uff0c\u751a\u81f3\u8fd8\u6709\u53cd\u4f5c\u7528\u3002 \u5982\u679c\u60f3\u8981\u6700\u5927\u7a0b\u5ea6\u4e0a\u4fdd\u62a4\u7528\u6237\u7684\u9690\u79c1\uff0c\u5f88\u9057\u61be\u5730\uff0c\u5c31\u8981\u8ba9\u7528\u6237\u505a\u5c3d\u53ef\u80fd\u5c11\u7684\u7406\u6027\u51b3\u5b9a\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u4e00\u5957\u4fdd\u62a4\u76f8\u5173\u7684\u57fa\u672c\u51c6\u5219\uff0c\u6765\u534f\u52a9\u7528\u6237\u5728\u5f53\u524d\u7684\u4fe1\u606f\u73af\u5883\u4e0b\u505a\u51fa\u6289\u62e9\uff0c\u529b\u56fe\u5b9e\u73b0\u7528\u6237\u3001\u516c\u6c11\u4e0e\u516c\u53f8\u3001\u4fe1\u606f\u6301\u6709\u8005\u4e4b\u95f4\u7684\u6743\u529b\u5bf9\u7b49\u3002","title":"Privacy & Human Behavior in the Age of Information\u7b14\u8bb0"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#privacy-human-behavior-in-the-age-of-information","text":"\u8bba\u6587\u539f\u6587\u51fa\u81eaSCIENCE VOL 347\uff0c\u4ee5\u4e0b\u4e3a\u9605\u8bfb\u7b14\u8bb0\u3002 main content: empirical research on privacy behavior","title":"Privacy &amp; Human Behavior in the Age of Information\u7b14\u8bb0"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#introduction","text":"\u80cc\u666f\uff1a\u539f\u672c\u53ea\u662f\u9650\u4e8e\u5c0f\u5708\u5b50\u7684\u3001\u4e0d\u53ef\u4fdd\u7559\u7684\u5185\u5bb9\u5982\u4eca\u90fd\u6709\u8ff9\u53ef\u5faa\uff0c\u4e2a\u4eba\u4fe1\u606f\u7684\u6536\u96c6\u4e0e\u5904\u7406\u53d8\u5f97\u666e\u904d\u3002 \u4e00\u65b9\u9762\uff0c\u4e0d\u8bba\u662f\u5bf9\u516c\u53f8\u8fd8\u662f\u5bf9\u4e2a\u4eba\uff0c\u4fe1\u606f\u7684\u6536\u96c6\u4e0e\u5904\u7406\u90fd\u4f1a\u5e26\u6765\u8bb8\u591a\u65b9\u4fbf\uff0c\u6bd4\u5982\u7528\u533b\u7597\u76f8\u5173\u7684\u5927\u6570\u636e\u6765\u7814\u53d1\u66f4\u6709\u6548\u7684\u836f\u7269\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u4e2a\u4eba\u4fe1\u606f\u7684\u6ee5\u7528\u53ef\u80fd\u4f1a\u5e26\u6765\u4e0d\u53ef\u4f30\u91cf\u7684\u5f71\u54cd\uff0c\u6bd4\u5982\u4fe1\u606f\u6b67\u89c6\u3001\u8206\u8bba\u64cd\u7eb5\u4e0e\u76d1\u89c6\u7b49\u3002 \u5173\u4e8e\u4eba\u4eec\u4fdd\u62a4\u4fe1\u606f\u7684\u80fd\u529b\u4e0e\u76f8\u5173\u516c\u5171\u653f\u7b56\u7684\u8ba8\u8bba\uff0c\u5982\u4eca\u6709\u4e24\u79cd\u9488\u950b\u76f8\u5bf9\u7684\u89c2\u70b9\uff1a\u7b2c\u4e00\u79cd\u4eba\u8ba4\u4e3a\u4eba\u4eec\u80fd\u591f\u6839\u636e\u81ea\u5df1\u7684\u51b3\u7b56\u6765\u4fdd\u62a4\u597d\u81ea\u5df1\u7684\u4fe1\u606f\u9690\u79c1\uff0c\u8fc7\u591a\u7684\u516c\u5171\u653f\u7b56\u53cd\u800c\u4f1a\u5e72\u6270\u4fe1\u606f\u4ea7\u4e1a\u5bf9\u4eba\u7c7b\u5e26\u6765\u7684\u6709\u76ca\u5f71\u54cd\uff1b\u53e6\u4e00\u79cd\u4eba\u8ba4\u4e3a\uff0c\u5728\u65e5\u76ca\u590d\u6742\u7684\u4fe1\u606f\u4e16\u754c\u4e2d\uff0c\u4eba\u4eec\u5f88\u96be\u6743\u8861\u5229\u5f0a\u3001\u81ea\u884c\u7ba1\u7406\u597d\u81ea\u5df1\u7684\u4fe1\u606f\u9690\u79c1\uff0c\u73b0\u6709\u7684\u4e00\u4e9b\u5de5\u5177\u5df2\u7ecf\u4e0d\u591f\u7528\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u9002\u5f53\u7684\u516c\u5171\u653f\u7b56\u4e0e\u673a\u6784\u5e94\u8be5\u4ecb\u5165\u5176\u4e2d\uff0c\u4ece\u800c\u6297\u8861\u5546\u4e1a\u56e2\u4f53\u548c\u653f\u5e9c\u90e8\u95e8\u5bf9\u4e8e\u4fe1\u606f\u7684\u6536\u96c6\u4e0e\u64cd\u7eb5\u3002 \u672c\u6587\u8bd5\u56fe\u63a2\u8ba8\u4e00\u4e9b\u5f71\u54cd\u4eba\u4eec\u4f5c\u51fa\u4fe1\u606f\u9690\u79c1\u51b3\u7b56\u7684\u56e0\u7d20\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u51b3\u7b56\u662f\u5982\u4f55\u5bfc\u81f4\u4fdd\u62a4\u6216\u8005\u8fdd\u53cd\u4fe1\u606f\u9690\u79c1\u5b89\u5168\u7684\u884c\u4e3a\u7684\u3002 \u63a2\u8ba8\u7684\u56e0\u7d20\u4e3b\u8981\u6709\u4e09\u4e2a\uff1a \u4eba\u4eec\u5728\u5404\u79cd\u9690\u79c1\u6743\u8861\u9762\u524d\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u4ee5\u53ca\u4eba\u4eec\u7684\u504f\u597d \u7531\u60c5\u5883\u51b3\u5b9a\u7684\u9690\u79c1\u504f\u597d\u2014\u2014\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u4f1a\u505a\u51fa\u4e0d\u540c\u7684\u4fe1\u606f\u5b89\u5168\u51b3\u7b56 \u4fe1\u606f\u9690\u79c1\u7684\u504f\u597d\u4f1a\u53d7\u5f88\u591a\u56e0\u7d20\u5f71\u54cd\uff0c\u56e0\u6b64\u5177\u6709\u4e00\u5b9a\u7684\u53ef\u5851\u6027 \u5f53\u7136\uff0c\u8fd9\u4e09\u4e2a\u56e0\u7d20\u4e92\u76f8\u5f71\u54cd\uff0c\u5c31\u56e0\u4e3a\u5bf9\u9690\u79c1\u95ee\u9898\u4e0d\u591f\u786e\u5b9a\uff0c\u6240\u4ee5\u4eba\u4eec\u503e\u5411\u4e8e\u4ece\u60c5\u5883\u4e2d\u5bfb\u627e\u7ebf\u7d22\u6765\u4f5c\u51fa\u51b3\u7b56\uff0c\u56e0\u6b64\u9690\u79c1\u504f\u597d\u662f\u7531\u60c5\u5883\u51b3\u5b9a\u7684\uff1b\u5982\u679c\u56e0\u6b64\u5bf9\u60c5\u5883\u52a0\u4ee5\u5e72\u6d89\uff0c\u90a3\u4e48\u4eba\u4eec\u7684\u4fe1\u606f\u504f\u597d\u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u56e0\u6b64\u5177\u6709\u53ef\u5851\u6027\u3002","title":"Introduction"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#uncertainty","text":"\u4eba\u4eec\u4f1a\u901a\u8fc7\u79cd\u79cd\u624b\u6bb5\u5212\u5b9a\u9690\u79c1\u4e0e\u516c\u5f00\u7684\u754c\u9650\uff0c\u5e76\u4e14\u8fd9\u79cd\u624b\u6bb5\u662f\u81ea\u7136\u53d1\u751f\u7684\u3002\u4e0d\u8fc7\uff0c\u7269\u7406\u610f\u4e49\u4e0a\u7684\u754c\u9650\u5bb9\u6613\u5212\u5206\uff0c\u4f46\u4fe1\u606f\u5b89\u5168\u76f8\u5173\u7684\u8fb9\u754c\u5177\u6709\u6a21\u7cca\u6027\uff0c\u4eba\u4eec\u65e0\u6cd5\u77e5\u9053\u81ea\u5df1\u7684\u4fe1\u606f\u5b89\u5168\u662f\u5426\u3001\u4ec0\u4e48\u65f6\u5019\u3001\u88ab\u8c01\u3001\u5728\u54ea\u79cd\u7a0b\u5ea6\u4e0a\u4fb5\u72af\u3002","title":"Uncertainty"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#_1","text":"\u9020\u6210\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u7684\u7b2c\u4e00\u4e2a\u56e0\u7d20\u662f\u4fe1\u606f\u4e0d\u5bf9\u79f0\u4e0e\u4e0d\u5b8c\u6574\u3002\u73b0\u4ee3\u79d1\u6280\u4f7f\u4fe1\u606f\u7684\u6536\u96c6\u3001\u5904\u7406\u53d8\u5f97\u7528\u6237\u4e0d\u53ef\u89c1\uff0c\u4eba\u4eec\u5bf9\u81ea\u5df1\u7684\u4fe1\u606f\u88ab\u5176\u4ed6\u673a\u6784\u5229\u7528\u4e86\u591a\u5c11\u8fd9\u4ef6\u4e8b\u60c5\u6beb\u65e0\u6982\u5ff5\u3002 \u53e6\u5916\uff0c\u4eba\u4eec\u60f3\u8981\u5224\u5b9a\u81ea\u5df1\u7684\u67d0\u79cd\u4fe1\u606f\u9690\u79c1\u76f8\u5173\u7684\u884c\u4e3a\u5230\u5e95\u4f1a\u9020\u6210\u54ea\u4e9b\u540e\u679c\u4e5f\u5f88\u96be\u3002\u9996\u5148\uff0c\u4e00\u4e9b\u4fe1\u606f\u5b89\u5168\u9690\u60a3\u662f\u65e0\u5f62\u7684\uff0c\u6bd4\u5982\u4eba\u4eec\u53ef\u80fd\u4e0d\u77e5\u9053\u81ea\u5df1\u4fe1\u606f\u6cc4\u6f0f\u4f1a\u7ed9\u81ea\u5df1\u5e26\u6765\u591a\u5c11\u8d22\u4ea7\u4e0a\u7684\u635f\u5931\u3002\u5176\u6b21\uff0c\u9690\u79c1\u662f\u4e00\u628a\u53cc\u5203\u5251\uff0c\u5728\u635f\u5931\u5b83\u7684\u540c\u65f6\uff0c\u4e5f\u4f1a\u5f97\u5230\u4e00\u4e9b\u597d\u5904\uff0c\u4f8b\u5b50\u5c31\u4e0d\u63d0\u4e86\u3002 \u5982\u679c\u5c06\u67d0\u79cd\u4fe1\u606f\u5b89\u5168\u884c\u4e3a\u53ef\u80fd\u5e26\u6765\u7684\u635f\u5931\u4e0e\u597d\u5904\u900f\u660e\u5316\uff08\u5e76\u4e14\u5bb9\u6613\u7406\u89e3\uff09\u7684\u8bdd\uff0c\u80fd\u591f\u5f71\u54cd\u4eba\u4eec\u4fe1\u606f\u76f8\u5173\u7684\u51b3\u7b56\u3002","title":"\u4fe1\u606f\u4e0d\u5bf9\u79f0\u4e0e\u4e0d\u5b8c\u6574"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#_2","text":"\u7b2c\u4e8c\u4e2a\u56e0\u7d20\u662f\u4eba\u4eec\u5bf9\u4e8e\u81ea\u5df1\u7684\u504f\u597d\u4e5f\u6709\u7740\u4e0d\u786e\u5b9a\u6027\u3002\u5373\u4f7f\u4eba\u4eec\u77e5\u9053\u4e86\u81ea\u5df1\u7684\u67d0\u79cd\u51b3\u7b56\u4f1a\u5bf9\u4fe1\u606f\u5b89\u5168\u9020\u6210\u5f71\u54cd\uff0c\u4ed6\u4eec\u4e5f\u5e76\u4e0d\u786e\u5b9a\u81ea\u5df1\u5230\u5e95\u8981\u4e0d\u8981\u8fd9\u4e48\u505a\u3001\u6216\u8005\u8fd9\u6837\u597d\u4e0d\u597d\u3002\u76f8\u5173\u7814\u7a76\u53d1\u73b0\u5176\u5b9e\u4eba\u4eec\u5bf9\u81ea\u5df1\u559c\u4e0d\u559c\u6b22\u67d0\u79cd\u5546\u54c1\u6216\u8005\u670d\u52a1\u3001\u751a\u81f3\u4eba\u90fd\u6ca1\u6709\u4e00\u4e2a\u660e\u786e\u7684\u6982\u5ff5\uff0c\u66f4\u4f55\u51b5\u81ea\u5df1\u7684\u9690\u79c1\u51b3\u7b56\u4e86\u3002 \u9996\u5148\uff0c \u4eba\u4eec\u7684\u6001\u5ea6\u4e0e\u884c\u4e3a\u4e4b\u95f4\u7ecf\u5e38\u6709\u7740\u4e0d\u786e\u5b9a\u6027 \uff0c\u5373\u4f7f\u4eba\u4eec\u6709\u7740\u5bf9\u9690\u79c1\u8b66\u60d5\u7684\u6001\u5ea6\uff0c\u4e8b\u5b9e\u4e0a\u4e5f\u672a\u5fc5\u4f1a\u505a\u51fa\u76f8\u5e94\u7684\u884c\u4e3a\u3002 \u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u91ca\u65b9\u6cd5\u662f\uff1a\u5e7f\u4e49\u4e0a\u7684\u300c\u5bf9\u9690\u79c1\u7684\u6001\u5ea6\u300d\u4e0e\u72ed\u4e49\u4e0a\u7684\u300c\u76f8\u5173\u7684\u610f\u56fe\u4e0e\u884c\u4e3a\u300d\u5e76\u4e0d\u4e00\u5b9a\u6210\u6b63\u76f8\u5173\uff0c\u4eba\u4eec\u53ef\u80fd\u8fd9\u4e48\u60f3\uff0c\u4f46\u8003\u8651\u5230\u7279\u5b9a\u7684\u60c5\u5883\u5e76\u4e0d\u4f1a\u91c7\u53d6\u76f8\u5e94\u884c\u4e3a\u3002\u4f46\u8fd9\u4e2a\u5047\u8bf4\u6709\u4e00\u5b9a\u95ee\u9898\u2014\u2014\u5b83\u65e0\u6cd5\u89e3\u91ca\u4e00\u4e9b\u6001\u5ea6\u4e0e\u884c\u4e3a\u5448\u6b63\u76f8\u5173\u7684\u5176\u4ed6\u60c5\u51b5\uff0c\u5e76\u4e14\u6ca1\u6709\u8003\u8651\u5230\u9519\u8bef\u4f30\u7b97\u5229\u5f0a\u7684\u60c5\u51b5\u3002 \u5176\u6b21\uff0c \u4eba\u4eec\u5bf9\u4e8e\u300c\u7528\u91d1\u94b1\u6765\u91cf\u5316\u9690\u79c1\u300d\u8fd9\u4ef6\u4e8b\u4e5f\u5e76\u4e0d\u786e\u5b9a \u3002\u5f53\u7136\u4e86\uff0c\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u63a8\u65ad\u5404\u79cd\u9690\u79c1\u884c\u4e3a\u7684\u300c\u4f30\u503c\u300d\u4f1a\u53d7\u5230\u5404\u79cd\u5404\u6837\u7684\u56e0\u7d20\u5f71\u54cd\uff0c\u5c24\u5176\u73b0\u5728\u7684\u60c5\u51b5\u662f\uff0c\u4fe1\u606f\u5206\u4eab\u76f8\u5173\u7684\u79d1\u6280\u4ea7\u54c1\uff08\u6bd4\u5982\u5404\u79cd\u793e\u4ea4\u5a92\u4f53\uff09\u53d1\u5c55\u6bd4\u9690\u79c1\u4fdd\u62a4\u7684\u79d1\u6280\u4ea7\u54c1\u8981\u53d1\u5c55\u5f97\u66f4\u597d\uff0c\u4ee5\u81f3\u4e8e\u4eba\u4eec\u5bb9\u6613\u4f4e\u4f30\u9690\u79c1\u76f8\u5173\u7684\u56e0\u7d20\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u4eba\u4eec\u5bf9\u9690\u79c1\u7684\u4f30\u8ba1\u53ef\u4ee5\u5177\u6709\u8bf1\u5bfc\u6027\uff0c\u56e0\u6b64\u4e5f\u672a\u5fc5\u53ef\u4fe1\u3002\u6839\u636e\u7814\u7a76\uff0c\u4eba\u4eec\u53ea\u6709\u5f97\u5230\u9690\u79c1\u4e86\u4e4b\u540e\u624d\u4f1a\u73cd\u60dc\uff0c\u4f46\u8981\u662f\u6ca1\u6709\u8fd9\u4e2a\u4e1c\u897f\u5c31\u57fa\u672c\u4e0a\u4e5f\u4e0d\u4f1a\u6ce8\u610f\u5b83\u4e86\uff08\u3002\u4e00\u4e9b\u4e0d\u6cd5\u5546\u5bb6\u53ef\u80fd\u4f1a\u8fd9\u4e48\u8bf1\u5bfc\u7528\u6237\u4e00\u5f00\u59cb\u5c31\u4ea4\u51fa\u9690\u79c1\uff0c\u5e76\u4e14\u4e0d\u518d\u53bb\u8003\u8651\u5b83 \u6700\u540e\uff0c\u5176\u4ed6\u7684\u793e\u4f1a\u9700\u6c42\uff0c\u6bd4\u65b9\u8bf4\u4e0e\u522b\u4eba\u5206\u4eab\u3001\u66b4\u9732\u81ea\u5df1\u7684\u4e00\u4e9b\u4fe1\u606f\u7b49\uff0c\u662f\u4f1a\u548c\u9690\u79c1\u4fdd\u62a4\u76f8\u77db\u76fe\u7684\uff0c\u800c\u5b83\u4eec\u4e5f\u540c\u6837\u91cd\u8981\u3002\u4e00\u65b9\u9762\u9002\u5f53\u7684\u9690\u79c1\u8ba9\u4eba\u5b89\u5fc3\uff0c\u53e6\u4e00\u65b9\u9762\u9002\u5f53\u7684\u66b4\u9732\u4e5f\u8ba9\u4eba\u5b89\u5fc3\uff0c\u4eba\u7c7b\u771f\u662f\u4e0d\u597d\u4f3a\u5019\uff08\u3002","title":"\u504f\u597d"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#context-dependence","text":"\u6b63\u5982\u524d\u6587\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5f53\u4eba\u4eec\u4e0d\u786e\u5b9a\u81ea\u5df1\u7684\u504f\u597d\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u503e\u5411\u4e8e\u4ece\u60c5\u5883\u4e2d\u5bfb\u627e\u7ebf\u7d22\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u5bf9\u4e8e\u9690\u79c1\u53ef\u80fd\u6709\u7740\u4e0d\u540c\u7684\u8003\u8651\u3002\u5e76\u4e14\uff0c\u6211\u4eec\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u300c\u516c\u5171\u300d\u548c\u300c\u9690\u79c1\u300d\u7684\u754c\u9650\u4e5f\u5e76\u4e0d\u660e\u786e\u2014\u2014\u867d\u7136\u5927\u90e8\u5206\u65f6\u95f4\u53ea\u4f1a\u628a\u79d8\u5bc6\u544a\u8bc9\u81ea\u5df1\u5173\u7cfb\u6700\u8fd1\u7684\u4eba\uff0c\u4f46\u6709\u7684\u65f6\u5019\u5374\u53ea\u548c\u964c\u751f\u4eba\u8bf4\u3002","title":"Context-dependence"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#sensible-behavior","text":"\u4eba\u4eec\u5bf9\u4e8e\u9690\u79c1\u7684\u5224\u65ad\u6709\u65f6\u662f\u300c\u5408\u60c5\u5408\u7406\u300d\u7684\uff0c\u6bd4\u5982\u5f53\u653f\u5e9c\u51fa\u53f0\u4e86\u76f8\u5e94\u6cd5\u89c4\u4e4b\u540e\uff0c\u4eba\u4eec\u4f1a\u66f4\u52a0\u5bb9\u6613\u4fe1\u4efb\u5404\u79cd\u6536\u96c6\u4fe1\u606f\u7684\u673a\u6784\u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u7ebf\u7d22\u4e5f\u4f1a\u6709\u574f\u5904\uff0c\u6709\u4e9b\u65f6\u5019\u4eba\u4eec\u5728\u67d0\u79cd\u7279\u5b9a\u73af\u5883\u4e0b\u53ef\u80fd\u4f1a\u65e0\u610f\u8bc6\u5730\u4ea4\u51fa\u81ea\u5df1\u7684\u9690\u79c1\u3002","title":"Sensible Behavior"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#culture-and-behavior-of-other-people","text":"\u4e24\u79cd\u65b9\u5f0f\uff1adescriptive norms or via reciprocity \u5f53\u5468\u56f4\u7684\u4eba\u90fd\u66b4\u9732\u81ea\u5df1\u7684\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u4eba\u4eec\u4f1a\u66f4\u503e\u5411\u4e8e\u968f\u5927\u6d41\u4e5f\u8fd9\u4e48\u505a\uff1b\u5f53\u5bf9\u65b9\u66b4\u9732\u4e86\u4e00\u4e9b\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u4eba\u4eec\u4e5f\u4f1a\u968f\u4e4b\u66b4\u9732\u76f8\u5e94\u7684\u4fe1\u606f\uff08\u5c3d\u7ba1\u5bf9\u65b9\u53ef\u80fd\u53ea\u662f\u4e2aAI\uff09\u3002\u8fd9\u4e5f\u662f\u7f51\u7edc\u4e0a\u4e3a\u4ec0\u4e48\u90a3\u4e48\u591a\u4eba\u516c\u5f00\u81ea\u5df1\u4fe1\u606f\u7684\u539f\u56e0\u3002 \u53e6\u5916\uff0c\u4ed6\u4eba\u5bf9\u4e8e\u4fe1\u606f\u7684\u6001\u5ea6\u4e5f\u4f1a\u5f71\u54cd\u5230\u81ea\u5df1\u7684\u9690\u79c1\uff0c\u56e0\u4e3a\u4e00\u65e6\u4f60\u5c06\u67d0\u79cd\u4fe1\u606f\u544a\u8bc9\u522b\u4eba\uff0c\u4ed6/\u5979\u5c31\u4f1a\u548c\u4f60\u5171\u540c\u62e5\u6709\u8be5\u4fe1\u606f\uff0c\u8fd9\u5c31\u66f4\u52a0\u6a21\u7cca\u4e86\u9690\u79c1\u548c\u516c\u5f00\u7684\u8fb9\u754c\u3002 \u540c\u6837\u5730\uff0c\u5bf9\u4e8e\u9690\u79c1\u7684\u8003\u8651\u4e5f\u4f1a\u4e0e\u7ecf\u9a8c\u6709\u5173\uff0c\u6bd4\u5982\u770b\u5230\u76d1\u63a7\u6444\u50cf\u5934\u5c31\u4f1a\u672c\u80fd\u5730\u611f\u5230\u8b66\u60d5\u3002\u4f46\u540c\u65f6\u5b83\u4e5f\u662f\u6709\u9002\u5e94\u6027\u7684\u2014\u2014\u8981\u662f\u76d1\u63a7\u6444\u50cf\u5934\u5929\u5929\u90fd\u653e\u5728\u90a3\u91cc\uff0c\u90a3\u4eba\u4eec\u4e5f\u4f1a\u9010\u6e10\u653e\u677e\u8b66\u60d5\u3002\u56e0\u6b64\u4eba\u4eec\u53ef\u80fd\u4f1a\u9010\u6e10\u4e60\u60ef\u4fe1\u606f\u65f6\u4ee3\u5e26\u6765\u7684\u9690\u79c1\u4fb5\u72af\u3002 \u56e0\u4e3a\u4fe1\u606f\u65f6\u4ee3\u9690\u79c1\u7684\u754c\u9650\u9010\u6e10\u6a21\u7cca\uff0c\u6240\u4ee5\u533a\u5206\u7ebf\u4e0a\u7ebf\u4e0b\u3001\u6ee1\u8db3\u6bcf\u4e00\u4e2a\u4eba\u5bf9\u81ea\u5df1\u7684\u9884\u671f\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u6211\u4eec\u4e0d\u518d\u80fd\u591f\u7cbe\u786e\u5730\u63a7\u5236\u4f4f\u81ea\u5df1\u53d1\u5e03\u7684\u4fe1\u606f\u7684\u76ee\u6807\u7fa4\u4f17\uff0c\u8fd9\u4e5f\u4f1a\u5e26\u6765\u4e00\u4e9b\u5173\u4e8e\u5f53\u4ee3\u4fe1\u606f\u79d1\u6280\u7684\u4e00\u4e9b\u62c5\u5fe7\u3002","title":"Culture and Behavior of Other People"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#malleability-and-influence","text":"\u5c31\u56e0\u4e3a\u5927\u90e8\u5206\u4eba\u5e76\u6ca1\u6709\u610f\u8bc6\u5230\u81ea\u5df1\u7684\u9690\u79c1\u6289\u62e9\u4e0e\u60c5\u5883\u76f8\u5173\uff0c\u4f46\u5f88\u591a\u673a\u6784\u548c\u7ec4\u7ec7\u6ce8\u610f\u5230\u4e86\uff0c\u6240\u4ee5\u4fe1\u606f\u6536\u96c6\u4e0e\u5229\u7528\u6210\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u4ea7\u4e1a\uff08\u3002\u4ed6\u4eec\u4f1a\u5229\u7528\u4eba\u4eec\u9690\u79c1\u503e\u5411\u7684\u53ef\u5851\u6027\u6765\uff08\u8bf1\u5bfc\uff09\u4ea4\u51fa\u6570\u636e\u3002","title":"Malleability and Influence"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#_3","text":"\u4eba\u4eec\u4e00\u822c\u90fd\u4e0d\u4f1a\u6539\u81ea\u5df1\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u800c\u4e14\u503e\u5411\u4e8e\u8ba4\u4e3a\u9ed8\u8ba4\u8bbe\u7f6e\u662f\u7cfb\u7edf\u63a8\u8350\u7684\u6700\u4f18\u89e3\u3002\u56e0\u6b64\u5982\u679c\u793e\u4ea4\u5a92\u4f53\u9ed8\u8ba4\u516c\u5f00\u4fe1\u606f\uff0c\u90a3\u4eba\u4eec\u4e5f\u4f1a\u66f4\u6709\u53ef\u80fd\u516c\u5f00\u81ea\u5df1\u7684\u4fe1\u606f\u3002","title":"\u9ed8\u8ba4\u8bbe\u7f6e"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#_4","text":"\u6bd4\u5982\u6709\u8bf1\u5bfc\u6027\u7684\u7528\u6237\u754c\u9762\u3002\u6216\u8005\u5728\u6536\u96c6\u4fe1\u606f\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u53d1\u51fa\u8b66\u544a\uff0c\u5373\u4f7f\u53d1\u51fa\u8b66\u544a\u4e86\u4e5f\u4f1a\u987a\u4fbf\u641e\u70b9\u5149\u987e\u4ec0\u4e48\u7684\u8ba9\u4eba\u4eec\u5bf9\u8b66\u544a\u672c\u8eab\u5370\u8c61\u4e0d\u592a\u597d\u3002","title":"\u8bf1\u5bfc\u7528\u6237\u516c\u5f00\u4fe1\u606f"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#_5","text":"\u6709\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u4e00\u70b9\u70b9\u5e72\u9884\u8d62\u5f97\u7528\u6237\u7684\u4fe1\u4efb\uff0c\u4ed6\u4eec\u5c31\u4f1a\u5bf9\u4fe1\u606f\u5b89\u5168\u7684\u8b66\u60d5\u6027\u653e\u677e\uff0c\u6bd4\u5982\u516c\u5e03\u4e00\u4e2a\u6d88\u8d39\u8005\u5e76\u4e0d\u4f1a\u4ed4\u7ec6\u770b\u7684\u9690\u79c1\u4fdd\u62a4\u653f\u7b56\uff0c\u7528\u6237\u5c31\u4f1a\u300c\u653e\u5fc3\u5730\u300d\u5c06\u6570\u636e\u4ea4\u7ed9\u7b2c\u4e09\u65b9\u3002","title":"\u524d\u63d0\u6761\u4ef6"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#_6","text":"\u57fa\u672c\u4e0a\u6240\u6709\u7684\u76f8\u5173\u4ea7\u54c1\u90fd\u4f1a\u8ba9\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u81ea\u5df1\u4fe1\u606f\u7684\u516c\u5f00\u8303\u56f4\uff0c\u800c\u4e14\u4e00\u822c\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u7684\u5fc5\u5907\u63aa\u65bd\u3002\u7136\u800c\u5c06\u51b3\u5b9a\u6743\u4ea4\u7ed9\u7528\u6237\u6709\u65f6\u4f1a\u4ea7\u751f\u53cd\u4f5c\u7528\u3002\u7814\u7a76\u53d1\u73b0\u5f53\u7528\u6237\u5728\u4fe1\u606f\u516c\u5f00\u8303\u56f4\u4e2d\u6709\u66f4\u591a\u7684\u9009\u62e9\u65f6\uff0c\u4ed6\u4eec\u53cd\u800c\u4f1a\u503e\u5411\u4e8e\u516c\u5f00\u66f4\u591a\u7684\u4fe1\u606f\u3002","title":"\u53ef\u63a7\u6027"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#_7","text":"\u548c\u53ef\u63a7\u6027\u7c7b\u4f3c\uff0c\u5b83\u4e00\u822c\u4e5f\u88ab\u8ba4\u4e3a\u5bf9\u4fdd\u62a4\u7528\u6237\u7684\u9690\u79c1\u6709\u5229\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u5374\u6210\u4e86\u9e21\u808b\u3002\u6bd5\u7adf\u6ca1\u6709\u51e0\u4e2a\u7528\u6237\u4f1a\u771f\u7684\u9605\u8bfb\u6761\u6b3e\uff0c\u5e76\u4e14\u5f04\u660e\u767d\u90a3\u4e9b\u7f51\u7ad9\u548c\u670d\u52a1\u662f\u5982\u4f55\u6536\u96c6\u5e76\u4e14\u5229\u7528\u81ea\u5df1\u7684\u6570\u636e\u7684\u3002\u66f4\u4f55\u51b5\u5373\u4f7f\u60f3\u8981\u8bfb\uff0c\u4e5f\u5f88\u96be\u5f04\u61c2\uff0c\u53cd\u800c\u662f\u6d6a\u8d39\u65f6\u95f4\u3002 \u4e0d\u8fc7\uff0c\u4e4b\u524d\u7528\u300c\u8bf1\u5bfc\u300d\u8fd9\u4e2a\u8bcd\u597d\u50cf\u7b97\u8d2c\u4e49\uff0c\u4f46\u4e0d\u662f\u6240\u6709\u7684\u53ef\u5851\u6027\u4e0e\u53ef\u64cd\u4f5c\u6027\u90fd\u662f\u8d1f\u9762\u7684\u3002\u7136\u800c\u5982\u679c\u4f7f\u7528\u5f97\u5f53\uff0c\u53ef\u5851\u6027\u53ef\u4ee5\u5bf9\u793e\u4f1a\u6709\u7740\u79ef\u6781\u7684\u5f71\u54cd\uff0c\u6bd4\u5982\u8ba9\u7528\u6237\u611f\u77e5\u5230\u88ab\u76d1\u89c6\u80fd\u591f\u8ba9\u7528\u6237\u65e0\u610f\u8bc6\u5730\u505a\u51fa\u66f4\u6709\u5229\u4e8e\u793e\u4f1a\u7684\u884c\u4e3a\u3002\u76f8\u540c\u5730\uff0c\u7f51\u7edc\u5e26\u6765\u7684\u53bb\u4eba\u683c\u5316\u4e5f\u80fd\u591f\u7528\u6765\u6536\u96c6\u51c6\u786e\u6027\u66f4\u9ad8\u7684\u516c\u5171\u6570\u636e\uff08\u6bd4\u5982\u4eba\u4eec\u5728\u5b9e\u540d\u72b6\u6001\u4e0b\u4e0d\u592a\u613f\u610f\u900f\u9732\u7684\u6570\u636e\uff09\u3002","title":"\u4fe1\u606f\u900f\u660e\u5316"},{"location":"research/Privacy%20%26%20Human%20Behavior%20in%20the%20Age%20of%20Information/#conclusion","text":"\u5728\u4e0d\u540c\u7684\u6587\u5316\u4e2d\uff0c\u5173\u4e8e\u9690\u79c1\u7684\u5171\u8bc6\u548c\u884c\u4e3a\u662f\u4e0d\u540c\u7684\uff1b\u7136\u800c\uff0c\u4e0d\u8bba\u5728\u54ea\u79cd\u6587\u5316\u4e2d\uff0c\u5982\u4f55\u63a7\u5236\u9690\u79c1\u4e0e\u516c\u5f00\u7684\u754c\u9650\u662f\u6bcf\u4e00\u4e2a\u4eba\u90fd\u9700\u8981\u6ce8\u610f\u7684\uff0c\u800c\u8fd9\u4e2a\u95ee\u9898\u5728\u4fe1\u606f\u65f6\u4ee3\u66f4\u52a0\u91cd\u8981\uff08\u63a7\u5236\u8fd9\u4e2a\u7684\u80fd\u529b\u5df2\u7ecf\u8d85\u51fa\u4e86\u6211\u4eec\u7684\u751f\u7406\u6781\u9650\uff09\u3002 \u8bba\u516c\u5171\u653f\u7b56\u80fd\u591f\u8d77\u5230\u4ec0\u4e48\u4f5c\u7528\uff1f \u6839\u636e\u7814\u7a76\u53d1\u73b0\uff0c\u5355\u7eaf\u5730\u300c\u901a\u77e5\u300d\u6216\u8005\u300c\u8d4b\u4e88\u300d\u7528\u6237\u9690\u79c1\u76f8\u5173\u7684\u6743\u529b\uff0c\u5df2\u7ecf\u4e0d\u80fd\u63d0\u4f9b\u8db3\u591f\u7684\u4fdd\u62a4\u4e86\u3002\u5c24\u5176\u662f\u300c\u63a7\u5236\u300d\u548c\u300c\u4e0d\u900f\u660e\u5ea6\u300d\uff0c\u4e8b\u5b9e\u4e0a\u6548\u679c\u5e76\u6ca1\u6709\u90a3\u4e48\u597d\uff0c\u751a\u81f3\u8fd8\u6709\u53cd\u4f5c\u7528\u3002 \u5982\u679c\u60f3\u8981\u6700\u5927\u7a0b\u5ea6\u4e0a\u4fdd\u62a4\u7528\u6237\u7684\u9690\u79c1\uff0c\u5f88\u9057\u61be\u5730\uff0c\u5c31\u8981\u8ba9\u7528\u6237\u505a\u5c3d\u53ef\u80fd\u5c11\u7684\u7406\u6027\u51b3\u5b9a\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u4e00\u5957\u4fdd\u62a4\u76f8\u5173\u7684\u57fa\u672c\u51c6\u5219\uff0c\u6765\u534f\u52a9\u7528\u6237\u5728\u5f53\u524d\u7684\u4fe1\u606f\u73af\u5883\u4e0b\u505a\u51fa\u6289\u62e9\uff0c\u529b\u56fe\u5b9e\u73b0\u7528\u6237\u3001\u516c\u6c11\u4e0e\u516c\u53f8\u3001\u4fe1\u606f\u6301\u6709\u8005\u4e4b\u95f4\u7684\u6743\u529b\u5bf9\u7b49\u3002","title":"Conclusion"},{"location":"research/Statistics%20Crash%20Course/","text":"CrashCourse Statistics 1 What can statistics do? Descriptive statistics: description of the spreadout or central tendency of the data Inferential statistics: make conclusions using the data(especially used to test hypothesis) However, for different questions, they will have different standards for whether two things are related or not. CAUTION: We still cannot say that the conclusion must be right, there is always some uncertainty in statistics. 2 It is hard for common people to 'feel' really big or really small numbers(numeracy). So we should think mathematically and use some tools to make better decisions. 3 measures of central tendency mean\u5e73\u5747\u6570 median\u4e2d\u4f4d\u6570 mode\u4f17\u6570(fine for non-numeric data!) normal: data distribute roughly equal in both sides of the middle, and most of the values are close to the middle value symmetric: mean and median are the same if not symmetric, then the data is skewed. distribution: how often the data occurs in the dataset(frequency) When there is more than one modes in a dataset, you might just include two groups of data in a same dataset, especially in a large dataset. 4 measures of spread range: largest-smallest interquartile range: the spread of middle 50% of the data variance\u65b9\u5dee to be more precise, variance=sum of (data-mean)^2/(N-1) standard deviation: square root of variance 5 data visualization part 1 data: categorical & quantitative for categorical data: bar chart pie char pictograph for quantitative data: binning: bin quatitative data to categories histograms 6 data visualization part 2 still for quantitative data: dotplot(similar to histograms, replace the bar with a certain amount of dots) stem & leaf plot(use raw data, divided into different stems and add leaves according to the raw values without the stem) box-and-whiskers plot(fence,min,q1,median,q3,max,fence)(data out of the fences should be excluded) cumulative frequency plot(the frequency that accumulated up to that point) 7 distributions: the shape and spread of data normal distribution: mean: the center of distribution standard deviation: how thin or squished the shape is positive(right)/negative(left) skew for some distributions that has more hthan one peaks, we might put the data of more than one unimodal distributions together uniform distribution: each value has the same frequency 8 data relationships clusters in scatter plot could find relationships regression line: a line that as close to every point as possible at the same time regression coefficient: a non-zero slope that tells there are some positive or negative relationships between two variables, but we cannot know more information from the value (direction & closeness) standard correlation: standard deviation could scale the correlation to r: (-1,1) (r=0, no relation) squared correlation: r^2, how well we could predict one variable if you know another correlation doesn't equal causation","title":"CrashCourse Statistics"},{"location":"research/Statistics%20Crash%20Course/#crashcourse-statistics","text":"","title":"CrashCourse Statistics"},{"location":"research/Statistics%20Crash%20Course/#1","text":"What can statistics do? Descriptive statistics: description of the spreadout or central tendency of the data Inferential statistics: make conclusions using the data(especially used to test hypothesis) However, for different questions, they will have different standards for whether two things are related or not. CAUTION: We still cannot say that the conclusion must be right, there is always some uncertainty in statistics.","title":"1"},{"location":"research/Statistics%20Crash%20Course/#2","text":"It is hard for common people to 'feel' really big or really small numbers(numeracy). So we should think mathematically and use some tools to make better decisions.","title":"2"},{"location":"research/Statistics%20Crash%20Course/#3","text":"measures of central tendency mean\u5e73\u5747\u6570 median\u4e2d\u4f4d\u6570 mode\u4f17\u6570(fine for non-numeric data!) normal: data distribute roughly equal in both sides of the middle, and most of the values are close to the middle value symmetric: mean and median are the same if not symmetric, then the data is skewed. distribution: how often the data occurs in the dataset(frequency) When there is more than one modes in a dataset, you might just include two groups of data in a same dataset, especially in a large dataset.","title":"3"},{"location":"research/Statistics%20Crash%20Course/#4","text":"measures of spread range: largest-smallest interquartile range: the spread of middle 50% of the data variance\u65b9\u5dee to be more precise, variance=sum of (data-mean)^2/(N-1) standard deviation: square root of variance","title":"4"},{"location":"research/Statistics%20Crash%20Course/#5","text":"data visualization part 1 data: categorical & quantitative for categorical data: bar chart pie char pictograph for quantitative data: binning: bin quatitative data to categories histograms","title":"5"},{"location":"research/Statistics%20Crash%20Course/#6","text":"data visualization part 2 still for quantitative data: dotplot(similar to histograms, replace the bar with a certain amount of dots) stem & leaf plot(use raw data, divided into different stems and add leaves according to the raw values without the stem) box-and-whiskers plot(fence,min,q1,median,q3,max,fence)(data out of the fences should be excluded) cumulative frequency plot(the frequency that accumulated up to that point)","title":"6"},{"location":"research/Statistics%20Crash%20Course/#7","text":"distributions: the shape and spread of data normal distribution: mean: the center of distribution standard deviation: how thin or squished the shape is positive(right)/negative(left) skew for some distributions that has more hthan one peaks, we might put the data of more than one unimodal distributions together uniform distribution: each value has the same frequency","title":"7"},{"location":"research/Statistics%20Crash%20Course/#8","text":"data relationships clusters in scatter plot could find relationships regression line: a line that as close to every point as possible at the same time regression coefficient: a non-zero slope that tells there are some positive or negative relationships between two variables, but we cannot know more information from the value (direction & closeness) standard correlation: standard deviation could scale the correlation to r: (-1,1) (r=0, no relation) squared correlation: r^2, how well we could predict one variable if you know another correlation doesn't equal causation","title":"8"}]}